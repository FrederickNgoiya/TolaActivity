{"version":3,"file":"audit_log-85f6578f37de61aeb303.js","sources":["webpack:///./js/pages/tola_management_pages/audit_log/views.js","webpack:///./js/pages/tola_management_pages/audit_log/index.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/components/pagination.js","webpack:///./js/api.js","webpack:///./js/pages/tola_management_pages/audit_log/api.js","webpack:///./js/pages/tola_management_pages/audit_log/models.js"],"sourcesContent":["import React from 'react';\nimport { observer } from \"mobx-react\"\nimport Pagination from 'components/pagination'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\n\nimport LoadingSpinner from 'components/loading-spinner'\n\nconst ResultChangeset = ({data, name, pretty_name}) => {\n    if(name == 'evidence_url') {\n        return <div className=\"change__field\"><strong>{pretty_name}</strong>: {(data != 'N/A' && data !== '')?<a href={data} target=\"_blank\">Link</a>:data}</div>\n    } else if (name === 'disaggregation_values') {\n        if (Object.entries(data).length) {\n            return <div className=\"changelog__change__targets\">\n                <h4 className=\"text-small\">{gettext('Disaggregated values changed')}</h4>\n                {Object.entries(data).map(([id, dv]) => {\n                    return <div className=\"change__field\" key={id}><strong>{dv.name}:</strong> {dv.value}</div>\n                })}\n            </div>\n        } else {\n            return null;\n        }\n    } else {\n        return <div className=\"change__field\"><strong>{pretty_name}</strong>: {data}</div>\n    }\n}\n\nconst ProgramDatesChangeset = ({data, name, pretty_name}) => {\n    return <p>{pretty_name}: {data}</p>\n}\n\nconst IndicatorChangeset = ({data, name, pretty_name}) => {\n    if(name == 'targets') {\n        return <div className=\"changelog__change__targets\">\n            <h4 className=\"text-small\">{gettext('Targets changed')}</h4>\n            {Object.entries(data).map(([id, target]) => {\n                return <div className=\"change__field\" key={id}><strong>{target.name}:</strong> {target.value}</div>\n            })}\n        </div>\n    } else {\n        return <div className=\"change__field\">\n            <strong>{pretty_name}:</strong> {(data !== null && data !== undefined)?data.toString():gettext('N/A')}\n        </div>\n    }\n}\n\nclass ChangesetEntry extends React.Component {\n    renderType(type, data, name, pretty_name) {\n        switch(type) {\n            case 'indicator_changed':\n            case 'indicator_created':\n            case 'indicator_deleted':\n                return <IndicatorChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n            case 'result_changed':\n            case 'result_created':\n            case 'result_deleted':\n                return <ResultChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n            case 'program_dates_changed':\n                return <ProgramDatesChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n        }\n    }\n\n    render() {\n        const {data, type, name, pretty_name} = this.props\n        return this.renderType(type, data, name, pretty_name)\n    }\n}\n\nconst ExpandAllButton = observer(\n    ({store}) => {\n        return <button className=\"btn btn-medium text-action btn-sm\"\n                       onClick={() => store.expandAllExpandos()}\n                       disabled={store.log_rows.length === store.expando_rows.size}>\n            <i className=\"fas fa-plus-square\"></i>\n            {\n                /* # Translators: button label to show the details of all rows in a list */}\n            {gettext('Expand all')}\n        </button>\n    }\n);\n\nconst CollapseAllButton = observer(\n    ({store}) => {\n        return <button className=\"btn btn-medium text-action btn-sm\"\n                       onClick={() => store.collapsAllExpandos()}\n                       disabled={store.expando_rows.size === 0}>\n            <i className=\"fas fa-minus-square\"></i>\n            {\n                /* # Translators: button label to hide the details of all rows in a list */}\n            {gettext('Collapse all')}\n        </button>\n    }\n);\n\nexport const IndexView = observer(\n    ({store}) => {\n        return <div id=\"audit-log-index-view\">\n            <header className=\"page-title\">\n                <h1><small>{gettext(\"Indicator change log:\")}</small> {store.program_name}</h1>\n            </header>\n\n            <div className=\"admin-list__controls\">\n                <div className=\"controls__bulk-actions\">\n                    <div className=\"btn-group\">\n                        <ExpandAllButton store={store} />\n                        <CollapseAllButton store={store} />\n                    </div>\n                </div>\n                <div className=\"controls__buttons\">\n                    <a className=\"btn btn-secondary btn-sm\" href={`/api/tola_management/program/${store.program_id}/export_audit_log`}>\n                        <i className=\"fas fa-download\"></i>\n                        {gettext(\"Excel\")}\n                    </a>\n                </div>\n            </div>\n\n            <div className=\"admin-list__table\">\n                <LoadingSpinner isLoading={store.fetching}>\n                    <table className=\"table table-sm table-bordered bg-white text-small changelog\">\n                        <thead>\n                            <tr>\n                                <th className=\"text-nowrap\">{gettext(\"Date and time\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"No.\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Indicator\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"User\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Organization\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Change type\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Previous entry\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"New entry\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Reason for change\")}</th>\n                            </tr>\n                        </thead>\n                        {store.log_rows.map(data => {\n                                let is_expanded = store.expando_rows.has(data.id);\n                                return <tbody key={data.id}>\n                                <tr className={is_expanded ? 'changelog__entry__header is-expanded' : 'changelog__entry__header'} onClick={() => store.toggleRowExpando(data.id)}>\n                                    <td className=\"text-action\">\n                                        <FontAwesomeIcon icon={is_expanded ? 'caret-down' : 'caret-right'} />&nbsp;{data.date}\n                                    </td>\n                                    <td>{(data.indicator) ? data.indicator.number_display : gettext('N/A')}</td>\n                                    <td>{(data.indicator) ? data.indicator.name : gettext('N/A')}</td>\n                                    <td>{data.user}</td>\n                                    <td>{data.organization}</td>\n                                    <td className=\"text-nowrap\">{data.pretty_change_type}</td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                </tr>\n                                {is_expanded &&\n                                <tr className=\"changelog__entry__row\" key={data.id}>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td className=\"changelog__change--prev\">\n                                        {data.diff_list.map(changeset => {\n                                            return <ChangesetEntry key={changeset.name} name={changeset.name}\n                                                                   pretty_name={changeset.pretty_name}\n                                                                   type={data.change_type} data={changeset.prev}/>\n                                        })}\n                                    </td>\n                                    <td className=\"changelog__change--new\">\n                                        {data.diff_list.map(changeset => {\n                                            return <ChangesetEntry key={changeset.name} name={changeset.name}\n                                                                   pretty_name={changeset.pretty_name}\n                                                                   type={data.change_type} data={changeset.new}/>\n                                        })}\n                                    </td>\n                                    <td className=\"changelog__change--rationale\">{data.rationale}</td>\n                                </tr>\n                                }\n                                </tbody>\n                            })}\n                    </table>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-muted text-small\">{store.entries_count?`${store.entries_count} ${gettext(\"entries\")}`:`--`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                             pageCount={store.total_pages}\n                             initialPage={store.current_page}\n                             onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {ProgramAuditLogStore} from './models'\nimport {IndexView} from './views'\n\n/*\n * Model/Store setup\n */\nconst store = new ProgramAuditLogStore(\n    jsContext.program_id,\n    jsContext.program_name,\n)\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector('#app_root')\n)\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import {api} from '../../../api';\n\nexport const fetchProgramAuditLogWithFilter = (program_id, page) => api.get(`/tola_management/program/${program_id}/audit_log/`, {params: {page: page}}).then(response => {\n    let data = response.data\n    let total_results_count = data.count\n    let current_results_count = data.results.length\n    let total_pages = data.page_count\n\n    return {\n        logs: data.results,\n        total_pages: total_pages,\n        total_entries: total_results_count,\n        next_page: data.next,\n        prev_page: data.previous\n    }\n})\n\nexport default {\n    fetchProgramAuditLogWithFilter\n}\n","import { observable, computed, action, runInAction } from \"mobx\"\nimport api from './api'\n\nexport class ProgramAuditLogStore {\n    @observable program_id = null\n    @observable program_name = null\n    @observable log_rows = []\n    @observable fetching = false\n    @observable current_page = 0\n\n    @observable entries_count = 0\n    @observable total_pages = 0\n    @observable next_page = null\n    @observable previous_page = null\n\n    // UI state - track what history rows are expanded\n    @observable expando_rows = new Set();\n\n    constructor(program_id, program_name) {\n        this.program_id = program_id\n        this.program_name = program_name\n        this.fetchProgramAuditLog()\n    }\n\n    @action\n    fetchProgramAuditLog() {\n        this.fetching = true\n\n        api.fetchProgramAuditLogWithFilter(this.program_id, this.current_page + 1).then(results => {\n            runInAction(() => {\n                this.fetching = false\n                this.log_rows = results.logs\n                this.entries_count = results.total_entries\n                this.total_pages = results.total_pages\n                this.next_page = results.next_page\n                this.previous_page = results.previous_page\n            })\n        })\n    }\n\n    @action\n    changePage(page) {\n        if(page.selected != this.current_page) {\n            this.current_page = page.selected\n            this.fetchProgramAuditLog()\n        }\n    }\n\n    @action\n    toggleRowExpando(row_id) {\n        if (this.expando_rows.has(row_id)) {\n            this.expando_rows.delete(row_id);\n        } else {\n            this.expando_rows.add(row_id);\n        }\n    }\n\n    @action\n    expandAllExpandos() {\n        this.log_rows.forEach((row) => this.expando_rows.add(row.id));\n    }\n\n    @action\n    collapsAllExpandos() {\n        this.expando_rows.clear();\n    }\n}\n"],"mappings":"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","sourceRoot":""}