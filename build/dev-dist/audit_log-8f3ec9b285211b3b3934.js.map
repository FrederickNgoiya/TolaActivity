{"version":3,"file":"audit_log-8f3ec9b285211b3b3934.js","sources":["webpack:///./js/pages/tola_management_pages/audit_log/views.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/pages/tola_management_pages/audit_log/index.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/components/expander.js","webpack:///./js/components/pagination.js","webpack:///./js/components/management-table.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/audit_log/api.js","webpack:///./js/pages/tola_management_pages/audit_log/models.js"],"sourcesContent":["import React from 'react';\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport classNames from 'classnames'\nimport ManagementTable from 'components/management-table'\nimport Pagination from 'components/pagination'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport Expander from 'components/expander'\n\nimport LoadingSpinner from 'components/loading-spinner'\n\nconst pretty_change_type = {\n    indicator_changed: gettext('Indicator changed'),\n    indicator_created: gettext('Indicator created'),\n    indicator_deleted: gettext('Indicator deleted'),\n    result_changed: gettext('Result changed'),\n    result_created: gettext('Result created'),\n    result_deleted: gettext('Result deleted'),\n    program_dates_changed: gettext('Program Dates Changed')\n}\n\nconst map_pretty_change_type = change_type => pretty_change_type[change_type]\n\nconst units_of_measure_type = {\n    1: gettext(\"Number\"),\n    2: gettext(\"Percentage\")\n}\nconst map_unit_of_measure_type = id => units_of_measure_type[id]\n\nconst directions_of_change = {\n    1: gettext(\"N/A\"),\n    2: gettext(\"Increase (+)\"),\n    3: gettext(\"Decrease (-)\"),\n}\nconst map_direction_of_change = id => directions_of_change[id]\n\nconst result_changeset_name_map = {\n    'evidence_url': gettext('Evidence Url'),\n    'evidence_name': gettext('Evidence Name'),\n    'date': gettext('Date'),\n    'target': gettext('Target'),\n    'value': gettext('Value'),\n}\n\nconst ResultChangeset = ({data, name}) => {\n    if(name == 'evidence_url') {\n        return <p>{result_changeset_name_map[name]}: {(data != 'N/A')?<a href={data}>Link</a>:data}</p>\n    } else {\n        return <p>{result_changeset_name_map[name]}: {data}</p>\n    }\n}\n\nconst program_dates_changset_name_map = {\n    'start_date': gettext('Start Date'),\n    'end_date': gettext('End Date')\n}\n\nconst ProgramDatesChangeset = ({data, name}) => {\n    return <p>{program_dates_changset_name_map[name]}: {data}</p>\n}\n\nconst indicator_changeset_name_map = {\n    name: gettext('Name'),\n    unit_of_measure: gettext('Unit of Measure'),\n    unit_of_measure_type: gettext('Unit of Measure Type'),\n    is_cumulative: gettext('Is Cumulative'),\n    lop_target: gettext('LOP Target'),\n    direction_of_change: gettext('Direction of Change'),\n    rationale_for_target: gettext('Rationale for Target'),\n    baseline_value: gettext('Baseline Value'),\n    baseline_na: gettext('Baseline N/A'),\n}\n\nconst IndicatorChangeset = ({data, name}) => {\n    const mapped_data = (() => {\n        if (data == 'N/A') return data\n\n        switch(name) {\n            case 'unit_of_measure_type':\n                return map_unit_of_measure_type(data)\n                break\n            case 'direction_of_change':\n                return map_direction_of_change(data)\n                break\n            default:\n                return data\n                break\n        }\n    })()\n    if(name == 'targets') {\n        return <div>\n            <p>Targets</p>\n            {Object.entries(data).map(([id, target]) => {\n                return <p key={id}>{target.name}: {target.value}</p>\n            })}\n        </div>\n    } else {\n        return <p>\n            {indicator_changeset_name_map[name]}: {(mapped_data !== null && mapped_data !== undefined)?mapped_data.toString():'N/A'}\n        </p>\n    }\n}\n\nclass ChangesetEntry extends React.Component {\n    renderType(type, data, name) {\n        switch(type) {\n            case 'indicator_changed':\n            case 'indicator_created':\n            case 'indicator_deleted':\n                return <IndicatorChangeset data={data} name={name}/>\n                break\n            case 'result_changed':\n            case 'result_created':\n            case 'result_deleted':\n                return <ResultChangeset data={data} name={name} />\n                break\n            case 'program_dates_changed':\n                return <ProgramDatesChangeset data={data} name={name} />\n                break\n        }\n    }\n\n    render() {\n        const {data, type, name} = this.props\n        return this.renderType(type, data, name)\n    }\n}\n\nexport const IndexView = observer(\n    ({store}) => {\n        return <div id=\"audit-log-index-view\" className=\"container-fluid row\">\n\n            <div className=\"admin-list__controls\">\n                <a className=\"btn btn-link btn-secondary btn-sm\" href={`/api/tola_management/program/${store.program_id}/export_audit_log`}>{gettext(\"Export to Excel\")}</a>\n            </div>\n            <div className=\"col col-sm-12 admin-list\">\n                <LoadingSpinner isLoading={store.fetching}>\n                    <table className=\"admin-list__table\">\n                        <thead>\n                            <tr>\n                                <th>{gettext(\"Date and Time\")}</th>\n                                <th>{gettext(\"No.\")}</th>\n                                <th width=\"25%\">{gettext(\"Indicator\")}</th>\n                                <th>{gettext(\"User\")}</th>\n                                <th>{gettext(\"Organization\")}</th>\n                                <th>{gettext(\"Change Type\")}</th>\n                                <th>{gettext(\"Previous Entry\")}</th>\n                                <th>{gettext(\"New Entry\")}</th>\n                                <th>{gettext(\"Rationale\")}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {store.log_rows.map(data => <tr key={data.id}>\n                                <td>{data.date}</td>\n                                <td>{(data.indicator)?data.indicator.number:'N/A'}</td>\n                                <td>{(data.indicator)?data.indicator.name:'N/A'}</td>\n                                <td>{data.user}</td>\n                                <td>{data.organization}</td>\n                                <td>{map_pretty_change_type(data.change_type)}</td>\n                                <td className=\"expand-section\">\n                                    <Expander>\n                                        {data.diff_list.map(changeset => {\n                                             return <ChangesetEntry key={changeset.name} name={changeset.name} type={data.change_type} data={changeset.prev} />\n                                        })}\n                                    </Expander>\n                                </td>\n                                <td className=\"expand-section\">\n                                    <Expander>\n                                        {data.diff_list.map(changeset => {\n                                             return <ChangesetEntry key={changeset.name} name={changeset.name} type={data.change_type} data={changeset.new} />\n                                        })}\n                                    </Expander>\n                                </td>\n                                <td className=\"expand-section\"><Expander>{data.rationale}</Expander></td>\n                            </tr>)}\n                        </tbody>\n                    </table>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-muted text-small\">{store.entries_count?`${store.entries_count} ${gettext(\"entries\")}`:`--`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                             pageCount={store.total_pages}\n                             initialPage={store.current_page}\n                             onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {ProgramAuditLogStore} from './models'\nimport {IndexView} from './views'\n\n/*\n * Model/Store setup\n */\nconst store = new ProgramAuditLogStore(\n    jsContext.program_id,\n)\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector('#app_root')\n)\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react'\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: false,\n            overflowing: false,\n        }\n        this.ref = React.createRef()\n    }\n\n    componentDidMount() {\n        if(this.ref.current.scrollHeight > this.ref.current.clientHeight) {\n            this.setState({overflowing: true})\n        }\n    }\n\n    toggleExpanded(e) {\n        e.preventDefault()\n        this.setState({\n            expanded: !this.state.expanded\n        })\n    }\n\n    render() {\n        return <div>\n            <div ref={this.ref} className=\"expander\" style={{height: !this.state.expanded && (this.props.height || 50)}}>\n                {this.props.children}\n            </div>\n            {this.state.overflowing &&\n            <div>\n                <a href=\"\" onClick={(e) => this.toggleExpanded(e)}>{(this.state.expanded)?'Show Less':'Show More'}</a>\n            </div>\n            }\n        </div>\n    }\n}\n\nexport default Expander\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"6\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport {observer} from 'mobx-react'\n\nconst Option = props => {\n    return (components.Option &&\n        <components.Option {...props}>\n            <input\n            className=\"checkboxed-multi-select-checkbox\"\n            type=\"checkbox\"\n            checked={props.isSelected}\n            onChange={(e) => {\n                //we can let the outer component manage state\n            }}\n            />\n            &nbsp;\n            {props.data.label}\n        </components.Option>\n    )\n}\n\nconst CheckboxedMultiSelect = observer(props => (\n      <Select\n        isMulti={true}\n        closeMenuOnSelect={false}\n        hideSelectedOptions={false}\n        components={{\n            MenuList,\n            Option\n        }}\n        {...props} />\n))\n\nexport default CheckboxedMultiSelect\n","import {api} from '../../../api';\n\nexport const fetchProgramAuditLogWithFilter = (program_id, page) => api.get(`/tola_management/program/${program_id}/audit_log/`, {params: {page: page}}).then(response => {\n    let data = response.data\n    let total_results_count = data.count\n    let current_results_count = data.results.length\n    let total_pages = data.page_count\n\n    return {\n        logs: data.results,\n        total_pages: total_pages,\n        total_entries: total_results_count,\n        next_page: data.next,\n        prev_page: data.previous\n    }\n})\n\nexport default {\n    fetchProgramAuditLogWithFilter\n}\n","import { observable, computed, action, runInAction } from \"mobx\"\nimport api from './api'\n\nexport class ProgramAuditLogStore {\n    @observable program_id = null\n    @observable log_rows = []\n    @observable fetching = false\n    @observable current_page = 0\n    @observable details_target = null\n\n    @observable entries_count = 0\n    @observable total_pages = 0\n    @observable next_page = null\n    @observable previous_page = null\n    @observable current_page = 0\n\n    constructor(program_id) {\n        this.program_id = program_id\n        this.fetchProgramAuditLog()\n    }\n\n    @action\n    fetchProgramAuditLog() {\n        this.fetching = true\n\n        api.fetchProgramAuditLogWithFilter(this.program_id, this.current_page + 1).then(results => {\n            runInAction(() => {\n                this.fetching = false\n                this.log_rows = results.logs\n                this.entries_count = results.total_entries\n                this.total_pages = results.total_pages\n                this.next_page = results.next_page\n                this.previous_page = results.previous_page\n            })\n        })\n    }\n\n    @action\n    toggleDetailsTarget(row_id) {\n        if(this.details_target == row_id) {\n            this.details_target = null\n        } else {\n            this.details_target = row_id\n        }\n    }\n\n    @action\n    changePage(page) {\n        if(page.selected != this.current_page) {\n            this.current_page = page.selected\n            this.fetchProgramAuditLog()\n        }\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AAWA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAbA;AAeA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;;;AAtBA;AACA;AAwBA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAUA;AAAA;AAAA;AAOA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AArBA;AA0BA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/LA;AA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","sourceRoot":""}