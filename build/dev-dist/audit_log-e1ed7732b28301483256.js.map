{"version":3,"file":"audit_log-e1ed7732b28301483256.js","sources":["webpack:///./js/pages/tola_management_pages/audit_log/views.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/pages/tola_management_pages/audit_log/index.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/components/expander.js","webpack:///./js/components/pagination.js","webpack:///./js/components/management-table.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/audit_log/api.js","webpack:///./js/pages/tola_management_pages/audit_log/models.js"],"sourcesContent":["import React from 'react';\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport classNames from 'classnames'\nimport ManagementTable from 'components/management-table'\nimport Pagination from 'components/pagination'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport Expander from 'components/expander'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\n\nimport LoadingSpinner from 'components/loading-spinner'\n\nconst ResultChangeset = ({data, name, pretty_name}) => {\n    if(name == 'evidence_url') {\n        return <div className=\"change__field\"><strong>{pretty_name}</strong>: {(data != 'N/A')?<a href={data}>Link</a>:data}</div>\n    } else {\n        return <div className=\"change__field\"><strong>{pretty_name}</strong>: {data}</div>\n    }\n}\n\nconst ProgramDatesChangeset = ({data, name, pretty_name}) => {\n    return <p>{pretty_name}: {data}</p>\n}\n\nconst IndicatorChangeset = ({data, name, pretty_name}) => {\n    if(name == 'targets') {\n        return <div className=\"changelog__change__targets\">\n            <h4 className=\"text-small\">{gettext('Targets changed')}</h4>\n            {Object.entries(data).map(([id, target]) => {\n                return <div className=\"change__field\" key={id}><strong>{target.name}:</strong> {target.value}</div>\n            })}\n        </div>\n    } else {\n        return <div className=\"change__field\">\n            <strong>{pretty_name}:</strong> {(data !== null && data !== undefined)?data.toString():gettext('N/A')}\n        </div>\n    }\n}\n\nclass ChangesetEntry extends React.Component {\n    renderType(type, data, name, pretty_name) {\n        switch(type) {\n            case 'indicator_changed':\n            case 'indicator_created':\n            case 'indicator_deleted':\n                return <IndicatorChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n            case 'result_changed':\n            case 'result_created':\n            case 'result_deleted':\n                return <ResultChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n            case 'program_dates_changed':\n                return <ProgramDatesChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n        }\n    }\n\n    render() {\n        const {data, type, name, pretty_name} = this.props\n        return this.renderType(type, data, name, pretty_name)\n    }\n}\n\nconst ExpandAllButton = observer(\n    ({store}) => {\n        return <button className=\"btn btn-medium text-action btn-sm\"\n                       onClick={() => store.expandAllExpandos()}\n                       disabled={store.log_rows.length === store.expando_rows.size}>\n            <i className=\"fas fa-plus-square\"></i>\n            {\n                /* # Translators: button label to show the details of all rows in a list */}\n            {gettext('Expand all')}\n        </button>\n    }\n);\n\nconst CollapseAllButton = observer(\n    ({store}) => {\n        return <button className=\"btn btn-medium text-action btn-sm\"\n                       onClick={() => store.collapsAllExpandos()}\n                       disabled={store.expando_rows.size === 0}>\n            <i className=\"fas fa-minus-square\"></i>\n            {\n                /* # Translators: button label to hide the details of all rows in a list */}\n            {gettext('Collapse all')}\n        </button>\n    }\n);\n\nexport const IndexView = observer(\n    ({store}) => {\n        return <div id=\"audit-log-index-view\">\n            <header className=\"page-title\">\n                <h1><small>{gettext(\"Indicator change log:\")}</small> {store.program_name}</h1>\n            </header>\n\n            <div className=\"admin-list__controls\">\n                <div className=\"controls__bulk-actions\">\n                    <div className=\"btn-group\">\n                        <ExpandAllButton store={store} />\n                        <CollapseAllButton store={store} />\n                    </div>\n                </div>\n                <div className=\"controls__buttons\">\n                    <a className=\"btn btn-secondary btn-sm\" href={`/api/tola_management/program/${store.program_id}/export_audit_log`}>\n                        <i className=\"fas fa-download\"></i>\n                        {gettext(\"Excel\")}\n                    </a>\n                </div>\n            </div>\n\n            <div className=\"admin-list__table\">\n                <LoadingSpinner isLoading={store.fetching}>\n                    <table className=\"table table-sm table-bordered bg-white text-small changelog\">\n                        <thead>\n                            <tr>\n                                <th className=\"text-nowrap\">{gettext(\"Date and Time\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"No.\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Indicator\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"User\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Organization\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Change Type\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Previous Entry\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"New Entry\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Rationale\")}</th>\n                            </tr>\n                        </thead>\n                        {store.log_rows.map(data => {\n                                let is_expanded = store.expando_rows.has(data.id);\n                                return <tbody key={data.id}>`\n                                <tr className={is_expanded ? 'changelog__entry__header is-expanded' : 'changelog__entry__header'} onClick={() => store.toggleRowExpando(data.id)}>\n                                    <td className=\"text-action\">\n                                        <FontAwesomeIcon icon={is_expanded ? 'caret-down' : 'caret-right'} />&nbsp;{data.date}\n                                    </td>\n                                    <td>{(data.indicator) ? data.indicator.number : gettext('N/A')}</td>\n                                    <td>{(data.indicator) ? data.indicator.name : gettext('N/A')}</td>\n                                    <td>{data.user}</td>\n                                    <td>{data.organization}</td>\n                                    <td className=\"text-nowrap\">{data.pretty_change_type}</td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                </tr>\n                                {is_expanded &&\n                                <tr className=\"changelog__entry__row\" key={data.id}>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td className=\"changelog__change--prev\">\n                                        {data.diff_list.map(changeset => {\n                                            return <ChangesetEntry key={changeset.name} name={changeset.name}\n                                                                   pretty_name={changeset.pretty_name}\n                                                                   type={data.change_type} data={changeset.prev}/>\n                                        })}\n                                    </td>\n                                    <td className=\"changelog__change--new\">\n                                        {data.diff_list.map(changeset => {\n                                            return <ChangesetEntry key={changeset.name} name={changeset.name}\n                                                                   pretty_name={changeset.pretty_name}\n                                                                   type={data.change_type} data={changeset.new}/>\n                                        })}\n                                    </td>\n                                    <td className=\"changelog__change--rationale\">{data.rationale}</td>\n                                </tr>\n                                }\n                                </tbody>\n                            })}\n                    </table>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-muted text-small\">{store.entries_count?`${store.entries_count} ${gettext(\"entries\")}`:`--`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                             pageCount={store.total_pages}\n                             initialPage={store.current_page}\n                             onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {ProgramAuditLogStore} from './models'\nimport {IndexView} from './views'\n\n/*\n * Model/Store setup\n */\nconst store = new ProgramAuditLogStore(\n    jsContext.program_id,\n    jsContext.program_name,\n)\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector('#app_root')\n)\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react'\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: false,\n            overflowing: false,\n        }\n        this.ref = React.createRef()\n    }\n\n    componentDidMount() {\n        if(this.ref.current.scrollHeight > this.ref.current.clientHeight) {\n            this.setState({overflowing: true})\n        }\n    }\n\n    toggleExpanded(e) {\n        e.preventDefault()\n        this.setState({\n            expanded: !this.state.expanded\n        })\n    }\n\n    render() {\n        return <div className=\"changelog-entry\">\n            <div ref={this.ref} className=\"changelog-entry__expanding\" style={{height: !this.state.expanded && (this.props.height || 50)}}>\n                {this.props.children}\n            </div>\n            {this.state.overflowing &&\n            <div className=\"changelog-entry__expand-trigger\">\n                <a href=\"\" onClick={(e) => this.toggleExpanded(e)}>{(this.state.expanded)?'Show Less':'Show More'}</a>\n            </div>\n            }\n        </div>\n    }\n}\n\nexport default Expander\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"6\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport {observer} from 'mobx-react'\n\n\nconst CountLabel = props => {\n    return (\n        <div className=\"count__label\">\n            {props.children}\n            {(props.clearable &&\n                <div onClick={ props.clearSelect }>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\" />\n                </div>\n              )}\n        </div>\n    );\n        \n}\n\n@observer\nclass CheckboxedMultiSelect extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    clearSelect = (e) => {\n        e.stopPropagation();\n        this.props.onChange([]);;\n    }\n    makeLabel = (_ref3) => {\n        var placeholderButtonLabel = _ref3.placeholderButtonLabel,\n            thisValue = _ref3.value;\n    \n        if (!thisValue) {\n          return <CountLabel clearable={false}>\n                    {placeholderButtonLabel}\n                </CountLabel>;\n        }\n    \n        if (Array.isArray(thisValue)) {\n          if (thisValue.length === 0) {\n            return <CountLabel clearable={false}>\n                        {placeholderButtonLabel}\n                    </CountLabel>\n          }\n    \n          if (thisValue.length === 1) {\n            return <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                        {thisValue[0].label}\n                    </CountLabel>;\n          }\n          return (\n           <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                {\"\".concat(thisValue.length,\" \", gettext(\"selected\"))}\n            </CountLabel>\n            );\n        }\n    \n        return <CountLabel clearable={false}>\n                    {thisValue.label}\n               </CountLabel>;\n      };\n      render() {\n        return <ReactMultiSelectCheckboxes\n                { ...this.props}\n                placeholder={ gettext(\"Search\")}\n                placeholderButtonLabel={ this.props.placeholder }\n                getDropdownButtonLabel={ this.makeLabel }\n                components={{MenuList}}\n                />;\n      }\n}\n\nexport default CheckboxedMultiSelect\n","import {api} from '../../../api';\n\nexport const fetchProgramAuditLogWithFilter = (program_id, page) => api.get(`/tola_management/program/${program_id}/audit_log/`, {params: {page: page}}).then(response => {\n    let data = response.data\n    let total_results_count = data.count\n    let current_results_count = data.results.length\n    let total_pages = data.page_count\n\n    return {\n        logs: data.results,\n        total_pages: total_pages,\n        total_entries: total_results_count,\n        next_page: data.next,\n        prev_page: data.previous\n    }\n})\n\nexport default {\n    fetchProgramAuditLogWithFilter\n}\n","import { observable, computed, action, runInAction } from \"mobx\"\nimport api from './api'\n\nexport class ProgramAuditLogStore {\n    @observable program_id = null\n    @observable program_name = null\n    @observable log_rows = []\n    @observable fetching = false\n    @observable current_page = 0\n\n    @observable entries_count = 0\n    @observable total_pages = 0\n    @observable next_page = null\n    @observable previous_page = null\n\n    // UI state - track what history rows are expanded\n    @observable expando_rows = new Set();\n\n    constructor(program_id, program_name) {\n        this.program_id = program_id\n        this.program_name = program_name\n        this.fetchProgramAuditLog()\n    }\n\n    @action\n    fetchProgramAuditLog() {\n        this.fetching = true\n\n        api.fetchProgramAuditLogWithFilter(this.program_id, this.current_page + 1).then(results => {\n            runInAction(() => {\n                this.fetching = false\n                this.log_rows = results.logs\n                this.entries_count = results.total_entries\n                this.total_pages = results.total_pages\n                this.next_page = results.next_page\n                this.previous_page = results.previous_page\n            })\n        })\n    }\n\n    @action\n    changePage(page) {\n        if(page.selected != this.current_page) {\n            this.current_page = page.selected\n            this.fetchProgramAuditLog()\n        }\n    }\n\n    @action\n    toggleRowExpando(row_id) {\n        if (this.expando_rows.has(row_id)) {\n            this.expando_rows.delete(row_id);\n        } else {\n            this.expando_rows.add(row_id);\n        }\n    }\n\n    @action\n    expandAllExpandos() {\n        this.log_rows.forEach((row) => this.expando_rows.add(row.id));\n    }\n\n    @action\n    collapsAllExpandos() {\n        this.expando_rows.clear();\n    }\n}\n"],"mappings":"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","sourceRoot":""}