{"version":3,"file":"iptt_quickstart-55a0c546caf8c443363f.js","sources":["webpack:///./js/pages/iptt_quickstart/index.js","webpack:///./js/pages/iptt_quickstart/models/program_models.js","webpack:///./js/pages/iptt_quickstart/components/buttons.js","webpack:///./js/pages/iptt_quickstart/components/selects.js","webpack:///./js/pages/iptt_quickstart/components/radios.js","webpack:///./js/pages/iptt_quickstart/components/main.js","webpack:///./js/pages/iptt_quickstart/models/root_store.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport QSRootStore from './models/root_store';\nimport { IPTTQuickstartForm } from './components/main';\n\nconst rootStore = new QSRootStore(jsContext);\n\nReactDOM.render(\n    <Provider rootStore={ rootStore }>\n        <IPTTQuickstartForm />\n    </Provider>,\n    document.querySelector('#id_div_top_quickstart_iptt')\n);","export class QSProgram {\n    constructor(rootStore, programJSON) {\n        this.rootStore = rootStore;\n        this.id = parseInt(programJSON.id);\n        this.name = programJSON.name;\n        this.frequencies = programJSON.frequencies;\n        this.periodDateRanges = programJSON.periodDateRanges;\n    }\n    \n    periods(frequency) {\n        return frequency in this.periodDateRanges ? this.periodDateRanges[frequency] : false;\n    }\n    \n    periodCount(frequency) {\n        return this.periods(frequency) ? this.periods(frequency).length : 0;\n    }\n}\n\nexport default class QSProgramStore  {\n    constructor(rootStore, programsJSON) {\n        this.rootStore = rootStore;\n        this.programs = {};\n        programsJSON.forEach(programJSON => {\n            this.programs[programJSON.id] = new QSProgram(this.rootStore, programJSON);\n        });\n    }\n    \n    getProgram(id) {\n        return this.programs[id];\n    }\n    \n    get programList() {\n        return Object.values(this.programs).sort(\n            (a, b) => {\n                return a.name.toUpperCase() < b.name.toUpperCase() ?\n                    -1 :\n                    a.name.toUpperCase() > b.name.toUpperCase() ?\n                        1 : 0;\n            }\n        );\n    }\n\n}","import React from 'react';\nimport { inject, observer } from 'mobx-react';\n\nexport const IPTTSubmit = inject('rootStore')(\n    observer(({ url, rootStore}) => {\n        const handleClick = () => window.location.href = rootStore[url];\n        const inlineCSS = {\n            width: '100%'\n        };\n        return  <div className=\"d-flex justify-content-center mb-1\">\n                <button\n                className=\"btn btn-primary\"\n                onClick={ handleClick }\n                disabled={ !rootStore[url] }\n                style={ inlineCSS }>{ gettext('View report') }</button>\n            </div>;    \n    })\n)","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport Select from 'react-select';\n\nconst IPTTSelectWrapper = (props) => {\n    return <div className=\"form-row mb-3\">\n                <label className=\"col-form-label text-uppercase\">\n                    { props.label }\n                </label>\n                { props.children }\n            </div>;\n}\n\n\n@inject('rootStore')\n@observer\nexport class QSTVAProgramSelect extends React.Component {\n    selectProgram = (selected) => {\n        this.props.rootStore.setTVAProgram(selected.value);\n    }\n    render() {\n        return <IPTTSelectWrapper label={ gettext('Program') }>\n                    <Select options={ this.props.rootStore.tvaProgramOptions }\n                            value={ this.props.rootStore.selectedTVAProgram }\n                            onChange={ this.selectProgram }\n                            className=\"tola-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class QSTimeperiodsProgramSelect extends React.Component {\n    selectProgram = (selected) => {\n        this.props.rootStore.setTimeperiodsProgram(selected.value);\n    }\n    render() {\n        return <IPTTSelectWrapper label={ gettext('Program') }>\n                    <Select options={ this.props.rootStore.timeperiodsProgramOptions }\n                            value={ this.props.rootStore.selectedTimeperiodsProgram }\n                            onChange={ this.selectProgram }\n                            className=\"tola-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class QSTVAPeriodSelect extends React.Component {\n    selectFrequency = (selected) => {\n        this.props.rootStore.setFrequency(selected.value);\n    }\n    render() {\n\n        return <IPTTSelectWrapper label={ gettext('Target periods') }>\n                    <Select options={ this.props.rootStore.frequencyOptions }\n                            value={ this.props.rootStore.selectedFrequency }\n                            onChange={ this.selectFrequency }\n                            className=\"tola-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport classNames from 'classnames';\n\n@inject('rootStore')\n@observer\nexport class QSTVATimeFrameRadio extends React.Component {\n    setMostRecentCount = (e) => {\n        this.props.rootStore.setMostRecentCount(e.target.value);\n    }\n    render() {\n        return <div className=\"form-group d-lg-flex pb-4\">\n                    <div className={\n                        classNames('form-check', 'form-check-inline', 'pt-1', 'pr-2',\n                            {'form-check-inline--is-disabled': this.props.rootStore.periodCountDisabled})\n                    }>\n                        <span className=\"form-check-input\">\n                            <input type=\"radio\"\n                                   checked={ this.props.rootStore.showAll }\n                                   disabled={ this.props.rootStore.periodCountDisabled }\n                                   onChange={ this.props.rootStore.setShowAll }\n                                   id=\"id_targetperiods-timeframe_0\"\n                                   />\n                        </span>\n                        <label className=\"form-check-label\" htmlFor=\"id_targetperiods-timeframe_0\">\n                            { gettext('Show all') }\n                        </label>\n                    </div>\n                    <div className={\n                        classNames('form-check', 'form-check-inline', 'pt-1',\n                            {'form-check-inline--is-disabled': this.props.rootStore.periodCountDisabled})\n                    }>\n                        <span className=\"form-check-input\">\n                            <input type=\"radio\"\n                                   checked={ this.props.rootStore.mostRecent }\n                                   disabled={ this.props.rootStore.periodCountDisabled }\n                                   onChange={ this.props.rootStore.setMostRecent }\n                                   id=\"id_targetperiods-timeframe_1\"\n                                   />\n                        </span>\n                        <label className=\"form-check-label\" htmlFor=\"id_targetperiods-timeframe_1\">\n                            { gettext('Most recent') }\n                        </label>\n                    </div>\n                    <div>\n                        <input type=\"number\" className=\"form-control\"\n                           value={ this.props.rootStore.mostRecentCountDisplay }\n                           disabled={ this.props.rootStore.periodCountDisabled }\n                           placeholder={ gettext('enter a number') }\n                           onChange={ this.setMostRecentCount }\n                           />\n                    </div>\n               </div>;\n    }\n}\n","import React from 'react';\nimport { QSTVAProgramSelect, QSTVAPeriodSelect, QSTimeperiodsProgramSelect } from './selects';\nimport { QSTVATimeFrameRadio } from './radios';\nimport { IPTTSubmit } from './buttons';\n\nconst QuickstartCard = ({ children }) => {\n    return <div className=\"col-sm-6\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        { children }\n                    </div>\n                </div>\n            </div>;\n}\n\nconst TVAQuickstartForm = () => {\n    return <QuickstartCard>\n                <h5 className=\"card-title\">{\n                    /* # Translators: description of a report type, comparison with targets */\n                    gettext('Periodic targets vs. actuals')\n                }</h5>\n                <p className=\"card-subtitle text-muted mb-2\">{\n                    /* # Translators: label on a form that describes the report it will display */\n                    gettext('View results organized by target period for indicators that share the same target frequency')    \n                }</p>\n                <QSTVAProgramSelect />\n                <QSTVAPeriodSelect />\n                <QSTVATimeFrameRadio />\n                <IPTTSubmit url={'tvaURL' } />\n            </QuickstartCard>;\n}\n\nconst TimeperiodsQuickstartForm = () => {\n    return <QuickstartCard>\n                <h5 className=\"card-title\">{\n                    /* # Translators: description of a report type, showing only recent updates */\n                    gettext('Recent progress for all indicators')\n                }</h5>\n                <p className=\"card-subtitle text-muted mb-2\">{\n                    /* # Translators: label on a form describing the report it will display */\n                    gettext('View the most recent two months of results. (You can customize your time periods.) This report does not include periodic targets')\n                }</p>\n                <QSTimeperiodsProgramSelect />\n                <IPTTSubmit url={'timeperiodsURL'} />\n            </QuickstartCard>;\n}\n\nexport const IPTTQuickstartForm = () => {\n    return <div className=\"row\">\n                <TVAQuickstartForm />\n                <TimeperiodsQuickstartForm />\n           </div>;\n}","/**\n * IPTT Quickstart React data models\n * @module: iptt_quickstart/models\n */\n\nimport { observable, computed, action, reaction } from 'mobx';\nimport QSProgramStore from './program_models'\n\nexport const BLANK_LABEL = '---------';\nexport const TVA = 1;\nexport const TIMEPERIODS = 2;\nconst BLANK_OPTION = {\n    value: null,\n    label: BLANK_LABEL\n};\n\nconst _gettext = (typeof gettext !== 'undefined') ?  gettext : (s) => s;\n\nexport default class QSRootStore {\n    @observable tvaProgramId = null;\n    @observable timeperiodsProgramId = null;\n    @observable frequencyId = null;\n    @observable showAll = true;\n    @observable mostRecent = false;\n    @observable mostRecentCount = '';\n\n    constructor(contextData) {\n        this.programStore = new QSProgramStore(this, contextData.programs);\n        this.periodLabels = {\n            1: _gettext(\"Life of Program (LoP) only\"),\n            3: _gettext(\"Annual\"),\n            2: _gettext(\"Midline and endline\"),\n            5: _gettext(\"Tri-annual\"),\n            4: _gettext(\"Semi-annual\"),\n            7: _gettext(\"Monthly\"),\n            6: _gettext(\"Quarterly\")\n        };\n        this.iptt_url = contextData.iptt_url;\n        const resetFrequency = reaction(\n            () => this.tvaProgramId,\n            programId => {\n                if (programId !== null && this.frequencyId !== null &&\n                    this.programStore.getProgram(programId).frequencies.indexOf(this.frequencyId) == -1) {\n                    this.setFrequency(null);\n                }\n            }\n        )\n\n        this.setTVAProgram(contextData.initial_selected_program_id);\n        this.setTimeperiodsProgram(contextData.initial_selected_program_id);\n    }\n    \n    /* options for program selection in TIMEPERIODS form */\n    get timeperiodsProgramOptions() {\n        return this.programStore.programList.map(\n            program => ({value: program.id, label: program.name})\n        );\n    }\n    \n    /* options for program selection in TVA form (must have available frequencies) */\n    get tvaProgramOptions() {\n        return this.programStore.programList.filter(\n            program => program.frequencies.length > 0\n        ).map(program => ({value: program.id, label: program.name}));\n    }\n    \n    /* options for frequency selection in TVA form (must be TVA program, only shows that program's frequencies */\n    @computed get frequencyOptions() {\n        if (this.tvaProgramId === null) {\n            return [BLANK_OPTION];\n        }\n        return this.programStore.getProgram(this.tvaProgramId)\n            .frequencies.map( id => ({value: id, label: this.periodLabels[id]})\n        );\n    }\n    \n    /* GET select option (value/label) for selected Program in TVA form */\n    @computed get selectedTVAProgram() {\n        if (this.tvaProgramId === null) {\n            return BLANK_OPTION;\n        }\n        return {\n            value: this.tvaProgramId, label: this.programStore.getProgram(this.tvaProgramId).name\n        }\n    }\n    \n    /* GET select option (value/label) for selected Program in Timeperiods form */\n    @computed get selectedTimeperiodsProgram() {\n        if (this.timeperiodsProgramId === null) {\n            return BLANK_OPTION;\n        }\n        return {\n            value: this.timeperiodsProgramId,\n            label: this.programStore.getProgram(this.timeperiodsProgramId).name\n        }\n    }\n    \n    /* GET select option (value/label) for selected Frequency in TVA form */\n    @computed get selectedFrequency() {\n        if (this.tvaProgramId === null || this.frequencyId === null) {\n            return BLANK_OPTION;\n        }\n        return {\n            value: this.frequencyId,\n            label: this.periodLabels[this.frequencyId]\n        }\n    }\n    \n    /* Whether to disable the most recent and show all radio buttons */\n    @computed get periodCountDisabled() {\n        return this.tvaProgramId === null || [3, 4, 5, 6, 7].indexOf(this.frequencyId) == -1;\n    }\n    \n    /* GET most recent display - only show value if most recent is selected */\n    @computed get mostRecentCountDisplay() {\n        if (!this.periodCountDisabled && this.mostRecent) {\n            return this.mostRecentCount;\n        }\n        return '';\n    }\n    \n    /* SET tva program to the designated ID, and make the report type TVA */\n    @action setTVAProgram(id) {\n        if (id === null) {\n            this.tvaProgramId = null;\n        } else {\n            this.tvaProgramId = id;\n        }\n    }\n    \n    /* SET tva program to the designated ID, and make the report type Timeperiods */\n    @action setTimeperiodsProgram(id) {\n        if (id === null) {\n            this.timeperiodsProgramId = null;\n        } else {\n            this.timeperiodsProgramId = id;\n        }\n    }\n    \n    /* SET frequency in TVA form */\n    @action setFrequency(id) {\n        this.frequencyId = id;\n    }\n    \n    \n    @action setMostRecent = ()  => {\n        this.showAll = false;\n        this.mostRecent = true;\n        this.mostRecentCount = '';\n    }\n\n    @action setMostRecentCount = (count) => {\n        this.setMostRecent();\n        count = Math.min(count, this.programStore.getProgram(this.tvaProgramId).periodCount(this.frequencyId));\n        this.mostRecentCount = count;\n    }\n    \n    @action setShowAll = () => {\n        this.mostRecent = false;\n        this.showAll = true;\n        this.mostRecentCount = '';\n    }\n    \n    @computed get tvaURL() {\n        if (this.tvaProgramId !== null && this.frequencyId !== null) {\n            let url = `${this.iptt_url}${this.tvaProgramId}/targetperiods/?frequency=${this.frequencyId}`;\n            if (this.frequencyId == 1 || this.frequencyId == 2) {\n                return url;\n            } else if (this.showAll) {\n                return `${url}&timeframe=1`;\n            }\n            return `${url}&timeframe=2&numrecentcount=${this.mostRecentCount}`;\n        }\n        return false;\n    }\n    \n    @computed get timeperiodsURL() {\n        if (this.timeperiodsProgramId !== null) {\n            return `${this.iptt_url}${this.timeperiodsProgramId}/timeperiods/` +\n                    `?frequency=7&timeframe=2&numrecentcount=2`;\n        }\n        return false;\n    }\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAcA;AACA;AAfA;AACA;AADA;AAAA;AACA;AAiBA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AAIA;AAEA;;;;;;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAZA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAEA;AAAA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAIA;AAEA;AAAA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAQA;AA/CA;AACA;AADA;AAAA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AACA;;;AAQA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;;;AAzFA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;;;AAAA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AA4CA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;;;;AAnKA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AA2CA;;;;;;;AA8EA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAAA;AACA;AACA;AAAA;AACA;AACA;;AAEA;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;;;;;A","sourceRoot":""}