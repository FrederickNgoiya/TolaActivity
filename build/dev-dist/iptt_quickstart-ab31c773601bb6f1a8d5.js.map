{"version":3,"file":"iptt_quickstart-ab31c773601bb6f1a8d5.js","sources":["webpack:///./js/pages/iptt_quickstart/index.js","webpack:///./js/pages/iptt_quickstart/components/buttons.js","webpack:///./js/pages/iptt_quickstart/components/selects.js","webpack:///./js/pages/iptt_quickstart/components/radios.js","webpack:///./js/pages/iptt_quickstart/models.js","webpack:///./js/pages/iptt_quickstart/components/main.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport { QSRootStore } from './models';\nimport { IPTTQuickstartForm } from './components/main';\n\nconst labels = jsContext.labels;\n\nconst rootStore = new QSRootStore(jsContext);\n\nReactDOM.render(<Provider labels={ labels }\n                          rootStore={ rootStore }>\n                    <IPTTQuickstartForm />\n                </Provider>,\n                document.querySelector('#id_div_top_quickstart_iptt'));","import React from 'react';\nimport { inject, observer } from 'mobx-react';\n\nexport const IPTTSubmit = inject('labels', 'rootStore')(\n    observer(({ url, labels, rootStore}) => {\n        const handleClick = () => window.location.href = rootStore[url];\n        const inlineCSS = {\n            width: '100%'\n        };\n        return  <div className=\"d-flex justify-content-center mb-1\">\n                <button\n                className=\"btn btn-primary\"\n                onClick={ handleClick }\n                disabled={ !rootStore[url] }\n                style={ inlineCSS }>{ labels.submitButton }</button>\n            </div>;    \n    })\n)\n\n\nexport const ExcelButton = inject('labels', 'rootStore')(\n    observer(({ labels, rootStore }) => {\n        return <a type=\"button\"\n                  href={ rootStore.excelURL || '#' }\n                  className={\"btn btn-sm btn-secondary\" + (rootStore.excelURL === false ? \" disabled\" : \"\")}>\n                    <i className=\"fas fa-download\"></i> { labels.excel }\n                </a>;\n    })\n);","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport Select from 'react-select';\n\nconst IPTTSelectWrapper = (props) => {\n    return <div className=\"form-row mb-3\">\n                <label className=\"col-form-label text-uppercase\">\n                    { props.label }\n                </label>\n                { props.children }\n            </div>;\n}\n\n\n@inject('labels', 'rootStore')\n@observer\nexport class QSTVAProgramSelect extends React.Component {\n    selectProgram = (selected) => {\n        this.props.rootStore.setTVAProgramId(selected.value);\n    }\n    render() {\n        return <IPTTSelectWrapper label={ this.props.labels.programSelect }>\n                    <Select options={ this.props.rootStore.tvaProgramOptions }\n                            value={ this.props.rootStore.selectedTVAProgramOption }\n                            onChange={ this.selectProgram }\n                            className=\"iptt-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}\n\n\n@inject('labels', 'rootStore')\n@observer\nexport class QSTimeperiodsProgramSelect extends React.Component {\n    selectProgram = (selected) => {\n        this.props.rootStore.setTimeperiodsProgramId(selected.value);\n    }\n    render() {\n        return <IPTTSelectWrapper label={ this.props.labels.programSelect }>\n                    <Select options={ this.props.rootStore.timeperiodsProgramOptions }\n                            value={ this.props.rootStore.selectedTimeperiodsProgramOption }\n                            onChange={ this.selectProgram }\n                            className=\"iptt-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}\n\n\n@inject('labels', 'rootStore')\n@observer\nexport class QSTVAPeriodSelect extends React.Component {\n    selectFrequency = (selected) => {\n        this.props.rootStore.setTVAFrequencyId(selected.value);\n    }\n    render() {\n\n        return <IPTTSelectWrapper label={ this.props.labels.periodSelect }>\n                    <Select options={ this.props.rootStore.tvaFrequencyOptions }\n                            value={ this.props.rootStore.tvaSelectedFrequencyOption }\n                            onChange={ this.selectFrequency }\n                            className=\"iptt-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}","import React from 'react';\nimport { inject, observer } from 'mobx-react';\n\n@inject('labels', 'rootStore')\n@observer\nexport class QSTVATimeFrameRadio extends React.Component {\n    checkMostRecent = () => {\n        //default value of 2 in case of clicking \"most recent\" radio box - default behavior\n        this.props.rootStore.setTVAMostRecent(null);\n    }\n    updateMostRecentCount = (e) => {\n        this.props.rootStore.setTVAMostRecent(e.target.value);\n    }\n    render() {\n        return <div className=\"form-row mb-3\">\n                    <div className=\"col-sm-4\">\n                        <div className=\"form-check form-check-inline pt-1\">\n                            <span className=\"form-check-input\">\n                                <input type=\"radio\"\n                                       checked={ this.props.rootStore.tvaShowAll }\n                                       disabled={ this.props.rootStore.tvaRadioDisabled }\n                                       onChange={ this.props.rootStore.setTVAShowAll }\n                                       />\n                            </span>\n                            <label className=\"form-check-label\">\n                                { this.props.labels.showAll }\n                            </label>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-4 p-0\">\n                        <div className=\"form-check form-check-inline pt-1\">\n                            <span className=\"form-check-input\">\n                                <input type=\"radio\"\n                                       checked={ this.props.rootStore.tvaMostRecent }\n                                       disabled={ this.props.rootStore.tvaRadioDisabled }\n                                       onChange={ this.checkMostRecent }\n                                       />\n                            </span>\n                            <label className=\"form-check-label\">\n                                { this.props.labels.mostRecent}\n                            </label>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <input type=\"number\" className=\"form-control\"\n                               value={ this.props.rootStore.tvaMostRecentCountDisplay }\n                               disabled={ this.props.rootStore.tvaRadioDisabled }\n                               placeholder={ this.props.labels.mostRecentPlaceholder }\n                               onChange={ this.updateMostRecentCount }\n                               />\n                    </div>\n               </div>;\n    }\n}\n","/**\n * IPTT Quickstart React data models\n * @module: iptt_quickstart/models\n */\n\nimport { observable, computed } from 'mobx';\n\nconst BLANK_LABEL = '---------';\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\n\nclass QSProgram {\n    constructor(rootStore, programJSON) {\n        this.rootStore = rootStore;\n        this.id = programJSON.id;\n        this.name = programJSON.name;\n        this.frequencies = programJSON.frequencies;\n        this.periodDateRanges = programJSON.periodDateRanges;\n    }\n    \n    periods(frequency) {\n        return frequency in this.periodDateRanges ? this.periodDateRanges[frequency] : false;\n    }\n    \n    periodCount(frequency) {\n        return this.periods(frequency) ? this.periods(frequency).length : 0;\n    }\n}\n\nclass QSProgramStore  {\n    constructor(rootStore, programsJSON) {\n        this.rootStore = rootStore;\n        this.programs = {};\n        programsJSON.forEach(programJSON => {\n            this.programs[programJSON.id] = new QSProgram(this.rootStore, programJSON);\n        });\n    }\n    \n    getProgram(id) {\n        return this.programs[id];\n    }\n\n}\n\nexport class QSRootStore {\n    @observable reportType = null;\n    @observable tvaSelectedProgram = null;\n    @observable timeperiodsSelectedProgram = null;\n    @observable tvaSelectedFrequencyId = null;\n    @observable tvaShowAll = true;\n    @observable tvaMostRecent = null;\n    @observable tvaMostRecentCount = 2;\n\n    constructor(contextData) {\n        this.programStore = new QSProgramStore(this, contextData.programs);\n        this.periodLabels = contextData.labels.targetperiods;\n    }\n    \n    setTVAProgramId(id) {\n        if (id === null) {\n            this.tvaSelectedProgram = null;\n        } else if (this.tvaSelectedProgram == null || this.tvaSelectedProgram.id != id) {\n            this.tvaSelectedProgram = this.programStore.getProgram(id);\n            if (this.tvaSelectedFrequencyId\n                && this.tvaSelectedProgram.frequencies.indexOf(parseInt(this.tvaSelectedFrequencyId)) == -1) {\n                this.setTVAFrequencyId(null);\n            }\n        }\n        this.reportType = TVA;\n    }\n    \n    @computed get selectedTVAProgramOption() {\n        if (this.tvaSelectedProgram === null || this.reportType == TIMEPERIODS) {\n            return {value: null, label: BLANK_LABEL};\n        }\n        return {value: this.tvaSelectedProgram.id, label: this.tvaSelectedProgram.name};\n    }\n    \n    setTimeperiodsProgramId(id) {\n        if (id === null) {\n            this.timeperiodsSelectedProgram = null;\n        } else if (this.timeperiodsSelectedProgram == null || this.timeperiodsSelectedProgram.id != id) {\n            this.timeperiodsSelectedProgram = this.programStore.getProgram(id);\n        }\n        this.reportType = TIMEPERIODS;\n    }\n    \n    @computed get selectedTimeperiodsProgramOption() {\n        if (this.timeperiodsSelectedProgram === null || this.reportType == TVA) {\n            return {value: null, label: BLANK_LABEL};\n        }\n        return {value: this.timeperiodsSelectedProgram.id, label: this.timeperiodsSelectedProgram.name};\n    }\n    \n    get timeperiodsProgramOptions() {\n        return Object.entries(this.programStore.programs).map(\n            ([id, program]) => ({value: id, label: program.name})\n        );\n    }\n    \n    get tvaProgramOptions() {\n        return Object.entries(this.programStore.programs).filter(\n            ([id, program]) => program.frequencies.length > 0\n        ).map(\n            ([id, program]) => ({value: id, label: program.name})\n        );\n    }\n    \n    setTVAFrequencyId(id) {\n        if (id === null) {\n            this.tvaSelectedFrequencyId = null;\n        } else if (this.tvaSelectedFrequencyId != id) {\n            this.tvaSelectedFrequencyId = id;\n        }\n        this.reportType = TVA;\n    }\n    \n    @computed get tvaSelectedFrequencyOption() {\n        if (this.reportType == TIMEPERIODS || this.tvaSelectedProgram === null\n            || this.tvaSelectedFrequencyId === null) {\n            return {value: null, label: BLANK_LABEL};\n        }\n        return {\n            value: this.tvaSelectedFrequencyId,\n            label: this.periodLabels[this.tvaSelectedFrequencyId]\n        };\n    }\n    \n    @computed get tvaFrequencyOptions() {\n        if (this.tvaSelectedProgram === null || this.reportType == TIMEPERIODS) {\n            return [{value: null, label: BLANK_LABEL}, ];\n        } else {\n            return this.tvaSelectedProgram.frequencies.map(\n                (id) => ({value: id, label: this.periodLabels[id]})\n            );\n        }\n    }\n    \n    @computed get tvaRadioDisabled() {\n        return !(this.reportType == TVA && this.tvaSelectedProgram != null && this.tvaSelectedFrequencyId !== null);\n    }\n    \n    setTVAShowAll = () => {\n        this.tvaShowAll = true;\n        this.tvaMostRecent = false;\n    }\n    \n    setTVAMostRecent = (count) => {\n        this.tvaMostRecent = true;\n        this.tvaShowAll = false;\n        if (count !== undefined && count !== null) {\n            this.tvaMostRecentCount = count;\n        }\n    }\n    \n    @computed get tvaMostRecentCountDisplay() {\n        return this.tvaMostRecent ? this.tvaMostRecentCount : '';\n    }\n    \n    @computed get tvaURL() {\n        if (this.reportType == TIMEPERIODS || this.tvaSelectedProgram == null || this.tvaSelectedFrequencyId == null) {\n            return false;\n        }\n        let url = '/indicators/iptt_report/' + this.tvaSelectedProgram.id + '/targetperiods/?frequency=' + this.tvaSelectedFrequencyId;\n        if (this.tvaShowAll) {\n            return url + '&timeframe=1';\n        } else if (this.tvaMostRecent) {\n            return url + '&timeframe=2&numrecentcount=' + this.tvaMostRecentCount;\n        }\n        return url;\n    }\n    \n    @computed get excelURL() {\n        if (this.tvaSelectedProgram == null) {\n            return false;\n        }\n        return '/indicators/iptt_excel/?programId=' + this.tvaSelectedProgram.id + '&frequency=all&reportType=tva';\n    }\n    \n    @computed get timeperiodsURL() {\n        if (this.reportType == TVA || this.timeperiodsSelectedProgram == null) {\n            return false;\n        }\n        let url = '/indicators/iptt_report/' + this.timeperiodsSelectedProgram.id + '/timeperiods/?frequency=';\n        return url + '7&timeframe=2&numrecentcount=2';\n    }\n    \n}","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { QSTVAProgramSelect, QSTVAPeriodSelect, QSTimeperiodsProgramSelect } from './selects';\nimport { QSTVATimeFrameRadio } from './radios';\nimport { IPTTSubmit, ExcelButton } from './buttons';\n\nconst QuickstartCard = ({ children }) => {\n    return <div className=\"col-sm-6\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        { children }\n                    </div>\n                </div>\n            </div>;\n}\n\nconst TVAQuickstartForm = inject('labels')(\n    observer(({ labels }) => {\n        return <QuickstartCard>\n                    <h5 className=\"card-title\">{ labels.tvaFilterTitle }</h5>\n                    <p className=\"card-subtitle text-muted mb-2\">{ labels.tvaFilterSubtitle }</p>\n                    <QSTVAProgramSelect />\n                    <QSTVAPeriodSelect />\n                    <QSTVATimeFrameRadio />\n                    <IPTTSubmit url={'tvaURL' } />\n                    <ExcelButton />\n                </QuickstartCard>;\n    })\n);\n\nconst TimeperiodsQuickstartForm = inject('labels')(\n    observer(({ labels  }) => {\n        return <QuickstartCard>\n                    <h5 className=\"card-title\">{ labels.timeperiodsFilterTitle }</h5>\n                    <p className=\"card-subtitle text-muted mb-2\">{ labels.timeperiodsFilterSubtitle }</p>\n                    <QSTimeperiodsProgramSelect />\n                    <IPTTSubmit url={'timeperiodsURL'} />\n                </QuickstartCard>;\n    })\n);\n\nexport const IPTTQuickstartForm = () => {\n    return <div className=\"row\">\n                <TVAQuickstartForm />\n                <TimeperiodsQuickstartForm />\n           </div>;\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAAA;AACA;AADA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAZA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAQA;AA/CA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;;;;AAKA;AAEA;AACA;AACA;AACA;AAEA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAGA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;;;;AAIA;AAAA;AAAA;AASA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AA0FA;AACA;AACA;AACA;AA7FA;AA+FA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AApGA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAzBA;AAAA;AAAA;AAmCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAzCA;AAAA;AAAA;AAiEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAvEA;AAAA;AAAA;AA4BA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAhCA;AAAA;AAAA;AA4CA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAhDA;AAAA;AAAA;AAmDA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAtDA;AAAA;AAAA;AAyDA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AA9DA;AAAA;AAAA;AA0EA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAlFA;AAAA;AAAA;AAoFA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AA5FA;AAAA;AAAA;AA+FA;AACA;AAhGA;AAAA;AAAA;AAgHA;AACA;AAjHA;AAAA;AAAA;AAoHA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AA9HA;AAAA;AAAA;AAiIA;AACA;AACA;AACA;AAAA;AACA;AArIA;AAAA;AAAA;AAwIA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7IA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AAIA;;;;A","sourceRoot":""}