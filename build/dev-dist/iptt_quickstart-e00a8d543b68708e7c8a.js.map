{"version":3,"file":"iptt_quickstart-e00a8d543b68708e7c8a.js","sources":["webpack:///./js/pages/iptt_quickstart/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { observer } from 'mobx-react';\nimport { observable, action } from 'mobx';\nimport Select from 'react-select';\n\nconst BLANK_LABEL = '---------';\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\nclass IPTTQuickstartUIStore {\n    @observable selectedProgram = {\n        [TVA]: null,\n        [TIMEPERIODS]: null\n        };\n    @observable selectedFrequency = null;\n    @observable showAll = TVA;\n    @observable mostRecent = null;\n\n    constructor(programs, labels) {\n        this.programs = {};\n        this.programIds = [];\n        this.labels = labels;\n        programs.forEach((program) => {\n            this.programs[program.id] = {\n                name: program.name,\n                urls: {\n                    [TVA]: program.tva_url,\n                    [TIMEPERIODS]: program.timeperiods_url\n                },\n                frequencies: program.frequencies\n            };\n            this.programIds.push(program.id);\n        });\n    }\n    \n    getUrl = (reportType) => {\n        let url = false;\n        if (this.selectedProgram[reportType] !== null) {\n            url = this.programs[this.selectedProgram[reportType]].urls[reportType];\n            url = url + '?frequency=';\n            if (reportType == TIMEPERIODS) {\n                url = url + '7&recents=2';\n            } else {\n                url = url + this.selectedFrequency + '&';\n                if (this.showAll) {\n                    url = url + 'showall=1';\n                } else {\n                    url = url + 'recents=' + this.mostRecent;\n                }\n            };\n        }\n        return url;\n    }\n\n    getPrograms = (reportType) => {\n        let programOptions = this.programIds.map((pid) => ({value: pid, label: this.programs[pid].name}));\n        if (reportType == TIMEPERIODS) {\n            return programOptions;\n        } else {\n            return programOptions.filter((program) => {return this.programs[program.value].frequencies.length > 0});\n        }\n    }\n    \n    getSelectedProgram = (reportType) => {\n        if (this.selectedProgram[reportType]) {\n            return {\n                value: this.selectedProgram[reportType],\n                label: this.programs[this.selectedProgram[reportType]].name\n            };\n        }\n        return {\n            value: null,\n            label: BLANK_LABEL\n            };\n    }\n\n    \n    getFrequencies = () => {\n        if (!this.selectedProgram[TVA]) {return false;}\n        let selectedId = this.selectedProgram[TVA];\n        return this.programs[selectedId].frequencies.map(\n            (frequency) => ({value: frequency, label: this.labels.frequencies[frequency]})\n        );\n    }\n    \n    getSelectedFrequency = () => {\n        if (this.selectedFrequency) {\n            return {\n                value: this.selectedFrequency,\n                label: this.labels.frequencies[this.selectedFrequency]\n            };\n        }\n        return {\n            value: null,\n            label: BLANK_LABEL\n            };\n    }\n    \n\n    @action\n    setSelectedProgram(value, reportType) {\n        if (reportType == TVA) {\n            this.selectedProgram[TIMEPERIODS] = null;\n        } else if (reportType == TIMEPERIODS) {\n            this.selectedProgram[TVA] = null;\n            this.selectedFrequency = null;\n        }\n        if (value && this.programIds.includes(value)) {\n            this.selectedProgram[reportType] = value;\n            if (this.selectedFrequency && !this.programs[value].frequencies.includes(this.selectedFrequency)) {\n                this.selectedFrequency = null;\n                this.setShowAll(reportType);\n            }\n        }\n    }\n    \n    @action\n    setSelectedFrequency(value, reportType) {\n        this.selectedFrequency = value;\n        if (reportType == TVA && [1, 2].includes(value)) {\n            this.showAll = TVA;\n            this.mostRecent = null;\n        }\n    }\n    \n    @action\n    setShowAll(reportType) {\n        this.showAll = reportType;\n        this.mostRecent = null;\n    }\n    \n    @action\n    setMostRecent(num, reportType) {\n        this.showAll = null;\n        this.mostRecent = true;\n    }\n    @action\n    setMostRecentCount(num, reportType) {\n        this.showAll = null;\n        this.mostRecent = num;\n    }\n    \n}\n\nlet thisUIStore = new IPTTQuickstartUIStore(jsContext.programs, jsContext.labels);\n\n\n\n@observer\nclass ProgramSelect extends React.Component {\n    \n    onSelection = (selected) => {\n        let selectedId = selected ? selected.value : null;\n        this.props.uiStore.setSelectedProgram(selectedId, this.props.reportType);\n    }\n\n    render() {\n        return <Select\n            options={this.props.uiStore.getPrograms(this.props.reportType)}\n            value={this.props.uiStore.getSelectedProgram(this.props.reportType)}\n            onChange={this.onSelection}\n            />;\n    }\n}\n\n@observer\nclass TargetPeriodSelect extends React.Component {\n    onSelection = (selected) => {\n        let selectedId = selected ? selected.value : null;\n        this.props.uiStore.setSelectedFrequency(selectedId, this.props.reportType);\n    }\n    \n    render() {\n        let options = this.props.uiStore.getFrequencies();\n        let isDisabled = false;\n        if (!options) {\n            options = [];\n            isDisabled = true;\n        };\n        return <Select\n                options={options}\n                isDisabled={isDisabled}\n                value={this.props.uiStore.getSelectedFrequency()}\n                onChange={this.onSelection}\n                />;\n    }\n}\n\nconst ShowAllSelect = observer(({uiStore, reportType}) => {\n    const disabled = uiStore.selectedProgram[reportType] === null || (\n        reportType == TVA && uiStore.selectedFrequency === null);\n    const checked = uiStore.showAll == reportType;\n    const handleChange = (e) => {\n        uiStore.setShowAll(reportType);\n    }\n    let className = 'form-check form-check-inline py-1';\n    if (disabled) {\n        className += ' form-check-inline--is-disabled';\n    }\n    return <div className={className}>\n             <span className=\"form-check-input\">\n                <input type=\"radio\"\n                checked={checked} disabled={disabled} \n                onChange={handleChange} />\n             </span>\n             <label className=\"form-check-label\">{uiStore.labels.showAll}</label>\n           </div>;\n});\n\nconst MostRecentSelect = observer(({uiStore, reportType}) => {\n    const disabled = uiStore.selectedProgram[reportType] === null || (\n        reportType == TVA && [1, 2, null].includes(uiStore.selectedFrequency));\n    const checked = uiStore.mostRecent !== null;\n    const handleChange = (e) => {\n        uiStore.setMostRecent(reportType);\n    }\n    let className = 'form-check form-check-inline py-1';\n    if (disabled) {\n        className += ' form-check-inline--is-disabled';\n    }\n    return <div className={className}>\n             <span className=\"form-check-input\">\n                <input type=\"radio\"\n                       checked={checked} disabled={disabled} \n                       onChange={handleChange}/>\n             </span>\n             <label className=\"form-check-label\">{uiStore.labels.mostRecent}</label>\n           </div>;         \n});\n\n@observer\nclass MostRecentCount extends React.Component {\n    handleChange = (e) => {\n        let value = e.target.value;\n        if (value == '') {value = true};\n        this.props.uiStore.setMostRecentCount(value);\n    }\n    render() {\n        let disabled = this.props.uiStore.selectedProgram[this.props.reportType] === null || (\n            this.props.reportType == TVA && this.props.uiStore.selectedFrequency === null) || (\n            this.props.reportType == TVA && [1, 2, null].includes(this.props.uiStore.selectedFrequency));\n        let value = (this.props.uiStore.mostRecent !== null && this.props.uiStore.mostRecent !== true) ? this.props.uiStore.mostRecent : '';\n        return <input\n                type=\"number\" placeholder={this.props.uiStore.labels.mostRecentCount}\n                disabled={disabled} value={value}\n                className=\"form-control\" onChange={this.handleChange}/>;\n    }\n}\n\nconst IPTTSubmit = observer(({ uiStore, reportType}) => {\n    const handleClick = (e) => {\n        let url = uiStore.getUrl(reportType);\n        console.log(url);\n    };\n    const disabled = uiStore.selectedProgram[reportType] === null || \n        (reportType == TVA && uiStore.selectedFrequency === null) ||\n        (reportType == TVA && uiStore.mostRecent === true);\n    const inlineCSS = {\n        width: '100%'\n    };\n    return <button\n            className=\"btn btn-primary\"\n            onClick={handleClick}\n            disabled={disabled}\n            style={inlineCSS}>{uiStore.labels.submit}</button>;\n});\n\n\n\nReactDOM.render(<ProgramSelect uiStore={thisUIStore} reportType={TVA}/>,\n                document.querySelector('#quickstart-tva-form-program-select-react'));\n\nReactDOM.render(<TargetPeriodSelect uiStore={thisUIStore} reportType={TVA} />,\n                document.querySelector('#quickstart-tva-form-period-select-react'));\n\nReactDOM.render(<ShowAllSelect uiStore={thisUIStore} reportType={TVA} />,\n                document.querySelector('#quickstart-tva-form-show-all-react'));\n\nReactDOM.render(<MostRecentSelect uiStore={thisUIStore} reportType={TVA} />,\n                document.querySelector('#quickstart-tva-most-recent-check-react'));\n\nReactDOM.render(<MostRecentCount uiStore={thisUIStore} reportType={TVA} />,\n                document.querySelector('#quickstart-tva-most-recent-count-react'));\n\nReactDOM.render(<IPTTSubmit uiStore={thisUIStore} reportType={TVA} />,\n                document.querySelector('#quickstart-tva-submit-button-react'));\n\nReactDOM.render(<ProgramSelect uiStore={thisUIStore} reportType={TIMEPERIODS}/>,\n                document.querySelector('#quickstart-timeperiods-form-program-select-react'));\n\nReactDOM.render(<IPTTSubmit uiStore={thisUIStore} reportType={TIMEPERIODS} />,\n                document.querySelector('#quickstart-timeperiods-submit-button-react'));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AASA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AAnCA;AAqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA5CA;AA8CA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAzDA;AA4DA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAlEA;AAoEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AA9EA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAIA;AANA;AACA;AAOA;AACA;AACA;AACA;;;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;;AAlIA;;;;;;;AACA;;AAGA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AAmFA;AA6CA;AACA;AAIA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;AAbA;AACA;AAgBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;;AAnBA;AACA;AAqBA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAFA;AAIA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;;;;;;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAIA;;;;AAfA;AACA;AAiBA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}