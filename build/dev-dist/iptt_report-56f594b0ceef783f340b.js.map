{"version":3,"file":"iptt_report-56f594b0ceef783f340b.js","sources":["webpack:///./js/pages/iptt_report/router.js","webpack:///./js/pages/iptt_report/index.js","webpack:///./js/constants.js"],"sourcesContent":["import createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\nimport { observable, computed, reaction } from 'mobx';\n\nimport { TVA, TIMEPERIODS, GROUP_BY_CHAIN, GROUP_BY_LEVEL } from '../../constants';\n\n\n\nvar mockProgramStore = {\n    validPID: true,\n    validFrequencies: [1, 4, 5],\n    groupByOld: false,\n    validateProgramId( id ) {\n        if (this.validPID) {\n            return Promise.resolve(parseInt(id));\n        } else {\n            return Promise.reject(\"bad ID\");\n        }\n    },\n    validateFrequency( programId, frequency, reportType ) {\n        var frequencies = reportType === TIMEPERIODS ? [3, 4, 5, 6, 7] : this.validFrequencies;\n        if (frequencies.includes(parseInt(frequency))) {\n            return parseInt(frequency);\n        }\n        throw \"bad freq\";\n    },\n    currentPeriod( programId, frequency) {\n        return 7;\n    },\n    lastPeriod( programId, frequency ) {\n        return 8;\n    },\n    startPeriodFromDate( programId, frequency, date ) {\n        if (date instanceof Date && !isNaN(date)) {\n            return 3;\n        }\n        throw \"bad date\";\n    },\n    endPeriodFromDate( programId, frequency, date ) {\n        if (date instanceof Date && !isNaN(date)) {\n            if (date.toISOString() == new Date('2017-01-31').toISOString()) {\n                return 10;\n            }\n            return 6;\n        }\n        throw \"bad date\";\n    },\n    oldLevels( programId ) {\n        return this.groupByOld;\n    }\n}\n\nexport default class ipttRouter {\n    @observable reportType = null;\n    @observable programId = null;\n    @observable frequency = null;\n    @observable startPeriod = null;\n    @observable endPeriod = null;\n    @observable groupBy = null;\n    @observable levels = null;\n    @observable tiers = null;\n    @observable sites = null;\n    @observable types = null;\n    @observable indicators = null;\n\n    constructor() {\n        this.routes = [\n        {\n            name: 'iptt',\n            path: '/iptt_report/:programId<\\\\d+>',\n            children: [\n                {\n                    name: 'timeperiods',\n                    path: '/timeperiods?timeperiods'\n                },\n                {\n                    name: 'tva',\n                    path: '/targetperiods?targetperiods'\n                }\n            ]\n        },\n        {\n            name: 'ipttAPI',\n            path: '/iptt_api?reportType&programId',\n            children: [\n                {\n                    name: 'ipttData',\n                    path: '/iptt_report_data/'\n                },\n                {\n                    name: 'ipttExcel',\n                    path: '/iptt_excel/?fullTVA'\n                }\n            ]\n        }\n    ];\n    this.goodQueryParams = ['frequency', 'start', 'end', 'levels', 'types',\n                            'sectors', 'indicators', 'tiers', 'groupby'];\n    this.oldQueryParams = ['timeframe', 'numrecentperiods', 'start_period', 'end_period'];\n    this.queryParams = '?' + (this.goodQueryParams.concat(this.oldQueryParams)).join('&');\n    this.programStore = mockProgramStore;\n    }\n    \n    init = () => {\n        this.router = createRouter(this.routes, {trailingSlashMode: 'always'});\n        this.router.setRootPath(this.queryParams);\n        this.router.usePlugin(browserPlugin({useHash: false, base: '/indicators'}));\n        this.router.subscribe(this.updateRoute);\n        this.router.start();\n        let { name: currentRouteName, params: currentRouteParams} = this.router.getState();\n        this.processParams({name: currentRouteName, ...currentRouteParams}).then(\n            () => {\n                if (this.router.buildPath(currentRouteName, currentRouteParams) !=\n                    this.router.buildPath(this.routeName, this.routeParams)) {\n                    this.router.navigate(this.routeName, this.routeParams, {replace: true});\n                }\n                const navReact = reaction(\n                    () => [this.routeName, this.routeParams],\n                    ([name, params]) => this.router.navigate(name, params)\n                );\n            });\n        \n    }\n    \n    updateRoute = ({ previousRoute, route: {name, params, ...route}}) => {\n        //this.reportType = name == 'iptt.tva' ? TVA : (name == 'iptt.timeperiods' ? TIMEPERIODS : null);\n        //console.log(\"route name\", name);\n        //console.log(\"route params\", params);\n        //console.log(\"updating route from\", previousRoute, \" to \", route);\n        //console.log(\"router state\", this.router.getState());\n    }\n    \n    processParams = ({\n        name = null,\n        programId = null,\n        frequency = null,\n        start = null,\n        end = null,\n        timeperiods = null,\n        targetperiods = null,\n        timeframe = null,\n        numrecentperiods = null,\n        start_period = null,\n        end_period = null,\n        groupby = null,\n        levels = null,\n        tiers = null,\n        sites = null,\n        types = null,\n        indicators = null\n        } = {}) => {\n        this.reportType = name == 'iptt.tva' ? TVA\n                        : name == 'iptt.timeperiods' ? TIMEPERIODS\n                        : null;\n        if (frequency === null && this.reportType === TVA && targetperiods !== null) {\n            frequency = targetperiods;\n        } else if (frequency === null && this.reportType === TIMEPERIODS && timeperiods !== null) {\n            frequency = timeperiods;\n        }\n        return this.programStore.validateProgramId(programId)\n            .then((programId) => {\n                this.programId = programId;\n                this.frequency = this.programStore.validateFrequency(programId, frequency, this.reportType);\n                if (start === null && this.frequency != 1 && this.frequency != 2) {\n                    start = this.getStartPeriod(timeframe, numrecentperiods, start_period);\n                }\n                this.startPeriod = start;\n                if (end === null && this.frequency != 1 && this.frequency != 2) {\n                    end = this.getEndPeriod(timeframe, end_period);\n                }\n                this.endPeriod = end;\n                if (!this.programStore.oldLevels( this.programId )) {\n                    this.groupBy = parseInt(groupby) || GROUP_BY_CHAIN;\n                }\n                levels = this.parseArrayParams(levels);\n                if (levels !== null) {\n                    tiers = null;\n                    this.levels = levels;\n                }\n                if (tiers !== null) {\n                    this.tiers = this.parseArrayParams(tiers);\n                }\n                this.sites = this.parseArrayParams(sites);\n                this.types = this.parseArrayParams(types);\n                this.indicators = this.parseArrayParams(indicators);\n                return Promise.resolve(true);\n            }, (errorMessage) => {throw errorMessage;}\n            ).catch((errorMessage) => {\n                return Promise.reject(errorMessage);\n            });\n        \n    }\n    \n    getStartPeriod = (timeframe, numrecentperiods, start_period) => {\n        if (timeframe == '1') {\n            return 0;\n        } else if (timeframe == '2') {\n            return this.programStore.currentPeriod( this.programId, this.frequency ) -\n                        (parseInt(numrecentperiods) || 2) + 1;\n        } else if (start_period !== null) {\n            return this.programStore.startPeriodFromDate(\n                this.programId, this.frequency, new Date(start_period)\n            );\n        }\n        return Math.max(\n                this.programStore.currentPeriod( this.programId, this.frequency ) - 2,\n                0\n            );\n    }\n    \n    getEndPeriod = (timeframe, end_period) => {\n        var end;\n        if (timeframe == '1') {\n            return this.programStore.lastPeriod( this.programId, this.frequency );\n        } else if (timeframe == '2') {\n            return this.programStore.currentPeriod( this.programId, this.frequency );\n        } else if (end_period !== null) {\n            return Math.min(\n                    this.programStore.endPeriodFromDate(\n                        this.programId, this.frequency, new Date(end_period)\n                        ),\n                    this.programStore.lastPeriod( this.programId, this.frequency )\n                    );\n        }\n        return Math.max(\n                Math.min(\n                    this.programStore.currentPeriod( this.programId, this.frequency ),\n                    this.startPeriod + 2\n                ),\n                this.programStore.lastPeriod( this.programId, this.frequency )\n            );\n    }\n    \n    parseArrayParams = (param) => {\n        if (typeof param === 'string' || param instanceof String) {\n            return [parseInt(param)];\n        } else if (Array.isArray(param)) {\n            return param.map(p => parseInt(p));\n        } else if (Number.isInteger(param)) {\n            return param;\n        } else if (!isNaN(parseInt(param))) {\n            return [parseInt(param)];\n        }\n        return null;\n    }\n    \n    parseToArrayParams = (param) => {\n        if (Array.isArray(param)) {\n            return param.map(this.parseToArrayParams);\n        } else if (typeof param === 'string' || param instanceof String) {\n            return param;\n        }\n        return String(param);\n    }\n    \n    @computed get routeName() {\n        return this.reportType === TVA\n                    ? 'iptt.tva'\n                    : (this.reportType === TIMEPERIODS)\n                        ? 'iptt.timeperiods'\n                        : 'iptt';\n    }\n    \n    @computed get routeParams() {\n        let params = {};\n        let keys = [\n            'programId',\n            'frequency',\n            'levels',\n            'tiers',\n            'sites',\n            'types',\n            'indicators'];\n        keys.forEach((k) => {\n            if (this[k] !== null)\n                {\n                    params[k] = this.parseToArrayParams(this[k]);\n                }\n            });\n        if (this.startPeriod !== null) {\n            params.start = String(this.startPeriod);\n        }\n        if (this.endPeriod !== null) {\n            params.end = String(this.endPeriod);\n        }\n        if (this.groupBy !== null) {\n            params.groupby = String(this.groupBy);\n        }\n        return params;\n    }\n    \n    @computed get dataUrl() {\n        return this.router.buildUrl('ipttAPI.ipttData', this.routeParams);\n    }\n    \n    @computed get excelUrl() {\n        return this.router.buildUrl('ipttAPI.ipttExcel',\n                                     {...this.routeParams,\n                                     reportType: this.reportType,\n                                     fullTVA: false});\n    }\n\n    \n    @computed get fullExcelUrl() {\n        return this.router.buildUrl('ipttAPI.ipttExcel', {\n                                        programId: this.programId,\n                                        fullTVA: true\n                                    });\n    }\n\n}","/**\n * entry point for the iptt_report webpack bundle\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport ipttRouter from './router';\n\n\nconst routeStore = new ipttRouter();\nrouteStore.init();\n\n\nimport { inject, observer } from 'mobx-react';\n@inject('routeStore')\n@observer\nclass FilterTest extends React.Component {\n    onclick = () => {\n        this.props.routeStore.programId = (this.props.routeStore.programId == 400) ? 350 : 400;\n    }\n    onclicka = () => {\n        this.props.routeStore.reportType = (this.props.routeStore.reportType == 2) ? 1 : 2;\n    }\n    render = () => {\n        return (<React.Fragment>\n            <div>Hello route = {this.props.routeStore.levels}</div>\n            <button onClick={this.onclick}>hiya</button>\n            <button onClick={this.onclicka}>hiya</button>\n        </React.Fragment>);\n    }\n}\n\nReactDOM.render(\n    <Provider routeStore={ routeStore }>\n        <FilterTest />\n    </Provider>,\n    document.querySelector('#id_div_content')\n);\n//import createRouter from 'router5';\n//import browserPlugin from 'router5-plugin-browser';\n//import { Provider } from 'mobx-react';\n//import { RootStore, ReportAPI } from './models';\n//import { IPTTReportApp } from './components/main';\n\n//testing:\n//import { contextFixture, reportData } from './fixtures';\n\n\n//const labels = jsContext.labels;\n//const reportAPI = new ReportAPI(jsContext.api_url);\n//const rootStore = new RootStore(jsContext, reportAPI);\n\n//const routes = [\n//    {name: 'iptt', path: '/:programId<\\\\d+>/:reportType/?frequency&timeperiods&targetperiods&timeframe&numrecenteperiods&start&end&start_period&end_period&levels&sites&types&sectors&indicators&tiers&groupby'}\n//];\n//\n//const router = createRouter(routes);\n//\n//router.usePlugin(browserPlugin({useHash: false, base: '/indicators/iptt_report'}));\n//router.subscribe(rootStore.updateRoute);\n//router.start();\n\n//rootStore.init(router);\n\n\n//ReactDOM.render(<Provider rootStore={ rootStore }\n//                          labels={ labels } >\n//                    <IPTTReportApp />    \n//                </Provider>,\n//                document.querySelector('#id_div_content'));","\n/**\n * IPTT Constants:\n */\nconst BLANK_LABEL = '---------';\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\nexport { BLANK_LABEL, TVA, TIMEPERIODS };\n\nconst GROUP_BY_CHAIN = 1;\nconst GROUP_BY_LEVEL = 2;\n\nexport { GROUP_BY_CHAIN, GROUP_BY_LEVEL };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAzCA;AA4CA;;;AAaA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAuCA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AANA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAEA;AACA;AA1DA;AA6DA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAlEA;AAqFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AA/HA;AAiIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAIA;AACA;AAhJA;AAkJA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAOA;AACA;AAvKA;AAyKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AApLA;AAsLA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5LA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AARA;AAeA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AARA;AAeA;AAEA;AACA;AACA;AACA;AACA;;;AAyJA;AACA;AAKA;;;AAEA;AAAA;AACA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AAHA;AAIA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;;;;AA/PA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AAgMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/PA;;;AAIA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;;;;;AAdA;AAgBA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AACA;AACA;AAEA;AAEA;AACA;;;;;A","sourceRoot":""}