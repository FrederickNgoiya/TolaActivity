{"version":3,"file":"program_page-10e8daadf6031fc9dbe3.js","sources":["webpack:///./js/pages/program_page/pinned_reports.js","webpack:///./js/pages/program_page/components/indicator_list.js","webpack:///./js/date_utils.js","webpack:///./js/pages/program_page/models.js","webpack:///./js/pages/program_page/index.js","webpack:///./js/components/indicatorModalComponents.js","webpack:///./js/eventbus.js","webpack:///./js/pages/program_page/components/program_metrics.js"],"sourcesContent":["\n// On pinned report delete btn click\n$('[data-delete-pinned-report]').click(function (e) {\n    e.preventDefault();\n\n    let prId = $(this).data('deletePinnedReport');\n    let pinnedReport = $(this).closest('.pinned-report');\n\n    if (window.confirm(gettext('Warning: This action cannot be undone. Are you sure you want to delete this pinned report?'))) {\n        $.ajax({\n            type: \"POST\",\n            url: jsContext.delete_pinned_report_url,\n            data: {\n                pinned_report_id: prId,\n            },\n            success: function () {\n                pinnedReport.remove();\n            }\n        });\n    }\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer } from \"mobx-react\"\nimport eventBus from '../../../eventbus';\nimport { AddIndicatorButton } from '../../../components/indicatorModalComponents';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport {IndicatorFilterType} from \"../models\";\nimport Select from 'react-select';\n\n\nlibrary.add(faCaretDown, faCaretRight);\n\n\nfunction getStatusIndicatorString(filterType, indicatorCount) {\n    let fmts;\n    switch (filterType) {\n        case IndicatorFilterType.missingTarget:\n            // # Translators: The number of indicators that do not have targets defined on them\n            fmts = ngettext(\"%s indicator has missing targets\", \"%s indicators have missing targets\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.missingResults:\n            // # Translators: The number of indicators that no one has entered in any results for\n            fmts = ngettext(\"%s indicator has missing results\", \"%s indicators have missing results\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.missingEvidence:\n            // # Translators: The number of indicators that contain results that are not backed up with evidence\n            fmts = ngettext(\"%s indicator has missing evidence\", \"%s indicators have missing evidence\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.aboveTarget:\n            // # Translators: shows what number of indicators are a certain percentage above target. Example: 3 indicators are >15% above target\n            fmts = ngettext(\"%s indicator is >15% above target\", \"%s indicators are >15% above target\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.belowTarget:\n            // # Translators: shows what number of indicators are a certain percentage below target. Example: 3 indicators are >15% below target\n            fmts = ngettext(\"%s indicator is >15% below target\", \"%s indicators are >15% below target\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.onTarget:\n            // # Translators: shows what number of indicators are within a set range of target. Example: 3 indicators are on track\n            fmts = ngettext(\"%s indicator is on track\", \"%s indicators are on track\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n\n        default:\n            // # Translators: the number of indicators in a list. Example: 3 indicators\n            fmts = ngettext(\"%s indicator\", \"%s indicators\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n    }\n}\n\n\n\n@observer\nclass StatusHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onShowAllClick = (e) => {\n            e.preventDefault();\n            eventBus.emit('nav-clear-all-indicator-filters');\n        };\n    }\n\n    render() {\n        const {\n            indicatorCount,\n            programId,\n            currentIndicatorFilter,\n            filterApplied,\n            readonly,\n        } = this.props;\n\n        return <div className=\"indicators-list__header\">\n            <h3 className=\"no-bold\">\n                <span id=\"indicators-list-title\">{getStatusIndicatorString(currentIndicatorFilter, indicatorCount)} </span>\n\n                {filterApplied &&\n                <a href=\"#\" id=\"show-all-indicators\" onClick={this.onShowAllClick}>\n                    <small>{gettext('Show all')}</small>\n                </a>\n                }\n            </h3>\n            <div>\n                <AddIndicatorButton readonly={readonly} programId={programId} />\n            </div>\n        </div>\n    }\n}\n\n\n@observer\nclass IndicatorFilter extends React.Component{\n    onSelection = (selectedObject) => {\n        let selectedIndicatorId = selectedObject ? selectedObject.value : null;\n\n        if (selectedIndicatorId) {\n            eventBus.emit('nav-select-indicator-to-filter', selectedIndicatorId);\n        }\n    };\n\n    onGroupingSelection = (selected) => {\n        this.props.uiStore.setGroupBy(selected.value);\n    }\n\n    render() {\n        const indicators = this.props.rootStore.indicatorStore.indicators;\n        const selectedIndicatorId = this.props.uiStore.selectedIndicatorId;\n\n        const indicatorSelectOptions = indicators.map(i => {\n            return {\n                value: i.id,\n                label: i.name,\n            }\n        });\n\n        let selectedValue = null;\n        if (selectedIndicatorId) {\n            selectedValue = indicatorSelectOptions.find(i => i.value === selectedIndicatorId);\n        }\n\n        const indicatorGroupingOptions = this.props.uiStore.groupByOptions;\n        const groupingValue = this.props.uiStore.selectedGroupByOption;\n        return <nav className=\"list__filters list__filters--block-label\" id=\"id_div_indicators\">\n            <div className=\"form-group\">\n                <label className=\"\">\n                    {gettext(\"Find an indicator:\")}\n                </label>\n                <div className=\"\">\n                    <Select\n                        options={indicatorSelectOptions}\n                        value={selectedValue}\n                        isClearable={false}\n                        placeholder={gettext('None')}\n                        onChange={this.onSelection}\n                    />\n                </div>\n            </div>\n            {!this.props.rootStore.oldStyleLevels &&\n            <React.Fragment>\n                <div className=\"form-group\">\n                    <label className=\"\">\n                        {gettext(\"Group indicators:\")}\n                    </label>\n                    <div className=\"\">\n                        <Select\n                               options={indicatorGroupingOptions}\n                               value={groupingValue}\n                               isClearable={false}\n                               onChange={this.onGroupingSelection}\n                        />\n                    </div>\n                </div>\n            </React.Fragment>}\n        </nav>;\n    }\n}\n\n\n@observer\nclass IndicatorListTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onIndicatorUpdateClick = this.onIndicatorUpdateClick.bind(this);\n        this.onIndicatorResultsToggleClick = this.onIndicatorResultsToggleClick.bind(this);\n    }\n\n    onIndicatorUpdateClick(e, indicatorId) {\n        e.preventDefault();\n\n        eventBus.emit('open-indicator-update-modal', indicatorId);\n    }\n\n    onIndicatorResultsToggleClick(e, indicatorId) {\n        e.preventDefault();\n\n        const resultsMap = this.props.resultsMap;\n\n        if (resultsMap.has(indicatorId)) {\n            eventBus.emit('delete-indicator-results', indicatorId);\n        } else {\n            eventBus.emit('load-indicator-results', indicatorId);\n        }\n    }\n\n    render() {\n        const indicators = this.props.indicators;\n        const program = this.props.program;\n        const programReportingPeriodEndDate = new Date(program.reporting_period_end);\n        const resultsMap = this.props.resultsMap;\n\n        return <table className=\"table indicators-list\">\n            <thead>\n            <tr className=\"table-header\">\n                <th className=\"\" id=\"id_indicator_name_col_header\">{gettext(\"Indicator\")}</th>\n                <th className=\"\" id=\"id_indicator_buttons_col_header\">&nbsp;</th>\n                {this.props.oldStyleLevels && <th className=\"\" id=\"id_indicator_level_col_header\">{gettext(\"Level\")}</th>}\n                <th className=\"\" id=\"id_indicator_unit_col_header\">{gettext(\"Unit of measure\")}</th>\n                <th className=\"text-right\" id=\"id_indicator_baseline_col_header\">{gettext(\"Baseline\")}</th>\n                <th className=\"text-right\" id=\"id_indicator_target_col_header\">{gettext(\"Target\")}</th>\n            </tr>\n            </thead>\n\n            <tbody>\n            {indicators.map(indicator => {\n                const resultsExist = resultsMap.has(indicator.id);\n                const resultsStr = resultsMap.get(indicator.id);\n                const targetPeriodLastEndDate = indicator.target_period_last_end_date ? new Date(indicator.target_period_last_end_date) : null;\n                // ^^^ Because calling Date() on null returns the current date, and we actually need null!\n                const displayFunc = (parseInt(indicator.unit_of_measure_type) == 2) ?\n                        (val) => val ? `${val}%` : '' :\n                        (val) => val ? `${val}` : '';\n                const numberCellFunc = (val) => {\n                    if (val == '' || isNaN(parseFloat(val))) {\n                        return '';\n                    }\n                    val = parseFloat(val).toFixed(2);\n                    if (val.slice(-2) == \"00\") {\n                        return displayFunc(val.slice(0, -3));\n                    } else if (val.slice(-1) == \"0\") {\n                        return displayFunc(val.slice(0, -1));\n                    }\n                    return displayFunc(val);\n                }\n                return <React.Fragment key={indicator.id}>\n                    <tr className={classNames(\"indicators-list__row\", \"indicators-list__indicator-header\", {\n                        \"is-highlighted\": indicator.just_created,\n                        \"is-expanded\": resultsExist\n                    })}>\n                        <td>\n                            <a href=\"#\"\n                               className=\"indicator_results_toggle btn btn-link text-left\"\n                               onClick={(e) => this.onIndicatorResultsToggleClick(e, indicator.id)}\n                            >\n                                <FontAwesomeIcon icon={resultsExist ? 'caret-down' : 'caret-right'} />\n                                <strong>\n                                    { indicator.number_if_numbering || indicator.number_display ?\n                                            indicator.number_display + ':' : ''  }\n                                </strong>&nbsp;\n                                <span className=\"indicator_name\">{ indicator.name }</span>\n                            </a>\n\n                            {indicator.key_performance_indicator &&\n                            <span className=\"badge\">KPI</span>\n                            }\n\n                            {targetPeriodLastEndDate && programReportingPeriodEndDate > targetPeriodLastEndDate &&\n                            <a href={`/indicators/indicator_update/${indicator.id}/`}\n                               className=\"indicator-link color-red missing_targets\"\n                               data-toggle=\"modal\" data-target=\"#indicator_modal_div\"\n                               data-tab=\"targets\">\n                                <i className=\"fas fa-bullseye\"/> Missing targets\n                            </a>\n                            }\n                        </td>\n                        <td>\n                            <a href=\"#\" className=\"indicator-link\"\n                               onClick={(e) => this.onIndicatorUpdateClick(e, indicator.id)}><i\n                                className=\"fas fa-cog\"/></a>\n                        </td>\n                        { this.props.oldStyleLevels && <td>{ indicator.old_level }</td> }\n                        <td>{indicator.unit_of_measure}</td>\n                        <td className=\"text-right\">{ indicator.baseline_na ? gettext('N/A') : numberCellFunc(indicator.baseline) }</td>\n                        <td className=\"text-right\">{ numberCellFunc(indicator.lop_target_active) }</td>\n                    </tr>\n\n                    {resultsExist &&\n                    <tr className=\"indicators-list__row indicators-list__indicator-body\">\n                        <td colSpan=\"6\" ref={el => $(el).find('[data-toggle=\"popover\"]').popover({html:true})}>\n                            {/* result_table.html container */}\n                                <div dangerouslySetInnerHTML={{__html: resultsStr}} />\n                        </td>\n                    </tr>\n                    }\n                </React.Fragment>\n\n            })}\n            </tbody>\n        </table>\n    }\n}\n\n\nexport const IndicatorList = observer(function (props) {\n    const program = props.rootStore.program;\n    const indicatorStore = props.rootStore.indicatorStore;\n    // const indicators = props.rootStore.indicatorStore.indicators;\n    const resultsMap = props.rootStore.resultsMap;\n    const currentIndicatorFilter = props.uiStore.currentIndicatorFilter;\n    const selectedIndicatorId = props.uiStore.selectedIndicatorId;\n    const sortByChain = props.uiStore.groupByChain;\n    // Either a gas gauge filter is applied, or an indicator has been selected, but not both\n\n    // apply gas gauge filter\n    let filteredIndicators = indicatorStore.filterIndicators(currentIndicatorFilter);\n\n    filteredIndicators = indicatorStore.sortIndicators(\n        props.rootStore.oldStyleLevels, sortByChain, filteredIndicators);\n\n    if (selectedIndicatorId) {\n        filteredIndicators = filteredIndicators.filter((i) => i.id == selectedIndicatorId);\n    }\n\n    return <React.Fragment>\n        <StatusHeader indicatorCount={filteredIndicators.length}\n                      programId={program.id}\n                      currentIndicatorFilter={currentIndicatorFilter}\n                      filterApplied={currentIndicatorFilter || selectedIndicatorId}\n                      readonly={props.readonly}/>\n\n        <IndicatorFilter uiStore={props.uiStore} rootStore={props.rootStore} />\n\n        {program.does_it_need_additional_target_periods &&\n            <div id=\"id_missing_targets_msg\" className=\"color-red\">\n                <i className=\"fas fa-bullseye\"/>&nbsp;\n                {gettext('Some indicators have missing targets. To enter these values, click the target icon near the indicator name.')}\n            </div>\n        }\n\n        <IndicatorListTable indicators={filteredIndicators} resultsMap={resultsMap}\n                            program={program} oldStyleLevels={ props.rootStore.oldStyleLevels } />\n    </React.Fragment>\n});\n","/*\n  Some nice helper functions to help with date parsing and localization\n\n  In the future it may make sense to use moment.js, luxon, or date-fns,\n  but for now, just get by with the native browser APIs and save some bytes.\n\n  Confusingly, native Date() objects are actually date/time objects.\n\n  Surprisingly, the Django i18n/l10n JS tools do not provide access to the language code\n  of the current language in use.\n */\n\nconst languageCode = window.userLang; // set in base.html by Django\n\nconst n = \"numeric\",\n    s = \"short\",\n    l = \"long\",\n    d2 = \"2-digit\";\n\n\nconst DATE_MED = {\n    year: n,\n    month: s,\n    day: n\n};\n\n\n// Returns native Date()\nexport function dateFromISOString(isoDateStr) {\n    return new Date(isoDateStr);  // modern browsers can just parse it\n}\n\n// \"2017-01-01\" -> Date with local timezone (not UTC)\n// also lives in base.js (localDateFromISOStr)\nexport function localDateFromISOString(dateStr) {\n    let dateInts = dateStr.split('-').map(function(x) {return parseInt(x)});\n    return new Date(dateInts[0], dateInts[1]-1, dateInts[2]);\n}\n\n\n// Date() -> \"Oct 2, 2018\" (localized)\n// JS equiv of the Django template filter:   |date:\"MEDIUM_DATE_FORMAT\"\nexport function mediumDateFormatStr(date) {\n    return new Intl.DateTimeFormat(languageCode, DATE_MED).format(date);\n}\n","import { observable, computed, action } from \"mobx\";\n\n// Types of filters available on the program page\nexport const IndicatorFilterType = Object.freeze({\n    noFilter: 0,\n    missingTarget: 1,\n    missingResults: 2,\n    missingEvidence: 3,\n\n    aboveTarget: 5,\n    belowTarget: 6,\n    onTarget: 7,\n});\n\n\nexport class IndicatorStore {\n    @observable indicators = [];\n\n    constructor(indicators) {\n        this.indicators = indicators;\n\n        this.updateIndicator = this.updateIndicator.bind(this);\n        this.removeIndicator = this.removeIndicator.bind(this);\n        this.filterIndicators = this.filterIndicators.bind(this);\n    }\n\n    @action\n    updateIndicator(indicator) {\n        let i = this.indicators.findIndex(e => e.id === indicator.id);\n        if (i > -1) {\n            this.indicators[i] = indicator;\n        } else {\n            this.indicators.push(indicator);\n        }\n    }\n\n    @action\n    removeIndicator(indicatorId) {\n        this.indicators = this.indicators.filter(e => e.id != indicatorId);\n    }\n\n    @computed\n    get getIndicatorsNeedingTargets() {\n        return this.indicators.filter(i => i.all_targets_defined === 0);\n    }\n\n    @computed\n    get getIndicatorsNeedingResults() {\n        return this.indicators.filter(i => i.results_count === 0);\n    }\n\n    @computed\n    get getIndicatorsNeedingEvidence() {\n        return this.indicators.filter(i => i.results_count !== i.results_with_evidence_count);\n    }\n\n    @computed\n    get getIndicatorsNotReporting() {\n        return this.indicators.filter(i => i.over_under === null);\n    }\n\n    @computed\n    get getIndicatorsAboveTarget() {\n        return this.indicators.filter(i => i.over_under > 0);\n    }\n\n    @computed\n    get getIndicatorsBelowTarget() {\n        return this.indicators.filter(i => i.over_under < 0);\n    }\n\n    @computed\n    get getIndicatorsOnTarget() {\n        return this.indicators.filter(i => i.over_under === 0);\n    }\n\n    @computed\n    get getIndicatorsReporting() {\n        return this.indicators.filter(i => i.reporting === true);\n    }\n    \n    sortIndicators(oldStyleLevels, sortByChain, indicators) {\n        if (oldStyleLevels) {\n            return indicators;\n        } else if (!sortByChain) {\n            return indicators.slice().sort(\n                (a, b) => {\n                    if (a.level && a.level.level_depth) {\n                        if (b.level && b.level.level_depth) {\n                            if (a.level.level_depth === b.level.level_depth) {\n                                let a_ontology = a.level.ontology.split('.');\n                                let b_ontology = b.level.ontology.split('.');\n                                for (let i=0; i < a_ontology.length; i++) {\n                                    if (a_ontology[i] != b_ontology[i]) {\n                                        return a_ontology[i] - b_ontology[i]\n                                    }\n                                }\n                                return (a.level_order || 0) - (b.level_order || 0);\n                            }\n                            return a.level.level_depth - b.level.level_depth;\n                        }\n                        return -1;\n                    }\n                    return (b.level && b.level.level_depth) ? 1 : 0;\n                }\n            );\n        } else {\n            return indicators.slice().sort(\n                (a, b) => {\n                    if (a.level && a.level.ontology) {\n                        if (b.level && b.level.ontology) {\n                            let a_ontology = a.level.ontology.split('.');\n                            let b_ontology = b.level.ontology.split('.');\n                            for (let i=0; i < a_ontology.length; i++) {\n                                if (a_ontology[i] != b_ontology[i]) {\n                                    return a_ontology[i] - b_ontology[i]\n                                }\n                            }\n                            return 0;\n                        }\n                        return -1;\n                    }\n                    return (b.level && b.level.ontology) ? 1 : 0;\n                }\n            );\n        }\n    }\n\n    filterIndicators(filterType) {\n        let indicators;\n\n        switch (filterType) {\n            case IndicatorFilterType.missingTarget:\n                indicators = this.getIndicatorsNeedingTargets;\n                break;\n            case IndicatorFilterType.missingResults:\n                indicators = this.getIndicatorsNeedingResults;\n                break;\n            case IndicatorFilterType.missingEvidence:\n                indicators = this.getIndicatorsNeedingEvidence;\n                break;\n            case IndicatorFilterType.aboveTarget:\n                indicators = this.getIndicatorsAboveTarget;\n                break;\n            case IndicatorFilterType.belowTarget:\n                indicators = this.getIndicatorsBelowTarget;\n                break;\n            case IndicatorFilterType.onTarget:\n                indicators = this.getIndicatorsOnTarget;\n                break;\n            case IndicatorFilterType.noFilter:\n            default:\n                indicators = this.indicators;\n        }\n\n        return indicators\n    }\n\n    @computed\n    get getTotalResultsCount() {\n        return this.indicators.reduce((acc, i) => acc + i.results_count, 0);\n    }\n\n    @computed\n    get getTotalResultsWithEvidenceCount() {\n        return this.indicators.reduce((acc, i) => acc + i.results_with_evidence_count, 0);\n    }\n}\n\nexport class ProgramPageStore {\n    indicatorStore;\n    @observable program = {};\n    @observable resultsMap = new Map(); // indicator id -> results HTML str\n\n    constructor(indicators, program) {\n        this.indicatorStore = new IndicatorStore(indicators);\n        this.program = program;\n        this.addResultsHTML = this.addResultsHTML.bind(this);\n        this.deleteResultsHTML = this.deleteResultsHTML.bind(this);\n    }\n\n    @action\n    addResultsHTML(indicatorId, htmlStr) {\n        this.resultsMap.set(parseInt(indicatorId), htmlStr);\n    }\n\n    @action\n    deleteResultsHTML(indicatorId) {\n        this.resultsMap.delete(indicatorId);\n    }\n\n    @action\n    deleteAllResultsHTML() {\n        this.resultsMap.clear();\n    }\n    \n    @computed\n    get oldStyleLevels() {\n        return !this.program.results_framework;\n    }\n\n}\n\nexport class ProgramPageUIStore {\n    @observable currentIndicatorFilter;  // selected gas gauge filter\n    @observable selectedIndicatorId; // indicators filter\n    @observable groupByChain = true;\n\n    constructor(resultChainFilterLabel) {\n        this.resultChainFilterLabel = resultChainFilterLabel;\n        this.setIndicatorFilter = this.setIndicatorFilter.bind(this);\n        this.clearIndicatorFilter = this.clearIndicatorFilter.bind(this);\n        this.setSelectedIndicatorId = this.setSelectedIndicatorId.bind(this);\n    }\n\n    @action\n    setIndicatorFilter(indicatorFilter) {\n        this.currentIndicatorFilter = indicatorFilter;\n    }\n\n    @action\n    clearIndicatorFilter() {\n        this.currentIndicatorFilter = null;\n    }\n\n    @action\n    setSelectedIndicatorId(selectedIndicatorId) {\n        this.selectedIndicatorId = selectedIndicatorId;\n    }\n    \n    @computed\n    get groupByOptions() {\n        return [\n            {\n                value: 1,\n                label: this.resultChainFilterLabel\n            },\n            {\n                value: 2,\n                label: gettext('by Level')\n            }\n        ];\n    }\n    \n    @computed\n    get selectedGroupByOption() {\n        return this.groupByChain ? this.groupByOptions[0] : this.groupByOptions[1];\n    }\n    \n    @action\n    setGroupBy(value) {\n        this.groupByChain = value == 1;\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport eventBus from '../../eventbus';\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\n\nimport {IndicatorList} from './components/indicator_list';\nimport {ProgramMetrics} from './components/program_metrics';\nimport {ProgramPageStore, ProgramPageUIStore, IndicatorFilterType} from './models';\n\nimport './pinned_reports';\n\n\n/*\n * Model/Store setup\n */\nconst rootStore = new ProgramPageStore(jsContext.indicators, jsContext.program);\nconst uiStore = new ProgramPageUIStore(jsContext.result_chain_filter);\n\n\n/*\n * Event Handlers\n */\n\n// open indicator update modal with form loaded from server\neventBus.on('open-indicator-update-modal', (indicatorId) => {\n    // Note: depends on indicator_list_modals.html\n\n    let url = `/indicators/indicator_update/${indicatorId}/`;\n\n    $(\"#indicator_modal_content\").empty();\n    $(\"#modalmessages\").empty();\n\n    $(\"#indicator_modal_content\").load(url);\n    $(\"#indicator_modal_div\").modal('show');\n});\n\n// get results html blob for indicator\neventBus.on('load-indicator-results', (indicatorId) => {\n    if (!indicatorId) return;\n\n    let url = `/indicators/result_table/${indicatorId}/${rootStore.program.id}/`;\n\n    $.get(url, function (data) {\n        rootStore.addResultsHTML(indicatorId, data);\n    });\n});\n\n// delete (hide) results html blob for indicator\neventBus.on('delete-indicator-results', (indicatorId) => {\n    rootStore.deleteResultsHTML(indicatorId);\n});\n\n// reload singular indicator json obj\neventBus.on('reload-indicator', indicatorId => {\n    $.get(`/indicators/api/indicator/${indicatorId}`, rootStore.indicatorStore.updateIndicator);\n});\n\n// remove an indicator from the list\neventBus.on('indicator-deleted', rootStore.indicatorStore.removeIndicator);\n\n// close all expanded indicators in the table\neventBus.on('close-all-indicators', () => {\n    rootStore.deleteAllResultsHTML();\n});\n\n// Indicator filters are controlled through routes\n// these should no longer be called directly from components\n\n// apply a gas gauge filter. Takes in IndicatorFilterType enum value\neventBus.on('apply-gauge-tank-filter', indicatorFilter => {\n    // reset all filters\n    eventBus.emit('clear-all-indicator-filters');\n\n    uiStore.setIndicatorFilter(indicatorFilter);\n});\n\n// clear all gas tank and indicator select filters\neventBus.on('clear-all-indicator-filters', () => {\n    uiStore.clearIndicatorFilter();\n    eventBus.emit('select-indicator-to-filter', null);\n    eventBus.emit('close-all-indicators');\n});\n\n// filter down by selecting individual indicator\neventBus.on('select-indicator-to-filter', (selectedIndicatorId) => {\n    // clear gauge tank filters\n    uiStore.clearIndicatorFilter();\n\n    uiStore.setSelectedIndicatorId(selectedIndicatorId);\n\n    // Open up results pane as well\n    eventBus.emit('load-indicator-results', selectedIndicatorId);\n});\n\n\n/*\n * React components on page\n */\n\nReactDOM.render(<IndicatorList rootStore={rootStore} uiStore={uiStore} readonly={jsContext.readonly} />,\n    document.querySelector('#indicator-list-react-component'));\n\nReactDOM.render(<ProgramMetrics rootStore={rootStore}\n                                uiStore={uiStore}\n                                indicatorOnScopeMargin={jsContext.indicator_on_scope_margin} />,\n    document.querySelector('#program-metrics-react-component'));\n\n\n/*\n * Copied and modified JS from indicator_list_modals.js to allow modals to work\n * without being completely converted to React\n */\n\n// Open the CollectDataUpdate (update results) form in a modal\n$(\"#indicator-list-react-component\").on(\"click\", \".results__link\", function(e) {\n    e.preventDefault();\n    let url = $(this).attr(\"href\");\n    url += \"?modal=1\";\n    $(\"#indicator_modal_content\").empty();\n    $(\"#modalmessages\").empty();\n\n    $(\"#indicator_results_modal_content\").load(url);\n    $(\"#indicator_results_div\").modal('show');\n});\n\n// Open the IndicatorUpdate (Add targets btn in results section (HTML)) Form in a modal\n$(\"#indicator-list-react-component\").on(\"click\", \".indicator-link[data-tab]\", function(e) {\n    e.preventDefault();\n    let url = $(this).attr(\"href\");\n    url += \"?modal=1\";\n    let tab = $(this).data(\"tab\");\n    if (tab && tab != '' && tab != undefined && tab != 'undefined') {\n        url += \"&targetsactive=true\";\n    }\n    $(\"#indicator_modal_content\").empty();\n    $(\"#modalmessages\").empty();\n\n    $(\"#indicator_modal_content\").load(url);\n    $(\"#indicator_modal_div\").modal('show');\n\n});\n\n// when indicator creation modal form completes a save\n$('#indicator_modal_div').on('created.tola.indicator.save', (e, params) => {\n    eventBus.emit('reload-indicator', params.indicatorId);\n});\n\n// when indicator update modal form completes a save or change to periodic targets\n$('#indicator_modal_div').on('updated.tola.indicator.save', (e, params) => {\n    let indicatorId = params.indicatorId;\n\n    eventBus.emit('reload-indicator', indicatorId);\n\n    if (rootStore.resultsMap.has(indicatorId)) {\n        eventBus.emit('load-indicator-results', indicatorId);\n    }\n});\n\n// when indicator is deleted from modal\n$('#indicator_modal_div').on('deleted.tola.indicator.save', (e, params) => {\n    eventBus.emit('indicator-deleted', params.indicatorId);\n});\n\n// When \"add results\" modal is closed, the targets data needs refreshing\n// the indicator itself also needs refreshing for the gas tank gauge\n$('#indicator_results_div').on('hidden.bs.modal', function (e) {\n    let recordchanged = $(this).find('form').data('recordchanged');\n    if (recordchanged === true) {\n        let indicator_id = $(this).find('form #id_indicator').val();\n        eventBus.emit('load-indicator-results', indicator_id);\n        eventBus.emit('reload-indicator', indicator_id);\n    }\n});\n\n\n/*\n * Routes setup:\n */\n\nconst routes = [\n    { name: 'all', path: '/', filterType: IndicatorFilterType.noFilter },\n    { name: 'targets', path: '/targets', filterType: IndicatorFilterType.missingTarget },\n    { name: 'results', path: '/results', filterType: IndicatorFilterType.missingResults },\n    { name: 'evidence', path: '/evidence', filterType: IndicatorFilterType.missingEvidence },\n    { name: 'scope', path: '/scope', forwardTo: 'scope.on' },\n    { name: 'scope.on', path: '/on', filterType: IndicatorFilterType.onTarget },\n    { name: 'scope.above', path: '/above', filterType: IndicatorFilterType.aboveTarget },\n    { name: 'scope.below', path: '/below', filterType: IndicatorFilterType.belowTarget },\n    { name: 'indicator', path: '/indicator/:indicator_id<\\\\d+>', filterType: IndicatorFilterType.noFilter }\n];\n\nconst router = createRouter(routes, {\n    defaultRoute: 'all', //unrouted: show all indicators\n    defaultParams: {},\n    trailingSlashMode: 'always'\n});\n\nconst onNavigation = (navRoutes) => {\n    let routeName = navRoutes.route.name;\n    let params = navRoutes.route.params;\n\n    if (routeName === 'indicator') {\n        eventBus.emit('select-indicator-to-filter', parseInt(params.indicator_id));\n        return;\n    }\n\n    let routeObj = routes.find(r => r.name === routeName);\n    eventBus.emit('apply-gauge-tank-filter', routeObj.filterType);\n};\nrouter.usePlugin(browserPlugin({useHash: true, base:'/program/'+jsContext.program.id+'/'}));\nrouter.subscribe(onNavigation);\nrouter.start();\n\n\n// nav events\n\neventBus.on('nav-apply-gauge-tank-filter', indicatorFilter => {\n    // Find route based on filter type and go\n    let routeObj = routes.find(r => r.filterType === indicatorFilter);\n    router.navigate(routeObj.name);\n});\n\neventBus.on('nav-clear-all-indicator-filters', () => {\n    router.navigate('all')\n});\n\neventBus.on('nav-select-indicator-to-filter', (selectedIndicatorId) => {\n    router.navigate('indicator', {'indicator_id': selectedIndicatorId})\n});\n\n\n/*\n * Are we loading a cached page? If so, reload to avoid displaying stale indicator data\n * See ticket #1423\n */\n// moving the cache check to after page load as firefox calculates transfer size at the end\n$(function() {\n    let isCached = window.performance.getEntriesByType(\"navigation\")[0].transferSize === 0;\n    //adding a second check to ensure that if for whatever reason teh transfersize reads wrong, we don't reload on\n    //a reload:\n    let isReload = window.performance.getEntriesByType(\"navigation\")[0].type === \"reload\";\n    if (isCached && !isReload) {        \n        window.location.reload();\n    }\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nexport const AddIndicatorButton = observer(({ readonly, ...params }) => {\n    return (\n            <button disabled={readonly} className=\"btn btn-link btn-add\" onClick={e => openCreateIndicatorFormModal(params)}>\n                <i className=\"fas fa-plus-circle\"/> {gettext(\"Add indicator\")}\n            </button>\n    );\n});\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer } from \"mobx-react\"\nimport eventBus from '../../../eventbus';\nimport {IndicatorFilterType} from \"../models\";\nimport {localDateFromISOString} from \"../../../date_utils\";\n\n\n@observer\nclass GaugeTank extends React.Component {\n\n    handleClick = (e) => {\n        e.preventDefault();\n        if (! this.props.disabled && this.unfilledPercent != 0) {\n            eventBus.emit('nav-apply-gauge-tank-filter', this.props.filterType);\n        }\n    };\n\n    render() {\n        const tickCount = 10;\n\n        const {allIndicatorsLength, filteredIndicatorsLength, title, filledLabel, unfilledLabel, cta, emptyLabel, disabled} = this.props;\n\n        const filterType = this.props.filterType;\n        const currentIndicatorFilter = this.props.currentIndicatorFilter;\n\n        const isHighlighted = filterType === currentIndicatorFilter;\n\n        // Gauge should only show 100%/0% if filtered == all/0 (absolute 100%, not rounding to 100%)\n        // to accomplish this, added a Math.max and Math.min to prevent rounding to absolute values:\n        const unfilledPercent = (allIndicatorsLength <= 0 || allIndicatorsLength == filteredIndicatorsLength) ? 100 :\n            (filteredIndicatorsLength == 0 ? 0 :\n                Math.max(1, Math.min(Math.round((filteredIndicatorsLength / allIndicatorsLength) * 100), 99)));\n        this.unfilledPercent = unfilledPercent;\n        const filledPercent = 100 - unfilledPercent;\n\n        return <div className={classNames('gauge', {'filter-trigger': unfilledPercent > 0 && !disabled, 'is-highlighted': isHighlighted})}\n                    onClick={this.handleClick} >\n            <h6 className=\"gauge__title\">{title}</h6>\n            <div className=\"gauge__overview\">\n                <div\n                    className=\"gauge__graphic gauge__graphic--tank{% if filled_percent == 0 %} gauge__graphic--empty{% endif %}\">\n                    <div className=\"graphic__tick-marks\">\n                        {[...Array(tickCount)].map((e, i) => <div key={i} className=\"graphic__tick\"/>)}\n                    </div>\n                    <div className=\"graphic__tank--unfilled\" style={{'flexBasis': `${unfilledPercent}%`}}/>\n                    <div className=\"graphic__tank--filled\" style={{'flexBasis': `${filledPercent}%`}}/>\n                </div>\n                <div className=\"gauge__labels\">\n                    {filledPercent > 0 ?\n\n                        <React.Fragment>\n                            <div className=\"gauge__label text-muted\">\n                                {unfilledPercent}% {unfilledLabel}\n                            </div>\n                            <div className=\"gauge__label\">\n                                <span className=\"gauge__value\">{filledPercent}% {filledLabel}</span>\n                            </div>\n                        </React.Fragment>\n\n                        :\n\n                        <div className=\"gauge__label\">\n                            <span className=\"text-danger\"><strong>{emptyLabel}</strong></span>\n                        </div>\n                    }\n                </div>\n            </div>\n            { unfilledPercent > 0 && !disabled &&\n            <div className=\"gauge__cta\">\n                <span className=\"btn-link btn-inline\"><i className=\"fas fa-exclamation-triangle text-warning\"/> {cta}</span>\n                &nbsp;\n            </div>\n            }\n        </div>;\n    }\n}\n\n\n@observer\nclass GaugeBand extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handledFilterTypes = new Set([\n            IndicatorFilterType.aboveTarget,\n            IndicatorFilterType.belowTarget,\n            IndicatorFilterType.onTarget,\n        ]);\n    }\n\n    onFilterLinkClick = (e, filterType) => {\n        e.preventDefault();\n        eventBus.emit('nav-apply-gauge-tank-filter', filterType);\n    };\n\n    componentDidUpdate() {\n        // Enable popovers after update (they break otherwise)\n        $(this.el).find('[data-toggle=\"popover\"]').popover({\n            html: true\n        });\n    }\n\n\n    render() {\n        const tickCount = 10;\n\n        const {indicatorStore, program} = this.props;\n\n        const currentIndicatorFilter = this.props.currentIndicatorFilter;\n\n        const isHighlighted = this.handledFilterTypes.has(currentIndicatorFilter);\n\n        const totalIndicatorCount = indicatorStore.indicators.length;\n        const nonReportingCount = indicatorStore.getIndicatorsNotReporting.length;\n        const highCount = indicatorStore.getIndicatorsAboveTarget.length;\n        const lowCount = indicatorStore.getIndicatorsBelowTarget.length;\n        const onTargetCount = indicatorStore.getIndicatorsOnTarget.length;\n\n        //100 and 0 should only represent absolute \"all\" and \"none\" values respectively (no round to 100 or to 0)\n        const makePercent = totalIndicatorCount > 0 ?\n            (x) => (x == totalIndicatorCount ? 100 :\n                    (x == 0 ? 0 : Math.max(1, Math.min(Math.round((x / totalIndicatorCount) * 100), 99)))) : (x) => 0;\n\n        const percentHigh = makePercent(highCount);\n        const percentOnTarget = makePercent(onTargetCount);\n        const percentBelow = makePercent(lowCount);\n        const percentNonReporting = makePercent(nonReportingCount);\n\n        const marginPercent = this.props.indicatorOnScopeMargin * 100;\n\n        let programPeriodStartDate = localDateFromISOString(program.reporting_period_start);\n\n        let gaugeHasErrors = (indicatorStore.getIndicatorsReporting.length === 0) || (indicatorStore.getTotalResultsCount === 0);\n\n\n        // Top level wrapper of component\n        let Gauge = (props) => {\n            return <div className={classNames('gauge', {'is-highlighted': isHighlighted})} ref={el => this.el = el}>\n                <h6 className=\"gauge__title\">{gettext('Indicators on track')}</h6>\n                <div className=\"gauge__overview\">\n                    {props.children}\n                </div>\n            </div>\n        };\n\n        let GaugeLabels = (props) => { // success case\n            return <div className=\"gauge__labels\">\n                <div className=\"gauge__label\">\n                    <span className=\"text-muted\">\n                        {\n                            /* # Translators: variable %s shows what percentage of indicators have no targets reporting data. Example: 31% unavailable */\n                            interpolate(gettext('%(percentNonReporting)s% unavailable'), {percentNonReporting}, true)\n                        }\n                    </span>\n                    {' '}\n                    <a href=\"#\"\n                       tabIndex=\"0\"\n                       data-toggle=\"popover\"\n                       data-placement=\"right\"\n                       data-trigger=\"focus\"\n                       data-content={\n                           /* # Translators: help text for the percentage of indicators with no targets reporting data. */\n                           gettext(\"The indicator has no targets, no completed target periods, or no results reported.\")\n                       }\n                       onClick={e => e.preventDefault()}\n                    ><i className=\"far fa-question-circle\"/></a>\n                </div>\n                <div className=\"gauge__label\">\n                    <span className=\"gauge__value--above filter-trigger--band\"\n                        onClick={ e => this.onFilterLinkClick(e, IndicatorFilterType.aboveTarget) }\n                        dangerouslySetInnerHTML={ aboveTargetMarkup() }>\n                    </span>\n                </div>\n                <div className=\"gauge__label\">\n                    <span className=\"gauge__value filter-trigger--band\"\n                        onClick={ e => this.onFilterLinkClick(e, IndicatorFilterType.onTarget) }\n                        dangerouslySetInnerHTML={ onTargetMarkup() }>\n                    </span>\n                    {' '}\n                    <a href=\"#\"\n                       tabIndex=\"0\"\n                       data-toggle=\"popover\"\n                       data-placement=\"right\"\n                       data-trigger=\"focus\"\n                       data-content={\n                           /* # Translators: Help text explaining what an \"on track\" indicator is. */\n                           gettext(\"The actual value matches the target value, plus or minus 15%. So if your target is 100 and your result is 110, the indicator is 10% above target and on track.  <br><br>Please note that if your indicator has a decreasing direction of change, then “above” and “below” are switched. In that case, if your target is 100 and your result is 200, your indicator is 50% below target and not on track.<br><br><a href='https://docs.google.com/document/d/1Gl9bxJJ6hdhCXeoOCoR1mnVKZa2FlEOhaJcjexiHzY0' target='_blank'>See our documentation for more information.</a>\")\n                       }\n                       onClick={e => e.preventDefault()}\n                    ><i className=\"far fa-question-circle\"/></a>\n                </div>\n                <div className=\"gauge__label\">\n                    <span className=\"gauge__value--below filter-trigger--band\"\n                        onClick={ e => this.onFilterLinkClick(e, IndicatorFilterType.belowTarget) }\n                        dangerouslySetInnerHTML={belowTargetMarkup()}>\n                    </span>\n                </div>\n            </div>\n        }\n\n\n        // Handle strings containing HTML markup\n\n        const aboveTargetMarkup = () => {\n            /* # Translators: variable %(percentHigh)s shows what percentage of indicators are a certain percentage above target percent %(marginPercent)s. Example: 31% are >15% above target */\n            let s = gettext('<strong>%(percentHigh)s%</strong> are >%(marginPercent)s% above target');\n            return {__html: interpolate(s, {percentHigh, marginPercent}, true)};\n        };\n\n        const onTargetMarkup = () => {\n            /* # Translators: variable %s shows what percentage of indicators are within a set range of target. Example: 31%  are on track */\n            let s = gettext('<strong>%s%</strong> are on track');\n            return {__html: interpolate(s, [percentOnTarget])};\n        };\n\n        const belowTargetMarkup = () => {\n            /* # Translators: variable %(percentBelow)s shows what percentage of indicators are a certain percentage below target. The variable %(marginPercent)s is that percentage. Example: 31% are >15% below target */\n            let s = gettext('<strong>%(percentBelow)s%</strong> are >%(marginPercent)s% below target');\n            return {__html: interpolate(s, {percentBelow, marginPercent}, true)};\n        };\n\n\n        return <Gauge>\n            <div className=\"gauge__graphic gauge__graphic--performance-band\">\n                <div className=\"graphic__tick-marks\">\n                    {[...Array(tickCount)].map((e, i) => <div key={i} className=\"graphic__tick\" />)}\n                </div>\n                <div className=\"graphic__performance-band--above-target\"\n                     style={{'flexBasis': `${percentHigh}%`}}/>\n                <div className=\"graphic__performance-band--on-target\"\n                     style={{'flexBasis': `${percentOnTarget}%`}}/>\n                <div className=\"graphic__performance-band--below-target\"\n                     style={{'flexBasis': `${percentBelow}%`}}/>\n            </div>\n            { gaugeHasErrors ?\n                <div className=\"gauge__labels\">\n                    <div className=\"gauge__label\">\n                        {\n                            /* # Translators: message describing why this display does not show any data. # */}\n                        <p className=\"text-muted\">{gettext(\"Unavailable until the first target period ends with results reported.\")}</p>\n                    </div>\n                </div>\n            : <GaugeLabels />}\n        </Gauge>;\n    }\n}\n\n\nexport const ProgramMetrics = observer(function (props) {\n    const program = props.rootStore.program;\n    const indicatorStore = props.rootStore.indicatorStore;\n    const indicators = indicatorStore.indicators;\n\n    const currentIndicatorFilter = props.uiStore.currentIndicatorFilter;\n\n    const indicatorOnScopeMargin = this.props.indicatorOnScopeMargin;\n\n    // Use objs for labels below to allow for translator notes to be added\n\n    const targetLabels = {\n        /* # Translators: title of a graphic showing indicators with targets */\n        title: gettext(\"Indicators with targets\"),\n\n        /* # Translators: a label in a graphic. Example: 31% have targets */\n        filledLabel: gettext(\"have targets\"),\n\n        /* # Translators: a label in a graphic. Example: 31% no targets */\n        unfilledLabel: gettext(\"no targets\"),\n\n        /* # Translators: a link that displays a filtered list of indicators which are missing targets */\n        cta: gettext(\"Indicators missing targets\"),\n\n        emptyLabel: gettext(\"No targets\"),\n    };\n\n    const resultsLabels = {\n        /* # Translators: title of a graphic showing indicators with results */\n        title: gettext(\"Indicators with results\"),\n\n        /* # Translators: a label in a graphic. Example: 31% have results */\n        filledLabel: gettext(\"have results\"),\n\n        /* # Translators: a label in a graphic. Example: 31% no results */\n        unfilledLabel: gettext(\"no results\"),\n\n        /* # Translators: a link that displays a filtered list of indicators which are missing results */\n        cta: gettext(\"Indicators missing results\"),\n\n        emptyLabel: gettext(\"No results\"),\n    };\n\n    const evidenceLabels = {\n        /* # Translators: title of a graphic showing results with evidence */\n        title: gettext(\"Results with evidence\"),\n\n        /* # Translators: a label in a graphic. Example: 31% have evidence */\n        filledLabel: gettext(\"have evidence\"),\n\n        /* # Translators: a label in a graphic. Example: 31% no evidence */\n        unfilledLabel: gettext(\"no evidence\"),\n\n        /* # Translators: a link that displays a filtered list of indicators which are missing evidence */\n        cta: gettext(\"Indicators missing evidence\"),\n\n        emptyLabel: gettext(\"No evidence\"),\n    };\n\n    // Are some targets defined on any indicators?\n    // all_targets_defined is an int (1,0) instead of bool\n    const someTargetsDefined = indicators.map(i => i.all_targets_defined === 1).some(b => b);\n\n    // Do any indicators have results?\n    const someResults = indicators.map(i => i.results_count).some(count => count > 0);\n\n    // Do not display on pages with no indicators\n    if (indicators.length === 0) return null;\n\n    return <div className=\"status__gauges\">\n\n            <GaugeBand currentIndicatorFilter={currentIndicatorFilter}\n                       indicatorOnScopeMargin={indicatorOnScopeMargin}\n                       indicatorStore={indicatorStore}\n                       program={program}\n            />\n\n            <GaugeTank filterType={IndicatorFilterType.missingTarget}\n                       currentIndicatorFilter={currentIndicatorFilter}\n\n                       allIndicatorsLength={indicators.length}\n                       filteredIndicatorsLength={indicatorStore.getIndicatorsNeedingTargets.length}\n                       {...targetLabels}\n\n                       />\n\n            <GaugeTank filterType={IndicatorFilterType.missingResults}\n                       currentIndicatorFilter={currentIndicatorFilter}\n\n                       allIndicatorsLength={indicators.length}\n                       filteredIndicatorsLength={indicatorStore.getIndicatorsNeedingResults.length}\n\n                       disabled={! someTargetsDefined}\n\n                       {...resultsLabels}\n\n                       />\n\n            <GaugeTank filterType={IndicatorFilterType.missingEvidence}\n                       currentIndicatorFilter={currentIndicatorFilter}\n                       // The names below are misleading as this gauge is measuring *results*, not indicators\n                       allIndicatorsLength={indicatorStore.getTotalResultsCount}\n                       filteredIndicatorsLength={indicatorStore.getTotalResultsCount - indicatorStore.getTotalResultsWithEvidenceCount}\n\n                       disabled={! someTargetsDefined || ! someResults}\n\n                       {...evidenceLabels}\n                       />\n\n        </div>\n});\n"],"mappings":";;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AARA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AANA;AAMA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAGA;;;;AAhCA;AACA;AAoCA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAWA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAUA;;;;AA/DA;AACA;AAmEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAJA;AAKA;AACA;;;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;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CA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AATA;AAUA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAKA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AATA;AAUA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AAAA;AADA;AAIA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;;;;AArKA;AACA;AAwKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAbA;AAiBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAJA;AASA;AACA;AAEA;AACA;AAEA;AANA;AAYA;AACA;AADA;AAGA;AACA;AAEA;AANA;AAYA;;;;A","sourceRoot":""}