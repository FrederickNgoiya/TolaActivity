{"version":3,"file":"program_page-6fabb62ecb6f565e900f.js","sources":["webpack:///./js/pages/program_page/pinned_reports.js","webpack:///./js/pages/program_page/components/indicator_list.js","webpack:///./js/pages/program_page/models.js","webpack:///./js/pages/program_page/index.js","webpack:///./js/components/bootstrap_multiselect.js","webpack:///./js/eventbus.js","webpack:///./js/pages/program_page/components/program_metrics.js","webpack:///external \"jQuery\""],"sourcesContent":["\n// On pinned report delete btn click\n$('[data-delete-pinned-report]').click(function (e) {\n    e.preventDefault();\n\n    let prId = $(this).data('deletePinnedReport');\n    let pinnedReport = $(this).closest('.pinned-report');\n\n    if (window.confirm(gettext('Warning: This action cannot be undone. Are you sure you want to delete this pinned report?'))) {\n        $.ajax({\n            type: \"POST\",\n            url: jsContext.delete_pinned_report_url,\n            data: {\n                pinned_report_id: prId,\n            },\n            success: function () {\n                pinnedReport.remove();\n            }\n        });\n    }\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer } from \"mobx-react\"\nimport eventBus from '../../../eventbus';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport {IndicatorFilterType} from \"../models\";\nimport {Select} from '../../../components/bootstrap_multiselect';\n\nlibrary.add(faCaretDown, faCaretRight);\n\n\nfunction getStatusIndicatorString(filterType, indicatorCount) {\n    let fmts;\n    switch (filterType) {\n        case IndicatorFilterType.missingTarget:\n            // # Translators: The number of indicators that do not have targets defined on them\n            fmts = ngettext(\"%s indicator has missing targets\", \"%s indicators have missing targets\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.missingResults:\n            // # Translators: The number of indicators that no one has entered in any results for\n            fmts = ngettext(\"%s indicator has missing results\", \"%s indicators have missing results\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.missingEvidence:\n            // # Translators: The number of indicators that contain results that are not backed up with evidence\n            fmts = ngettext(\"%s indicator has missing evidence\", \"%s indicators have missing evidence\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.aboveTarget:\n            // # Translators: shows what number of indicators are a certain percentage above target. Example: 3 indicators are >15% above target\n            fmts = ngettext(\"%s indicator is >15% above target\", \"%s indicators are >15% above target\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.belowTarget:\n            // # Translators: shows what number of indicators are a certain percentage below target. Example: 3 indicators are >15% below target\n            fmts = ngettext(\"%s indicator is >15% below target\", \"%s indicators are >15% below target\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n        case IndicatorFilterType.onTarget:\n            // # Translators: shows what number of indicators are within a set range of target. Example: 3 indicators are on track\n            fmts = ngettext(\"%s indicator is on track\", \"%s indicators are on track\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n\n        default:\n            // # Translators: the number of indicators in a list. Example: 3 indicators\n            fmts = ngettext(\"%s indicator\", \"%s indicators\", indicatorCount);\n            return interpolate(fmts, [indicatorCount]);\n    }\n}\n\n\n\n@observer\nclass StatusHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onShowAllClick = this.onShowAllClick.bind(this);\n    }\n\n    onShowAllClick(e) {\n        e.preventDefault();\n        eventBus.emit('clear-all-indicator-filters');\n    }\n\n    render() {\n        const {\n            indicatorCount,\n            programId,\n            currentIndicatorFilter,\n            filterApplied,\n        } = this.props;\n\n        return <div className=\"indicators-list__header\">\n            <h3 className=\"no-bold\">\n                <span id=\"indicators-list-title\">{getStatusIndicatorString(currentIndicatorFilter, indicatorCount)} </span>\n\n                {filterApplied &&\n                <a href=\"#\" id=\"show-all-indicators\" onClick={this.onShowAllClick}>\n                    <small>Show all</small>\n                </a>\n                }\n            </h3>\n            <div>\n                <a href={`/indicators/indicator_create/${programId}`} role=\"button\" className=\"btn-link btn-add\"><i\n                    className=\"fas fa-plus-circle\"/> {gettext(\"Add indicator\")}</a>\n            </div>\n        </div>\n    }\n}\n\n\n@observer\nclass IndicatorFilter extends React.Component{\n    render() {\n        const indicators = this.props.rootStore.indicatorStore.indicators;\n        const selectedIndicatorIds = this.props.uiStore.selectedIndicatorIds;\n\n        const indicatorSelectOptions = indicators.map(i => {\n            return {\n                value: i.id,\n                label: i.name,\n            }\n        });\n\n        return <nav className=\"list__filters list__filters--inline-label\" id=\"id_div_indicators\">\n            <label className=\"filters__label\">\n                {gettext(\"Find an indicator:\")}\n            </label>\n            <div className=\"filters__control\">\n                <Select forceEmptySelect={true}\n                        options={indicatorSelectOptions}\n                        selected={selectedIndicatorIds}\n                        onSelectCb={(selectedIndicatorIds) => eventBus.emit('select-indicators-to-filter', selectedIndicatorIds)} />\n            </div>\n        </nav>;\n    }\n}\n\n\n@observer\nclass IndicatorListTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onIndicatorUpdateClick = this.onIndicatorUpdateClick.bind(this);\n        this.onIndicatorResultsToggleClick = this.onIndicatorResultsToggleClick.bind(this);\n    }\n\n    onIndicatorUpdateClick(e, indicatorId) {\n        e.preventDefault();\n\n        eventBus.emit('open-indicator-update-modal', indicatorId);\n    }\n\n    onIndicatorResultsToggleClick(e, indicatorId) {\n        e.preventDefault();\n\n        const resultsMap = this.props.resultsMap;\n\n        if (resultsMap.has(indicatorId)) {\n            eventBus.emit('delete-indicator-results', indicatorId);\n        } else {\n            eventBus.emit('load-indicator-results', indicatorId);\n        }\n    }\n\n    render() {\n        const indicators = this.props.indicators;\n        const program = this.props.program;\n        const programReportingPeriodEndDate = new Date(program.reporting_period_end);\n        const resultsMap = this.props.resultsMap;\n\n        return <table className=\"table indicators-list\">\n            <thead>\n            <tr className=\"table-header\">\n                <th className=\"\" id=\"id_indicator_name_col_header\">{gettext(\"Indicator\")}</th>\n                <th className=\"\" id=\"id_indicator_buttons_col_header\">&nbsp;</th>\n                <th className=\"\" id=\"id_indicator_level_col_header\">{gettext(\"Level\")}</th>\n                <th className=\"\" id=\"id_indicator_unit_col_header\">{gettext(\"Unit of measure\")}</th>\n                <th className=\"text-right\" id=\"id_indicator_baseline_col_header\">{gettext(\"Baseline\")}</th>\n                <th className=\"text-right\" id=\"id_indicator_target_col_header\">{gettext(\"Target\")}</th>\n            </tr>\n            </thead>\n\n            <tbody>\n            {indicators.map(indicator => {\n                const resultsExist = resultsMap.has(indicator.id);\n                const resultsStr = resultsMap.get(indicator.id);\n                const targetPeriodLastEndDate = indicator.target_period_last_end_date ? new Date(indicator.target_period_last_end_date) : null;\n                // ^^^ Because calling Date() on null returns the current date, and we actually need null!\n\n                return <React.Fragment key={indicator.id}>\n                    <tr className={classNames(\"indicators-list__row\", \"indicators-list__indicator-header\", {\n                        \"is-highlighted\": indicator.just_created,\n                        \"is-expanded\": resultsExist\n                    })}>\n                        <td>\n                            <a href=\"#\"\n                               className=\"indicator_results_toggle\"\n                               onClick={(e) => this.onIndicatorResultsToggleClick(e, indicator.id)}\n                            >\n                                <FontAwesomeIcon icon={resultsExist ? 'caret-down' : 'caret-right'} />\n                                <strong>{indicator.number}</strong>&nbsp;\n                                <span className=\"indicator_name\">{indicator.name}</span>\n                            </a>\n\n                            {indicator.key_performance_indicator &&\n                            <span className=\"badge\">KPI</span>\n                            }\n    \n                            {targetPeriodLastEndDate && programReportingPeriodEndDate > targetPeriodLastEndDate &&\n                            <a href={`/indicators/indicator_update/${indicator.id}/`}\n                               className=\"indicator-link color-red missing_targets\"\n                               data-toggle=\"modal\" data-target=\"#indicator_modal_div\"\n                               data-tab=\"targets\">\n                                <i className=\"fas fa-bullseye\"/> Missing targets\n                            </a>\n                            }\n                        </td>\n                        <td>\n                            <a href=\"#\" className=\"indicator-link\"\n                               onClick={(e) => this.onIndicatorUpdateClick(e, indicator.id)}><i\n                                className=\"fas fa-cog\"/></a>\n                        </td>\n                        <td>{indicator.level ? indicator.level.name : ''}</td>\n                        <td>{indicator.unit_of_measure}</td>\n                        <td className=\"text-right\">{indicator.baseline_display}</td>\n                        <td className=\"text-right\">{indicator.lop_target_display}</td>\n                    </tr>\n        \n                    {resultsExist &&\n                    <tr className=\"indicators-list__row indicators-list__indicator-body\">\n                        <td colSpan=\"6\" ref={el => $(el).find('[data-toggle=\"popover\"]').popover({html:true})}>\n                            {/* result_table.html container */}\n                                <div dangerouslySetInnerHTML={{__html: resultsStr}} />\n                        </td>\n                    </tr>\n                    }\n                </React.Fragment>\n\n            })}\n            </tbody>\n        </table>\n    }\n}\n\n\nexport const IndicatorList = observer(function (props) {\n    const program = props.rootStore.program;\n    const indicatorStore = props.rootStore.indicatorStore;\n    // const indicators = props.rootStore.indicatorStore.indicators;\n    const resultsMap = props.rootStore.resultsMap;\n    const currentIndicatorFilter = props.uiStore.currentIndicatorFilter;\n    const selectedIndicatorIds = props.uiStore.selectedIndicatorIds;\n\n    // Either a gas gauge filter is applied, or an indicator has been selected, but not both\n\n    // apply gas gauge filter\n    let filteredIndicators = indicatorStore.filterIndicators(currentIndicatorFilter);\n\n    if (selectedIndicatorIds.length > 0) {\n        filteredIndicators = filteredIndicators.filter((i) => selectedIndicatorIds.indexOf(i.id) > -1);\n    }\n\n    return <React.Fragment>\n        <StatusHeader indicatorCount={filteredIndicators.length}\n                      programId={program.id}\n                      currentIndicatorFilter={currentIndicatorFilter}\n                      filterApplied={currentIndicatorFilter || selectedIndicatorIds.length > 0}/>\n\n        <IndicatorFilter uiStore={props.uiStore} rootStore={props.rootStore} />\n\n        {program.does_it_need_additional_target_periods &&\n            <div id=\"id_missing_targets_msg\" className=\"color-red\">\n                <i className=\"fas fa-bullseye\"/>&nbsp;\n                {gettext('Some indicators have missing targets. To enter these values, click the target icon near the indicator name.')}\n            </div>\n        }\n\n        <IndicatorListTable indicators={filteredIndicators} resultsMap={resultsMap} program={program} />\n    </React.Fragment>\n});\n","import { observable, computed, action } from \"mobx\";\n\n// Types of filters available on the program page\nexport const IndicatorFilterType = Object.freeze({\n    missingTarget: 1,\n    missingResults: 2,\n    missingEvidence: 3,\n\n    aboveTarget: 5,\n    belowTarget: 6,\n    onTarget: 7,\n});\n\nexport class IndicatorStore {\n    @observable indicators = [];\n\n    constructor(indicators) {\n        this.indicators = indicators;\n\n        this.updateIndicator = this.updateIndicator.bind(this);\n        this.filterIndicators = this.filterIndicators.bind(this);\n    }\n\n    @action\n    updateIndicator(indicator) {\n        let i = this.indicators.findIndex(e => e.id === indicator.id);\n        if (i > 0) {\n            this.indicators[i] = indicator;\n        }\n    }\n\n    @computed\n    get getIndicatorsNeedingTargets() {\n        return this.indicators.filter(i => i.all_targets_defined === 0);\n    }\n\n    @computed\n    get getIndicatorsNeedingResults() {\n        return this.indicators.filter(i => i.results_count === 0);\n    }\n\n    @computed\n    get getIndicatorsNeedingEvidence() {\n        return this.indicators.filter(i => i.results_count !== i.results_with_evidence_count);\n    }\n\n    @computed\n    get getIndicatorsNotReporting() {\n        return this.indicators.filter(i => i.over_under === null);\n    }\n\n    @computed\n    get getIndicatorsAboveTarget() {\n        return this.indicators.filter(i => i.over_under > 0);\n    }\n\n    @computed\n    get getIndicatorsBelowTarget() {\n        return this.indicators.filter(i => i.over_under < 0);\n    }\n\n    @computed\n    get getIndicatorsOnTarget() {\n        return this.indicators.filter(i => i.over_under === 0);\n    }\n\n    @computed\n    get getIndicatorsReporting() {\n        return this.indicators.filter(i => i.reporting === true);\n    }\n\n    filterIndicators(filterType) {\n        let indicators;\n\n        switch (filterType) {\n            case IndicatorFilterType.missingTarget:\n                indicators = this.getIndicatorsNeedingTargets;\n                break;\n            case IndicatorFilterType.missingResults:\n                indicators = this.getIndicatorsNeedingResults;\n                break;\n            case IndicatorFilterType.missingEvidence:\n                indicators = this.getIndicatorsNeedingEvidence;\n                break;\n            case IndicatorFilterType.aboveTarget:\n                indicators = this.getIndicatorsAboveTarget;\n                break;\n            case IndicatorFilterType.belowTarget:\n                indicators = this.getIndicatorsBelowTarget;\n                break;\n            case IndicatorFilterType.onTarget:\n                indicators = this.getIndicatorsOnTarget;\n                break;\n            default:\n                indicators = this.indicators;\n        }\n\n        return indicators\n    }\n\n    @computed\n    get getTotalResultsCount() {\n        return this.indicators.reduce((acc, i) => acc + i.results_count, 0);\n    }\n\n    @computed\n    get getTotalResultsWithEvidenceCount() {\n        return this.indicators.reduce((acc, i) => acc + i.results_with_evidence_count, 0);\n    }\n}\n\nexport class ProgramPageStore {\n    indicatorStore;\n    @observable program = {};\n    @observable resultsMap = new Map(); // indicator id -> results HTML str\n\n    constructor(indicators, program) {\n        this.indicatorStore = new IndicatorStore(indicators);\n        this.program = program;\n\n        this.addResultsHTML = this.addResultsHTML.bind(this);\n        this.deleteResultsHTML = this.deleteResultsHTML.bind(this);\n    }\n\n    @action\n    addResultsHTML(indicatorId, htmlStr) {\n        this.resultsMap.set(parseInt(indicatorId), htmlStr);\n    }\n\n    @action\n    deleteResultsHTML(indicatorId) {\n        this.resultsMap.delete(indicatorId);\n    }\n\n    @action\n    deleteAllResultsHTML() {\n        this.resultsMap.clear();\n    }\n}\n\nexport class ProgramPageUIStore {\n    @observable currentIndicatorFilter;  // selected gas gauge filter\n    @observable selectedIndicatorIds = []; // indicators filter\n\n    constructor() {\n        this.setIndicatorFilter = this.setIndicatorFilter.bind(this);\n        this.clearIndicatorFilter = this.clearIndicatorFilter.bind(this);\n        this.setSelectedIndicatorIds = this.setSelectedIndicatorIds.bind(this);\n    }\n\n    @action\n    setIndicatorFilter(indicatorFilter) {\n        this.currentIndicatorFilter = indicatorFilter;\n    }\n\n    @action\n    clearIndicatorFilter() {\n        this.currentIndicatorFilter = null;\n    }\n\n    @action\n    setSelectedIndicatorIds(selectedIndicatorIds) {\n        this.selectedIndicatorIds = selectedIndicatorIds;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport eventBus from '../../eventbus';\n\nimport {IndicatorList} from './components/indicator_list';\nimport {ProgramMetrics} from './components/program_metrics';\nimport {ProgramPageStore, ProgramPageUIStore} from './models';\n\nimport './pinned_reports';\n\n// console.log(jsContext);\n\n/*\n * Model/Store setup\n */\nconst rootStore = new ProgramPageStore(jsContext.indicators, jsContext.program);\nconst uiStore = new ProgramPageUIStore();\n\n/*\n * Event Handlers\n */\n\n// open indicator update modal with form loaded from server\neventBus.on('open-indicator-update-modal', (indicatorId) => {\n    // Note: depends on indicator_list_modals.html\n\n    let url = `/indicators/indicator_update/${indicatorId}/?modal=1`;\n\n    $(\"#indicator_modal_content\").empty();\n    $(\"#modalmessages\").empty();\n\n    $(\"#indicator_modal_content\").load(url);\n    $(\"#indicator_modal_div\").modal('show');\n});\n\n// get results html blob for indicator\neventBus.on('load-indicator-results', (indicatorId) => {\n    let url = `/indicators/result_table/${indicatorId}/${rootStore.program.id}/`;\n\n    $.get(url, function (data) {\n        rootStore.addResultsHTML(indicatorId, data);\n    });\n});\n\n// delete (hide) results html blob for indicator\neventBus.on('delete-indicator-results', (indicatorId) => {\n    rootStore.deleteResultsHTML(indicatorId);\n});\n\n// reload singular indicator json obj\neventBus.on('reload-indicator', indicatorId => {\n    $.get(`/indicators/api/indicator/${indicatorId}`, rootStore.indicatorStore.updateIndicator);\n});\n\n// apply a gas gauge filter. Takes in IndicatorFilterType enum value\neventBus.on('apply-gauge-tank-filter', indicatorFilter => {\n    // reset all filters\n    eventBus.emit('clear-all-indicator-filters');\n\n    eventBus.emit('close-all-indicators');\n\n    uiStore.setIndicatorFilter(indicatorFilter);\n});\n\n// clear all gas tank and indicator select filters\neventBus.on('clear-all-indicator-filters', () => {\n    uiStore.clearIndicatorFilter();\n    eventBus.emit('select-indicators-to-filter', []);\n    eventBus.emit('close-all-indicators');\n});\n\n// filter down by selecting individual indicator\neventBus.on('select-indicators-to-filter', (selectedIndicatorIds) => {\n    // clear gauge tank filters\n    uiStore.clearIndicatorFilter();\n\n    uiStore.setSelectedIndicatorIds(selectedIndicatorIds);\n\n    // Open up results pane as well\n    selectedIndicatorIds.forEach(id => eventBus.emit('load-indicator-results', id));\n});\n\n// close all expanded indicators in the table\neventBus.on('close-all-indicators', () => {\n    rootStore.deleteAllResultsHTML();\n});\n\n\n/*\n * React components on page\n */\n\nReactDOM.render(<IndicatorList rootStore={rootStore} uiStore={uiStore}/>,\n    document.querySelector('#indicator-list-react-component'));\n\nReactDOM.render(<ProgramMetrics rootStore={rootStore}\n                                uiStore={uiStore}\n                                indicatorOnScopeMargin={jsContext.indicator_on_scope_margin}/>,\n    document.querySelector('#program-metrics-react-component'));\n\n/*\n * Copied and modified JS from indicator_list_modals.js to allow modals to work\n * without being completely converted to React\n */\n\n// Open the CollectDataUpdate (update results) form in a modal\n$(\"#indicator-list-react-component\").on(\"click\", \".collected-data__link\", function(e) {\n    e.preventDefault();\n    let url = $(this).attr(\"href\");\n    url += \"?modal=1\";\n    $(\"#indicator_modal_content\").empty();\n    $(\"#modalmessages\").empty();\n\n    $(\"#indicator_collected_data_modal_content\").load(url);\n    $(\"#indicator_collecteddata_div\").modal('show');\n});\n\n// Open the IndicatorUpdate (Add targets btn in results section (HTML)) Form in a modal\n$(\"#indicator-list-react-component\").on(\"click\", \".indicator-link[data-tab]\", function(e) {\n    e.preventDefault();\n    let url = $(this).attr(\"href\");\n    url += \"?modal=1\";\n    let tab = $(this).data(\"tab\");\n    if (tab && tab != '' && tab != undefined && tab != 'undefined') {\n        url += \"&targetsactive=true\";\n    }\n    $(\"#indicator_modal_content\").empty();\n    $(\"#modalmessages\").empty();\n\n    $(\"#indicator_modal_content\").load(url);\n    $(\"#indicator_modal_div\").modal('show');\n\n});\n\n// when indicator update modal is closed, update targets\n$('#indicator_modal_div').on('hide.bs.modal', function (e) {\n    let form = $(this).find('form');\n    let form_action = form.attr('action').split('/');\n    let indicator_id = parseInt(form_action[form_action.length -2]);\n\n    eventBus.emit('reload-indicator', indicator_id);\n\n    if (rootStore.resultsMap.has(indicator_id)) {\n        eventBus.emit('load-indicator-results', indicator_id);\n    }\n});\n\n// When \"add results\" modal is closed, the targets data needs refreshing\n// the indicator itself also needs refreshing for the gas tank gauge\n$('#indicator_collecteddata_div').on('hide.bs.modal', function (e) {\n    let recordchanged = $(this).find('form').data('recordchanged');\n    if (recordchanged === true) {\n        let indicator_id = $(this).find('form #id_indicator').val();\n        eventBus.emit('load-indicator-results', indicator_id);\n        eventBus.emit('reload-indicator', indicator_id);\n    }\n});\n","/* React wrappers to bootstrap-multiselect widgets */\n/* Note: bootstrap-multiselect exists in the global JS context (imported in base.html) */\n\nimport React from 'react';\nimport $ from 'jquery';\nimport isEqual from 'react-fast-compare';\n\n/*\n  Props:\n\n    - options: list of objects with 'value' and 'label' (assumes values are ints!)\n    - selected: single value, or array of values of selected options\n    - onSelectCb: a callback function that takes a list of selected values\n    - isMultiSelect: boolean - is a multi-select?\n    - forceEmptySelect: boolean - in single select, force \"None selected\" even if empty option is not provided\n    - nonSelectText: string - the text to display on an empty selection\n */\nexport class Select extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.onChange = this.onChange.bind(this);\n        this.clearInternalSelection = this.clearInternalSelection.bind(this);\n    }\n\n    onChange() {\n        let selectedValues = this.$el.find('option:selected').map(function() { return parseInt($(this).val()) }).get();\n\n        if (this.props.onSelectCb) {\n            this.props.onSelectCb(selectedValues);\n        }\n    }\n\n    clearInternalSelection() {\n        // Set \"none\" selected in single select mode, with no empty option\n        // these do not trigger any bs-multiselect callbacks\n        if (this.props.forceEmptySelect) {\n            this.$el.val('');\n        }\n    }\n\n    componentDidMount() {\n        const {nonSelectText} = this.props;\n\n        const multiSelectOptions = {\n            nonSelectedText: nonSelectText,\n            includeSelectAllOption: true,\n            enableFiltering: true,\n            enableCaseInsensitiveFiltering: true,\n            numberDisplayed: 1,\n            maxHeight: 320,\n            buttonClass: 'btn form-control',\n            templates: {\n                filter: '<li class=\"multiselect-item filter\"><div class=\"input-group\"><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\n                filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"fas fa-times-circle\"></i></button></span>',\n            },\n\n            onChange: this.onChange,\n            onSelectAll: this.onChange,\n            onDeselectAll: this.onChange,\n        };\n\n        // jquery ref to select element\n        this.$el = $(this.el);\n\n        // initial setup of BS multiselect\n        this.$el.multiselect(multiSelectOptions);\n\n        // set the selection and options\n        this.componentDidUpdate();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {options, selected} = this.props;\n\n        // Setting the options clears the filter search field which is not desired behavior\n        // As such, limit setting the options unless they really have changed\n        // Hopefully this deep check isn't too slow for a large number of options\n        if (!prevProps || !isEqual(prevProps.options, options)) {\n            this.$el.multiselect('dataprovider', options);\n        }\n\n        this.$el.multiselect('select', selected);\n\n        if (selected.length === 0) {\n            this.clearInternalSelection();\n        }\n\n        this.$el.multiselect('refresh');\n    }\n\n    componentWillUnmount() {\n        this.$el.multiselect('destroy');\n      }\n\n    render() {\n        const isMultiSelect = this.props.isMultiSelect ? \"multiple\" : null;\n\n        return <select className=\"form-control\" ref={el => this.el = el} multiple={isMultiSelect} />\n    }\n}\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer } from \"mobx-react\"\nimport eventBus from '../../../eventbus';\nimport {IndicatorFilterType} from \"../models\";\n\n\n@observer\nclass GaugeTank extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onGuageClick = this.onGuageClick.bind(this);\n    }\n\n    onGuageClick() {\n        eventBus.emit('apply-gauge-tank-filter', this.props.filterType);\n    }\n\n    render() {\n        const tickCount = 10;\n\n        const {allIndicatorsLength, filteredIndicatorsLength, title, filledLabel, unfilledLabel, cta, emptyLabel} = this.props;\n\n        const filterType = this.props.filterType;\n        const currentIndicatorFilter = this.props.currentIndicatorFilter;\n\n        const isHighlighted = filterType === currentIndicatorFilter;\n\n        // Gauge should only show 100%/0% if filtered == all/0 (absolute 100%, not rounding to 100%)\n        // to accomplish this, added a Math.max and Math.min to prevent rounding to absolute values:\n        const unfilledPercent = (allIndicatorsLength <= 0 || allIndicatorsLength == filteredIndicatorsLength) ? 100 :\n            (filteredIndicatorsLength == 0 ? 0 :\n                Math.max(1, Math.min(Math.round((filteredIndicatorsLength / allIndicatorsLength) * 100), 99)));\n        const filledPercent = 100 - unfilledPercent;\n\n        return <div className={classNames('gauge', 'filter-trigger', {'is-highlighted': isHighlighted})}\n                    onClick={this.onGuageClick}>\n            <h6 className=\"gauge__title\">{title}</h6>\n            <div className=\"gauge__overview\">\n                <div\n                    className=\"gauge__graphic gauge__graphic--tank{% if filled_percent == 0 %} gauge__graphic--empty{% endif %}\">\n                    <div className=\"graphic__tick-marks\">\n                        {[...Array(tickCount)].map((e, i) => <div key={i} className=\"graphic__tick\"/>)}\n                    </div>\n                    <div className=\"graphic__tank--unfilled\" style={{'flexBasis': `${unfilledPercent}%`}}/>\n                    <div className=\"graphic__tank--filled\" style={{'flexBasis': `${filledPercent}%`}}/>\n                </div>\n                <div className=\"gauge__labels\">\n                    {filledPercent > 0 ?\n\n                        <React.Fragment>\n                            <div className=\"gauge__label text-muted\">\n                                {unfilledPercent}% {unfilledLabel}\n                            </div>\n                            <div className=\"gauge__label\">\n                                <span className=\"gauge__value\">{filledPercent}% {filledLabel}</span>\n                            </div>\n                        </React.Fragment>\n\n                        :\n\n                        <div className=\"gauge__label\">\n                            <span className=\"text-danger\"><strong>{emptyLabel}</strong></span>\n                        </div>\n                    }\n                </div>\n            </div>\n            { unfilledPercent > 0 &&\n            <div className=\"gauge__cta\">\n                <span className=\"btn-link btn-inline\"><i className=\"fas fa-exclamation-triangle text-warning\"/> {cta}</span>\n                &nbsp;\n            </div>\n            }\n        </div>;\n    }\n}\n\n\n@observer\nclass GaugeBand extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handledFilterTypes = new Set([\n            IndicatorFilterType.aboveTarget,\n            IndicatorFilterType.belowTarget,\n            IndicatorFilterType.onTarget,\n        ]);\n\n        this.onFilterLinkClick = this.onFilterLinkClick.bind(this);\n    }\n\n    componentDidUpdate() {\n        // Enable popovers after update (they break otherwise)\n        $(this.el).find('[data-toggle=\"popover\"]').popover({\n            html: true\n        });\n    }\n\n    onFilterLinkClick(e, filterType) {\n        e.preventDefault();\n        eventBus.emit('apply-gauge-tank-filter', filterType);\n    }\n\n    render() {\n        const tickCount = 10;\n\n        const {indicatorStore} = this.props;\n\n        const currentIndicatorFilter = this.props.currentIndicatorFilter;\n\n        const isHighlighted = this.handledFilterTypes.has(currentIndicatorFilter);\n\n        const totalIndicatorCount = indicatorStore.indicators.length;\n        const nonReportingCount = indicatorStore.getIndicatorsNotReporting.length;\n        const highCount = indicatorStore.getIndicatorsAboveTarget.length;\n        const lowCount = indicatorStore.getIndicatorsBelowTarget.length;\n        const onTargetCount = indicatorStore.getIndicatorsOnTarget.length;\n        \n        //100 and 0 should only represent absolute \"all\" and \"none\" values respectively (no round to 100 or to 0)\n        const makePercent = totalIndicatorCount > 0 ?\n            (x) => (x == totalIndicatorCount ? 100 :\n                    (x == 0 ? 0 : Math.max(1, Math.min(Math.round((x / totalIndicatorCount) * 100), 99)))) : (x) => 0;\n\n        const percentHigh = makePercent(highCount);\n        const percentOnTarget = makePercent(onTargetCount);\n        const percentBelow = makePercent(lowCount);\n        const percentNonReporting = makePercent(nonReportingCount);\n\n        const marginPercent = this.props.indicatorOnScopeMargin * 100;\n\n        // Top level wrapper of component\n        let Gauge = (props) => {\n            return <div className={classNames('gauge', {'is-highlighted': isHighlighted})} ref={el => this.el = el}>\n                <h6 className=\"gauge__title\">{gettext('Indicators on track')}</h6>\n                <div className=\"gauge__overview\">\n                    {props.children}\n                </div>\n            </div>\n        };\n\n\n        if (indicatorStore.getTotalResultsCount === 0) {\n            return <Gauge>\n                <div>\n                    {/* # Translators: message describing why this display does not show any data. */}\n                    <p className=\"text-muted\">{gettext(\"Unavailable until results are reported\")}</p>\n                    <div>\n                        <i className=\"gauge__icon gauge__icon--error fas fa-frown\"/>\n                    </div>\n                </div>\n            </Gauge>;\n        }\n\n        if (indicatorStore.getIndicatorsReporting.length === 0) {\n            return <Gauge>\n                <div className=\"gauge__graphic gauge__graphic--empty gauge__graphic--performance-band\">\n                    <div className=\"graphic__tick-marks\">\n                        {[...Array(tickCount)].map((e, i) => <div key={i} className=\"graphic__tick\" />)}\n                    </div>\n                </div>\n                <div className=\"gauge__labels\">\n                    <div className=\"gauge__label\">\n                        {/* # Translators: message describing why this display does not show any data. */}\n                        <p className=\"text-muted\">{gettext(\"Unavailable until the first target period ends with results reported\")}</p>\n                    </div>\n                </div>\n            </Gauge>;\n        }\n\n        // Handle strings containing HTML markup\n\n        const aboveTargetMarkup = () => {\n            /* # Translators: variable %(percentHigh)s shows what percentage of indicators are a certain percentage above target percent %(marginPercent)s. Example: 31% are >15% above target */\n            let s = gettext('<strong>%(percentHigh)s%</strong> are >%(marginPercent)s% above target');\n            return {__html: interpolate(s, {percentHigh, marginPercent}, true)};\n        };\n\n        const onTargetMarkup = () => {\n            /* # Translators: variable %s shows what percentage of indicators are within a set range of target. Example: 31%  are on track */\n            let s = gettext('<strong>%s%</strong> are on track');\n            return {__html: interpolate(s, [percentOnTarget])};\n        };\n\n        const belowTargetMarkup = () => {\n            /* # Translators: variable %(percentBelow)s shows what percentage of indicators are a certain percentage below target. The variable %(marginPercent)s is that percentage. Example: 31% are >15% below target */\n            let s = gettext('<strong>%(percentBelow)s%</strong> are >%(marginPercent)s% below target');\n            return {__html: interpolate(s, {percentBelow, marginPercent}, true)};\n        };\n\n\n        return <Gauge>\n            <div className=\"gauge__graphic gauge__graphic--performance-band\">\n                <div className=\"graphic__tick-marks\">\n                    {[...Array(tickCount)].map((e, i) => <div key={i} className=\"graphic__tick\" />)}\n                </div>\n                <div className=\"graphic__performance-band--above-target\"\n                     style={{'flexBasis': `${percentHigh}%`}}/>\n                <div className=\"graphic__performance-band--on-target\"\n                     style={{'flexBasis': `${percentOnTarget}%`}}/>\n                <div className=\"graphic__performance-band--below-target\"\n                     style={{'flexBasis': `${percentBelow}%`}}/>\n            </div>\n            <div className=\"gauge__labels\">\n                <div className=\"gauge__label\">\n                    <span className=\"text-muted\">\n                        {\n                            /* # Translators: variable %s shows what percentage of indicators have no targets reporting data. Example: 31% unavailable */\n                            interpolate(gettext('%s%% unavailable'), [percentNonReporting])\n                        }\n                    </span>\n                    {' '}\n                    <a href=\"#\"\n                       tabIndex=\"0\"\n                       data-toggle=\"popover\"\n                       data-placement=\"right\"\n                       data-trigger=\"focus\"\n                       data-content={\n                           /* # Translators: help text for the percentage of indicators with no targets reporting data. */\n                           gettext(\"The indicator has no targets, no completed target periods, or no results reported.\")\n                       }\n                       onClick={e => e.preventDefault()}\n                    ><i className=\"far fa-question-circle\"/></a>\n                </div>\n                <div className=\"gauge__label\">\n                    <span className=\"gauge__value--above filter-trigger--band\"\n                          onClick={e => this.onFilterLinkClick(e, IndicatorFilterType.aboveTarget)}\n                          dangerouslySetInnerHTML={aboveTargetMarkup()}>\n                    </span>\n                </div>\n                <div className=\"gauge__label\">\n                    <span className=\"gauge__value filter-trigger--band\"\n                          onClick={e => this.onFilterLinkClick(e, IndicatorFilterType.onTarget)}\n                          dangerouslySetInnerHTML={onTargetMarkup()}>\n                    </span>\n                    {' '}\n                    <a href=\"#\"\n                       tabIndex=\"0\"\n                       data-toggle=\"popover\"\n                       data-placement=\"right\"\n                       data-trigger=\"focus\"\n                       data-content={\n                           /* # Translators: Help text explaining what an \"on track\" indicator is. */\n                           gettext(\"The actual value matches the target value, plus or minus 15%. So if your target is 100 and your result is 110, the indicator is 10% above target and on track.  <br><br>Please note that if your indicator has a decreasing direction of change, then “above” and “below” are switched. In that case, if your target is 100 and your result is 200, your indicator is 50% below target and not on track.<br><br><a href='https://docs.google.com/document/d/1Gl9bxJJ6hdhCXeoOCoR1mnVKZa2FlEOhaJcjexiHzY0' target='_blank'>See our documentation for more information.</a>\")\n                       }\n                       onClick={e => e.preventDefault()}\n                    ><i className=\"far fa-question-circle\"/></a>\n                </div>\n                <div className=\"gauge__label\">\n                    <span className=\"gauge__value--below filter-trigger--band\"\n                          onClick={e => this.onFilterLinkClick(e, IndicatorFilterType.belowTarget)}\n                          dangerouslySetInnerHTML={belowTargetMarkup()}>\n                    </span>\n                </div>\n            </div>\n        </Gauge>;\n    }\n}\n\n\nexport const ProgramMetrics = observer(function (props) {\n    // const program = props.rootStore.program;\n    const indicatorStore = props.rootStore.indicatorStore;\n    const indicators = indicatorStore.indicators;\n\n    const currentIndicatorFilter = props.uiStore.currentIndicatorFilter;\n\n    const indicatorOnScopeMargin = this.props.indicatorOnScopeMargin;\n\n    // Use objs for labels below to allow for translator notes to be added\n\n    const targetLabels = {\n        /* # Translators: title of a graphic showing indicators with targets */\n        title: gettext(\"Indicators with targets\"),\n\n        /* # Translators: a label in a graphic. Example: 31% have targets */\n        filledLabel: gettext(\"have targets\"),\n\n        /* # Translators: a label in a graphic. Example: 31% no targets */\n        unfilledLabel: gettext(\"no targets\"),\n\n        cta: gettext(\"Add missing targets\"),\n\n        emptyLabel: gettext(\"No targets\"),\n    };\n\n    const resultsLabels = {\n        /* # Translators: title of a graphic showing indicators with results */\n        title: gettext(\"Indicators with results\"),\n\n        /* # Translators: a label in a graphic. Example: 31% have results */\n        filledLabel: gettext(\"have results\"),\n\n        /* # Translators: a label in a graphic. Example: 31% no results */\n        unfilledLabel: gettext(\"no results\"),\n\n        cta: gettext(\"Add missing results\"),\n\n        emptyLabel: gettext(\"No results\"),\n    };\n\n    const evidenceLabels = {\n        /* # Translators: title of a graphic showing results with evidence */\n        title: gettext(\"Results with evidence\"),\n\n        /* # Translators: a label in a graphic. Example: 31% have evidence */\n        filledLabel: gettext(\"have evidence\"),\n\n        /* # Translators: a label in a graphic. Example: 31% no evidence */\n        unfilledLabel: gettext(\"no evidence\"),\n\n        cta: gettext(\"Add missing evidence\"),\n\n        emptyLabel: gettext(\"No evidence\"),\n    };\n\n    // Do not display on pages with no indicators\n    if (indicators.length === 0) return null;\n\n    return <div className=\"status__gauges\">\n\n            <GaugeBand currentIndicatorFilter={currentIndicatorFilter}\n                       indicatorOnScopeMargin={indicatorOnScopeMargin}\n                       indicatorStore={indicatorStore}\n            />\n\n            <GaugeTank filterType={IndicatorFilterType.missingTarget}\n                       currentIndicatorFilter={currentIndicatorFilter}\n\n                       allIndicatorsLength={indicators.length}\n                       filteredIndicatorsLength={indicatorStore.getIndicatorsNeedingTargets.length}\n\n                       {...targetLabels}\n                       />\n\n            <GaugeTank filterType={IndicatorFilterType.missingResults}\n                       currentIndicatorFilter={currentIndicatorFilter}\n\n                       allIndicatorsLength={indicators.length}\n                       filteredIndicatorsLength={indicatorStore.getIndicatorsNeedingResults.length}\n\n                       {...resultsLabels}\n                       />\n\n            <GaugeTank filterType={IndicatorFilterType.missingEvidence}\n                       currentIndicatorFilter={currentIndicatorFilter}\n\n                       // The names below are misleading as this gauge is measuring *results*, not indicators\n                       allIndicatorsLength={indicatorStore.getTotalResultsCount}\n                       filteredIndicatorsLength={indicatorStore.getTotalResultsCount - indicatorStore.getTotalResultsWithEvidenceCount}\n\n                       {...evidenceLabels}\n                       />\n\n        </div>\n});\n","module.exports = jQuery;"],"mappings":";;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AARA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;;;;AAnCA;AACA;AAuCA;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;;;;AAvBA;AACA;AA2BA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAJA;AAKA;AACA;;;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AAAA;AAIA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAHA;AAIA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AADA;AAKA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAGA;;;;AAvGA;AACA;AA0GA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrQA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAPA;AAUA;AAAA;AAAA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAYA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AApBA;AACA;AAsBA;AACA;AArFA;AAAA;AAAA;AAoBA;AAAA;AAAA;AACA;AArBA;AAAA;AAAA;AAyBA;AAAA;AAAA;AACA;AA1BA;AAAA;AAAA;AA8BA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAmCA;AAAA;AAAA;AACA;AApCA;AAAA;AAAA;AAwCA;AAAA;AAAA;AACA;AAzCA;AAAA;AAAA;AA6CA;AAAA;AAAA;AACA;AA9CA;AAAA;AAAA;AAkDA;AAAA;AAAA;AACA;AAnDA;AAAA;AAAA;AAuDA;AAAA;AAAA;AACA;AAxDA;AAAA;AAAA;AAyFA;AAAA;AAAA;AACA;AA1FA;AAAA;AAAA;AA8FA;AAAA;AAAA;AACA;AA/FA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkGA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAeA;AACA;AAhBA;AAAA;AAAA;AAoBA;AACA;AArBA;AAAA;AAAA;AAyBA;AACA;AA1BA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAYA;AACA;AAbA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAsBA;AACA;AAvBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;;;;AAGA;AACA;AAEA;;;AAIA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAFA;AAKA;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5JA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAJA;AAKA;AACA;AAPA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAwBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAfA;AACA;AAkBA;AACA;AAEA;AACA;AAEA;AACA;AArDA;AAAA;AAAA;AAuDA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;AAAA;AAAA;AA2EA;AACA;AA5EA;AAAA;AAAA;AA8EA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlFA;AACA;AADA;AAAA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;AAGA;AACA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AAEA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;;;;AAnEA;AACA;AAuEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAMA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AADA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AAGA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AATA;AAUA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAKA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AATA;AAUA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAOA;;;;AAjLA;AACA;AAoLA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAZA;AACA;AAeA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAJA;AASA;AACA;AAEA;AACA;AAJA;AASA;AACA;AADA;AAIA;AACA;AALA;AAWA;;;;;;;;;;;ACpWA;;;;A","sourceRoot":""}