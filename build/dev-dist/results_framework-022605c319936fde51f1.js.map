{"version":3,"file":"results_framework-022605c319936fde51f1.js","sources":["webpack:///./js/pages/results_framework/components/leveltier_picker.js","webpack:///./js/pages/results_framework/components/level_cards.js","webpack:///./js/pages/results_framework/models.js","webpack:///./js/level_utils.js","webpack:///./js/pages/results_framework/index.js","webpack:///./js/api.js","webpack:///./js/eventbus.js","webpack:///./js/pages/results_framework/components/level_list.js"],"sourcesContent":["import React from 'react';\nimport { observer, inject } from \"mobx-react\";\nimport { toJS } from \"mobx\";\n\nimport Select from 'react-select';\n\n@inject('rootStore')\n@observer\nclass Picker extends React.Component {\n    handleChange = selectedPreset => {\n        this.props.rootStore.levelStore.changeTierSet(selectedPreset.value);\n    };\n\n    render() {\n        const options = Object.keys(this.props.rootStore.levelStore.tierPresets).map(val=>{\n            return {value:val, label:val};\n        });\n        const selectedOption = {value:this.props.rootStore.levelStore.chosenTierSet, label: this.props.rootStore.levelStore.chosenTierSetName};\n\n        return (\n            <div className=\"leveltier-picker__selectbox\">\n                Results framework template\n                <Select\n                    options={options}\n                    value={selectedOption}\n                    onChange={this.handleChange}\n                />\n            </div>\n        )\n    }\n}\n\nclass LevelTier extends React.Component {\n\n    render() {\n        return (\n            <div className={'leveltier leveltier--level-' + this.props.tierLevel}>{this.props.tierName} </div>\n    )}\n}\n\n@inject('rootStore')\n@observer\nclass LevelTierList extends React.Component{\n    render() {\n        return (\n            <div id=\"leveltier-list\" className=\"leveltier-list\">\n                {\n                    this.props.rootStore.levelStore.tierList.length > 0 ?\n                        this.props.rootStore.levelStore.tierList.map((tier, index) => {\n                            return <LevelTier key={index} tierName={tier}/>\n                        })\n                        : null\n                }\n\n\n            </div>\n        )\n    }\n}\n\nexport const LevelTierPicker = observer(function (props) {\n\n    return (\n        <div id=\"leveltier-picker\" className=\"leveltier-picker\">\n            <Picker />\n            <LevelTierList />\n        </div>\n    )\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\n\n\nlibrary.add(faCaretDown, faCaretRight);\n\nexport class LevelTitle extends React.Component {\n\n    render() {\n        return (\n            <h3 className={'level-title ' + this.props.classes}>\n                {this.props.tierName}\n                {/*if we don't check whether there is an ontology, there ill be an extra\n                space before the colon */}\n                {this.props.ontologyLabel ? \" \" + this.props.ontologyLabel : null}\n            </h3>\n        )\n\n    }\n}\n\n@inject('rootStore')\n@observer\nexport class LevelCardCollapsed extends React.Component {\n    constructor(props){\n        super(props);\n        this.deleteLevel = this.deleteLevel.bind(this);\n        this.editLevel = this.editLevel.bind(this);\n    }\n\n    deleteLevel() {\n        const currentElement =  document.getElementById(this.props.level.id);\n        console.log(\"You clicked delete level\")\n    }\n\n    editLevel = () => {\n        console.log(\"You clicked to edit level\")\n        this.props.rootStore.uiStore.addExpandedCard(this.props.level.id)\n    };\n\n    render(){\n        return (\n            <div className=\"level-card level-card--collapsed\" id={this.props.level.id}>\n                <div className=\"level-card--collapsed__name\">\n                    <strong>\n                        <LevelTitle\n                            tierName={this.props.levelProps.tierName}\n                            ontologyLabel={this.props.levelProps.ontologyLabel}\n                            classes=\"level-title--collapsed\"\n                        />\n                    </strong>\n                    <span>&nbsp;{this.props.level.name}</span>\n                </div>\n                <div className=\"level-card--collapsed__actions\">\n                    <div className=\"actions__top\" style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                        { this.props.levelProps.canDelete &&\n                            <button\n                                className=\"btn btn-sm btn-link btn-danger\"\n                                onClick={this.deleteLevel}\n                            >\n                                <i className=\"fas fa-trash-alt\"></i>&nbsp;{gettext(\"Delete\")}\n                            </button>\n                        }\n                        <button className=\"btn btn-sm btn-link btn-text\" onClick={this.editLevel}>\n                        <i className=\"fas fa-edit\"/>&nbsp;{gettext(\"Edit\")}</button>\n                    </div>\n                    <div className=\"actions__bottom\" style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                        <button className=\"btn btn-sm btn-link\">Indicators</button>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class LevelCardExpanded extends React.Component {\n    constructor(props){\n        super(props);\n        this.onFormChange = this.onFormChange.bind(this);\n        // this.saveLevel = this.saveLevel.bind(this);\n        // this.saveLevel = this.saveLevel.bind(this);\n    }\n\n    saveLevel = (e) => {\n        e.preventDefault()\n        console.log('event in save', e)\n        console.log(\"You clicked save level\")\n        console.log('edata', e.target)\n        this.props.rootStore.levelStore.saveLevelToDB(this.props.level.id)\n\n    }\n\n    saveAndCreateChild() {\n        console.log(\"You clicked to save and and a child level\")\n        this.props.rootStore.levelStore.saveAndAddChildLevel(this.props.level.id)\n    }\n\n    saveAndCreateSibling() {\n        console.log(\"You clicked to save and and a sibling level\")\n        this.props.rootStore.levelStore.saveAndAddChildLevel(this.props.level.id)\n    }\n\n    onFormChange(event){\n        this.props.level[event.target.name] = event.target.value;\n    }\n\n    render(){\n\n        return (\n            <div className=\"level-card level-card--expanded\" id={this.props.level.id}>\n                <div>\n                    <LevelTitle\n                        tierName={this.props.levelProps.tierName}\n                        ontologyLabel={this.props.levelProps.ontologyLabel}\n                        classes=\"level-title--expanded\"\n                    />\n\n                </div>\n                <form className=\"level-card--expanded__form\" onSubmit={this.saveLevel}>\n                    <textarea\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"level-name\"\n                        name=\"name\"\n                        value={this.props.level.name || \"\"}\n                        onChange={this.onFormChange}    />\n                    <label htmlFor=\"assumptions\">Assumptions</label>\n                    <textarea\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"level-assumptions\"\n                        name=\"assumptions\"\n                        value={this.props.level.assumptions || \"\"}\n                        onChange={this.onFormChange}/>\n                    <ButtonBar />\n                </form>\n            </div>\n\n        )\n    }\n}\n\n\nclass ButtonBar extends React.Component {\n    render() {\n        return (\n            <div className=\"button-bar\">\n                <LevelButton classes=\"btn-primary\" text={gettext(\"Save and close\")} />\n                <LevelButton classes=\"btn-primary\" text={gettext(\"Save and another\")} />\n                <LevelButton classes=\"btn-primary\" text={gettext(\"Save and link\")} />\n            </div>\n        )\n\n    }\n}\n\nclass LevelButton extends React.Component {\n\n    render() {\n        return (\n            <button type=\"submit\" className={this.props.classes + ' level-button btn'}>\n                {this.props.text}\n            </button>\n        )\n\n    }\n}\n","import { observable, computed, action, toJS, runInAction } from \"mobx\";\nimport { api } from \"../../api.js\";\nimport { trimOntology } from '../../level_utils'\n\nexport class RootStore {\n    constructor (levels, levelTiers, tierPresets) {\n        this.levelStore =  new LevelStore(levels, levelTiers, tierPresets, this);\n        this.uiStore = new UIStore(this);\n    }\n}\n\nexport class LevelStore {\n    @observable levels = [];\n    @observable chosenTierSet = [];\n    @observable chosenTierSetName = \"\";\n    tierPresets = {};\n\n    constructor(levels, levelTiers, tierPresets, rootStore) {\n        this.rootStore = rootStore;\n        this.levels = levels;\n        this.tierPresets = tierPresets;\n\n        // Set the stored tierset and its name, if they exist\n        if (levelTiers.length > 0) {\n            this.chosenTierSet = levelTiers;\n            this.chosenTierSetName = this.derive_preset_name(levelTiers, tierPresets);\n        }\n        // else {\n        //     this.selectedTierSetName = none;\n        //     this.chosenLevelTierSet = tierPresets[this.defaultPreset];\n        // }\n\n    }\n\n\n\n    @computed get tierList () {\n        if (!this.chosenTierSet && !this.chosenTierSetName){\n            return [];\n        }\n        else if (this.chosenTierSetName in this.tierPresets){\n            return this.tierPresets[this.chosenTierSetName];\n        }\n        else {\n            return this.chosenTierSet;\n        }\n    }\n\n    @computed get levelProperties () {\n        let levelProperties = {};\n        for (let level of this.levels) {\n            let properties = {};\n            properties['ontologyLabel'] = trimOntology(level.ontology);\n            properties['tierName'] = this.tierList[level.level_depth-1];\n            const childCount =  this.levels.filter(l => l.parent == level.id).length;\n            properties['canDelete'] = childCount==0;\n            levelProperties[level.id] = properties\n        }\n        return levelProperties\n    }\n\n    @action\n    changeTierSet(newTierSetName) {\n        this.chosenTierSetName = newTierSetName;\n    }\n\n    @action\n    saveAndAddSiblingLevel = (level_id) =>{\n        console.log('yay', level_id);\n        level = this.levels.find( l => l.id = level_id);\n        console.log(level)\n        this.saveLevelToDB(level_id);\n        this.createNewLevel(level_id);\n\n    }\n\n    @action\n    createNewLevelFromSibling = (sibling_id) => {\n        sibling = this.levels.find( l => l.id == sibling_id);\n    }\n\n    saveLevelToDB = (levelId) => {\n        console.log('this', levelId)\n        let levelData = toJS(this.levels).filter( l => l.id == levelId)[0];\n        if (levelId == \"new\") {\n            console.log('want to create a new level')\n        } else {\n            console.log('in update, id=', levelId)\n            api.put(`/level/${levelId}/`, levelData)\n                .then(response => {\n                    let targetLevel = this.levels.find(level => level.id == levelId);\n                    runInAction( () => {\n                        Object.assign(targetLevel, response.data)\n                    });\n                    this.rootStore.uiStore.removeExpandedCard(levelId)\n\n                })\n                .catch( error => {\n                    console.log(\"There was an error:\", error)\n                })\n        }\n        let targetLevelFinal = this.levels.find(level => level.id == levelId);\n        console.log('final target', toJS(targetLevelFinal))\n    };\n\n\n    derive_preset_name(levelTiers, tierPresets) {\n        if (!levelTiers){\n            return None;\n        }\n        const levelTiersArray = levelTiers.sort(t => t.tier_depth).map(t => t.name);\n        const levelTierStr = JSON.stringify(levelTiersArray);\n        for (let presetName in tierPresets){\n            if (levelTiers.length != tierPresets[presetName].length){\n                continue\n            }\n            const presetValues = JSON.stringify(tierPresets[presetName]);\n            if (levelTierStr == presetValues) {\n                return presetName;\n            }\n        }\n        return \"Custom\"\n    }\n}\n\n\nexport class UIStore {\n    @observable expandedCards = [];\n    @observable activeLevel = \"\";\n\n    constructor (rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @action\n    addExpandedCard = (levelId) => {\n        if (!this.expandedCards.includes(levelId)) {\n            this.expandedCards.push(levelId);\n        }\n    }\n\n    @action\n    removeExpandedCard = (levelId) => {\n        this.expandedCards = this.expandedCards.filter( level_id => level_id != levelId )\n    }\n}\n","\n// Returns a trimmed level ontology for display purposes\nexport function trimOntology(ontologyStr) {\n    let ontologyArray = ontologyStr.split(\".\");\n    return ontologyArray.slice(1).filter(i => i > 0).join(\".\")\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"mobx-react\"\nimport eventBus from '../../eventbus';\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\n\nimport {LevelListing} from './components/level_list';\nimport {LevelTierPicker} from './components/leveltier_picker';\nimport {RootStore} from './models';\n\n/*\n * Model/Store setup\n */\nconst {levels, levelTiers, tierPresets} = jsContext;\nconst rootStore = new RootStore(levels, levelTiers, tierPresets);\n\n/*\n * React components on page\n */\n\nReactDOM.render(\n    <Provider rootStore={rootStore}>\n        <React.Fragment>\n            <LevelTierPicker />\n            <LevelListing />\n        </React.Fragment>\n    </Provider>,\n    document.querySelector('#level-builder-react-component'));\n\n// ReactDOM.render(<LevelList rootStore={rootStore}\n//                                 uiStore={uiStore} />,\n//     document.querySelector('#level-list-react-component'));\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\nimport {LevelCardCollapsed, LevelCardExpanded} from \"./level_cards\";\n\nlibrary.add(faCaretDown, faCaretRight);\n\n@inject('rootStore')\n@observer\nclass LevelList extends React.Component {\n\n    render() {\n        let renderList = [];\n        // console.log('store=', toJS(this.props.rootStore.levels))\n        if (this.props.renderList == 'initial') {\n            renderList = this.props.rootStore.levelStore.levels.filter(level => level.parent == null).sort(elem => elem.customsort)\n        }\n        else{\n            renderList = this.props.renderList.sort(elem => elem.customsort);\n        }\n\n        return renderList.map((elem) => {\n            let card = '';\n            // console.log('expandedlist', this.props.uiStore.expandedCards)\n            if (this.props.rootStore.uiStore.expandedCards.indexOf(elem.id) !== -1) {\n                card =\n                    <LevelCardExpanded\n                        level={elem}\n                        levelProps={this.props.rootStore.levelStore.levelProperties[elem.id]}/>\n            }\n            else {\n                card =\n                    <LevelCardCollapsed\n                        level={elem}\n                        levelProps={this.props.rootStore.levelStore.levelProperties[elem.id]}/>\n            }\n\n            let children = this.props.rootStore.levelStore.levels.filter(level => level.parent == elem.id);\n            let childLevels = null;\n            if (children.length > 0){\n                childLevels =  <LevelList\n                    rootStore={this.props.rootStore}\n                    renderList={children}/>\n            }\n\n            return (\n                <div key={elem.id} className=\"leveltier--new\">\n                    {card}\n                    {childLevels}\n                </div>\n            )\n    })}\n}\n\nexport const LevelListing = observer(function (props) {\n    return (\n        <div id=\"level-list\" style={{flexGrow:\"2\"}}><LevelList renderList='initial' /></div>\n    )\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;;;;AArBA;AACA;AAuBA;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;;;;AALA;AACA;AASA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAOA;;;;AAfA;AAkBA;AAEA;AACA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAAA;AAQA;AAZA;AACA;AADA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AACA;AAAA;AACA;AACA;AAbA;AACA;AAHA;AAIA;AACA;AANA;AAAA;AAAA;AAQA;AACA;AACA;AAVA;AAAA;AAAA;AAkBA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAlDA;AACA;AADA;AAAA;AAwDA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAbA;AAEA;AACA;AALA;AAKA;AACA;AAPA;AAAA;AAAA;AAkBA;AACA;AACA;AApBA;AAAA;AAAA;AAuBA;AACA;AACA;AAzBA;AAAA;AAAA;AA4BA;AACA;AA7BA;AAAA;AAAA;AAiCA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AAhEA;AACA;AADA;AAAA;AACA;AAmEA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;;;;AAVA;AACA;AAYA;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAKA;;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtKA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAMA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAiEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAtFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAoDA;AACA;AArDA;AAAA;AAAA;AAgGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AA/GA;AAAA;AAAA;AA0BA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAnCA;AAAA;AAAA;AAqCA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AARA;AACA;AACA;AAAA;AAOA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AAhDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAyDA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AA/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAmEA;AAAA;AAAA;AACA;AApEA;AAAA;AAmHA;AAIA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAUA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAiBA;AAAA;AAAA;AACA;AAlBA;AAAA;;;;;;;;;;;;AC7HA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AAIA;AACA;AAAA;AASA;AACA;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAHA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAGA;AAEA;AAEA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AAAA;;;;AA1CA;AA6CA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;A","sourceRoot":""}