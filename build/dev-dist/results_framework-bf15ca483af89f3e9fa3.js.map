{"version":3,"file":"results_framework-bf15ca483af89f3e9fa3.js","sources":["webpack:///./js/pages/results_framework/components/leveltier_picker.js","webpack:///./js/pages/results_framework/components/level_cards.js","webpack:///./js/pages/results_framework/models.js","webpack:///./js/level_utils.js","webpack:///./js/pages/results_framework/index.js","webpack:///./js/api.js","webpack:///./js/eventbus.js","webpack:///./js/pages/results_framework/components/level_list.js"],"sourcesContent":["import React from 'react';\nimport { observer, inject } from \"mobx-react\";\nimport { toJS } from \"mobx\";\n\nimport Select from 'react-select';\n\n@inject('rootStore')\n@observer\nclass Picker extends React.Component {\n    handleChange = selectedPreset => {\n        this.props.rootStore.levelStore.changeTierSet(selectedPreset.value);\n    };\n\n    render() {\n        const options = Object.keys(this.props.rootStore.levelStore.tierPresets).map(val=>{\n            return {value:val, label:val};\n        });\n        const selectedOption = {value:this.props.rootStore.levelStore.chosenTierSet, label: this.props.rootStore.levelStore.chosenTierSetName};\n\n        return (\n            <div className=\"leveltier-picker__selectbox\">\n                Results framework template\n                <Select\n                    options={options}\n                    value={selectedOption}\n                    onChange={this.handleChange}\n                />\n            </div>\n        )\n    }\n}\n\nclass LevelTier extends React.Component {\n\n    render() {\n        return (\n            <div className={'leveltier leveltier--level-' + this.props.tierLevel}>{this.props.tierName} </div>\n    )}\n}\n\n@inject('rootStore')\n@observer\nclass LevelTierList extends React.Component{\n\n    render() {\n        let apply_button = null\n        if (this.props.rootStore.levelStore.levels.length == 0) {\n            apply_button =\n                <button\n                    className=\"leveltier-button btn btn-primary btn-block\"\n                    onClick={this.props.rootStore.levelStore.createFirstLevel}>\n                    {/* #Translators: this refers to an imperative verb on a button (\"Apply filters\")*/}\n                    {gettext(\"Apply\")}\n                </button>\n        }\n\n        return (\n            <React.Fragment>\n                <div id=\"leveltier-list\" className=\"leveltier-list\">\n                    {\n                        this.props.rootStore.levelStore.chosenTierSet.length > 0 ?\n                            this.props.rootStore.levelStore.chosenTierSet.map((tier, index) => {\n                                return <LevelTier key={index} tierLevel={index} tierName={tier}/>\n                            })\n                            : null\n                    }\n\n\n                </div>\n                {\n                    apply_button ?\n                        <div className=\"leveltier-list__actions\">\n                            {apply_button}\n                        </div>\n                    : null\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nexport const LevelTierPicker = observer(function (props) {\n\n    return (\n        <div id=\"leveltier-picker\" className=\"leveltier-picker\">\n            <Picker />\n            <LevelTierList />\n        </div>\n    )\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS, extendObservable } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\n\n\nlibrary.add(faCaretDown, faCaretRight);\n\nexport class LevelTitle extends React.Component {\n\n    render() {\n        return (\n            <h3 className={'level-title ' + this.props.classes}>\n                {this.props.tierName}\n                {/*if we don't check whether there is an ontology, there ill be an extra\n                space before the colon */}\n                {this.props.ontologyLabel ? \" \" + this.props.ontologyLabel : null}\n            </h3>\n        )\n\n    }\n}\n\n@inject('rootStore')\n@observer\nexport class LevelCardCollapsed extends React.Component {\n\n    deleteLevel = () => {\n        this.props.rootStore.levelStore.deleteLevelFromDB(this.props.level.id)\n    };\n\n    editLevel = () => {\n        this.props.rootStore.uiStore.addExpandedCard(this.props.level.id)\n    };\n\n    render(){\n\n        if (this.props.rootStore.uiStore.hasVisibleChildren.indexOf(this.props.level.parent) < 0 && this.props.level.parent != null){\n            return null;\n        }\n        const iCount = this.props.levelProps.indicators.length;\n        /* # Translators: This is a count of indicators associated with another object */\n        const indicatorCountText = interpolate(ngettext(\"%s indicator\", \"%s indicators\", iCount), [iCount]);\n        // const indicatorCountText = 3;\n        return (\n            <div className=\"level-card level-card--collapsed\" id={this.props.level.id}>\n                <div onClick={(e) => this.props.rootStore.uiStore.updateVisibleChildren(this.props.level.id)}>\n                    <FontAwesomeIcon icon={this.props.rootStore.uiStore.hasVisibleChildren.indexOf(this.props.level.id) >= 0 ? 'caret-down' : 'caret-right'} />\n                    <div className=\"level-card--collapsed__name\">\n                        <strong>\n                            <LevelTitle\n                                tierName={this.props.levelProps.tierName}\n                                ontologyLabel={this.props.levelProps.ontologyLabel}\n                                classes=\"level-title--collapsed\"\n                            />\n                        </strong>\n                        <span>&nbsp;{this.props.level.name}</span>\n                    </div>\n                </div>\n                <div className=\"level-card--collapsed__actions\">\n                    <div className=\"actions__top\" style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                        { this.props.levelProps.canDelete &&\n                            <button\n                                className=\"btn btn-sm btn-link btn-danger\"\n                                onClick={this.deleteLevel}\n                            >\n                                <i className=\"fas fa-trash-alt\"></i>&nbsp;{gettext(\"Delete\")}\n                            </button>\n                        }\n                        <button className=\"btn btn-sm btn-link btn-text\" onClick={this.editLevel}>\n                        <i className=\"fas fa-edit\"/>&nbsp;{gettext(\"Edit\")}</button>\n                    </div>\n                    <div className=\"actions__bottom\" style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                        <button className=\"btn btn-sm btn-link no-bold\">{indicatorCountText}</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class LevelCardExpanded extends React.Component {\n    constructor(props){\n        super(props);\n        this.submitType = \"saveOnly\";\n        extendObservable(this, {\n            name: props.level.name,\n            assumptions: props.level.assumptions,\n        })\n    }\n\n    /*\n    Using this allows us to use the same submit function for all three buttons.  Shame the function has to\n    be passed all the way down to the button to work.\n     */\n    updateSubmitType = (newType) => {\n        this.submitType = newType;\n    };\n\n    saveLevel = (event) => {\n        event.preventDefault();\n        const formData = new FormData(event.target);\n        this.props.rootStore.levelStore.saveLevelToDB(\n            this.submitType,\n            this.props.level.id,\n            {name: this.name, assumptions: this.assumptions}\n        )\n\n    };\n\n    cancelEdit = () => {\n        this.props.rootStore.levelStore.cancelEdit(this.props.level.id)\n    };\n\n    onFormChange = (event) => {\n        event.preventDefault();\n        this[event.target.name] = event.target.value;\n    };\n\n    render(){\n        return (\n            <div className=\"level-card level-card--expanded\" id={this.props.level.id}>\n                <div>\n                    <LevelTitle\n                        tierName={this.props.levelProps.tierName}\n                        ontologyLabel={this.props.levelProps.ontologyLabel}\n                        classes=\"level-title--expanded\"\n                    />\n\n                </div>\n                <form className=\"level-card--expanded__form\" onSubmit={this.saveLevel}>\n                    <textarea\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"level-name\"\n                        name=\"name\"\n                        value={this.name || \"\"}\n                        autoComplete=\"off\"\n                        onChange={this.onFormChange}    />\n                    <label htmlFor=\"assumptions\">Assumptions</label>\n                    <textarea\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"level-assumptions\"\n                        name=\"assumptions\"\n                        autoComplete=\"off\"\n                        value={this.assumptions || \"\"}\n                        onChange={this.onFormChange}/>\n                    <ButtonBar\n                        level={this.props.level}\n                        levelProps={this.props.levelProps}\n                        isActive={this.props.rootStore.uiStore.expandedCards[0] == this.props.level.id ? true : false}\n                        submitFunc={this.updateSubmitType}\n                        cancelFunc={this.cancelEdit}\n                        tierCount={this.props.rootStore.levelStore.chosenTierSet.length}/>\n                </form>\n            </div>\n\n        )\n    }\n}\n\n\n@inject('rootStore')\nclass ButtonBar extends React.Component {\n    render() {\n        let disabledText = this.props.isActive ? \"\" : \"disabled\";\n\n        // Build the button text with the right sibling level name, then build the button.\n        let addAnotherButton = null;\n        if (this.props.level.parent != null && this.props.level.parent != \"root\") {\n            {/* # Translators: On a button, with a tiered set of objects, save current object and add another one in the same tier, e.g. \"Save and add another Outcome\" when the user is editing an Outcome */}\n            const buttonText = interpolate(gettext(\"Save and add another %s\"), [this.props.levelProps.tierName])\n            addAnotherButton = <LevelButton disabledText={disabledText} classes=\"btn-primary\" text={buttonText} submitType=\"saveAndAddSibling\"  submitFunc={this.props.submitFunc} />\n        }\n\n        // Build the button text with the right child level name, then build the button.\n        let addAndLinkButton = null;\n        const tierCount = this.props.rootStore.levelStore.chosenTierSet.length;\n        if (this.props.level.level_depth < tierCount) {\n            {/* # Translators: On a button, with a tiered set of objects, save current object and add another one in the next lower tier, e.g. \"Save and add another Activity\" when the user is editing a Goal */}\n            const buttonText = interpolate(gettext(\"Save and link %s\"), [this.props.levelProps.childTierName])\n            addAndLinkButton = <LevelButton disabledText={disabledText} classes=\"btn-primary\" text={buttonText} submitType=\"saveAndAddChild\" submitFunc={this.props.submitFunc} />\n        }\n        return (\n            <div className=\"button-bar\">\n                <LevelButton disabledText={disabledText} classes=\"btn-primary\" text={gettext(\"Save and close\")} submitType=\"saveOnly\" submitFunc={this.props.submitFunc} />\n                {addAnotherButton}\n                {addAndLinkButton}\n                <LevelButton classes=\"btn-reset\" text={gettext(\"Cancel\")} submitType=\"cancel\" submitFunc={this.props.cancelFunc} />\n            </div>\n        )\n\n    }\n}\n\nclass LevelButton extends React.Component {\n\n    render() {\n        const buttonType = this.props.submitType == \"cancel\" ? \"button\" : \"submit\";\n        return (\n            <button\n                disabled={this.props.disabledText}\n                type={buttonType}\n                className={this.props.classes + ' level-button btn btn-sm'}\n                onClick={() =>this.props.submitFunc(this.props.submitType)}>\n                {this.props.text}\n            </button>\n        )\n\n    }\n}\n","import { observable, computed, action, toJS, runInAction } from \"mobx\";\nimport { trimOntology } from '../../level_utils'\nimport { api } from \"../../api.js\"\n\nexport class RootStore {\n    constructor (program_id, levels, indicators, levelTiers, tierPresets) {\n        this.levelStore =  new LevelStore(program_id, levels, indicators, levelTiers, tierPresets, this);\n        this.uiStore = new UIStore(this);\n    }\n}\n\nexport class LevelStore {\n    @observable levels = [];\n    @observable indicators = []\n    @observable chosenTierSet = [];\n    @observable chosenTierSetName = \"\";\n    tierPresets = {};\n    defaultPreset = \"Mercy Corps standard\";\n    program_id = \"\"\n\n    constructor(program_id, levels, indicators, levelTiers, tierPresets, rootStore) {\n        this.rootStore = rootStore;\n        this.levels = levels;\n        this.indicators = indicators;\n        this.tierPresets = tierPresets;\n        this.program_id = program_id;\n\n        // Set the stored tierset and its name, if they exist.  Use the default if they don't.\n        if (levelTiers.length > 0) {\n            this.chosenTierSet = levelTiers.map( t => t.name);\n            this.chosenTierSetName = this.derive_preset_name(levelTiers, tierPresets);\n        }\n        else {\n            this.chosenTierSetName = this.defaultPreset;\n            this.chosenTierSet = this.tierPresets[this.defaultPreset]\n        }\n    }\n\n    @computed get sortedLevels () {\n        return this.levels.slice().sort((a, b) => {a.level_depth - b.level_depth || a.customsort - b.customsort})\n    }\n\n    @computed get levelProperties () {\n        let levelProperties = {};\n        this.indicators.forEach( i => console.log(toJS(i)))\n        for (let level of this.levels) {\n            let properties = {};\n            properties['indicators'] = this.getLevelIndicators(level.id)\n            properties['ontologyLabel'] = this.buildOntology(level.id);\n            properties['tierName'] = this.chosenTierSet[level.level_depth-1];\n            properties['childTierName'] = null;\n            if (this.chosenTierSet.length > level.level_depth) {\n                properties['childTierName'] = this.chosenTierSet[level.level_depth];\n            }\n            const childCount =  this.levels.filter(l => l.parent == level.id).length;\n            const indicatorCount = this.indicators.filter( i => i.level == level.id);\n            properties['canDelete'] = childCount==0 && indicatorCount==0;\n            levelProperties[level.id] = properties\n        }\n        return levelProperties\n    }\n\n    @action\n    changeTierSet(newTierSetName) {\n        this.chosenTierSetName = newTierSetName;\n        this.chosenTierSet = this.tierPresets[newTierSetName]\n    }\n\n    @action\n    cancelEdit = levelId => {\n        if (levelId == \"new\") {\n            const targetLevel = this.levels.find(l => l.id == levelId);\n\n            // First update any customsort values that were modified when this card was created\n            let siblingsToReorder = this.levels.filter(l => {\n                return l.customsort > targetLevel.customsort && l.parent == targetLevel.parent;\n            });\n            siblingsToReorder.forEach(sib => sib.customsort -= 1);\n\n            // Now remove the new card\n            this.levels.replace(this.levels.filter((element) => element.id != \"new\"));\n        }\n        this.rootStore.uiStore.removeExpandedCard(levelId)\n\n    };\n\n    @action\n    createNewLevelFromSibling = (siblingId) => {\n        // Copy sibling data for the new level and then clear some of it out\n        let sibling = toJS(this.levels.find( l => l.id == siblingId));\n        let newLevel = Object.assign({}, sibling);\n        newLevel.customsort += 1;\n        newLevel.id = \"new\";\n        newLevel.name = \"\";\n        newLevel.assumptions = \"\";\n\n        // bump the customsort field for siblings that come after the inserted Level\n        let siblingsToReorder = this.levels.filter( l => {\n            return sibling && l.customsort > sibling.customsort && l.parent == sibling.parent;\n        });\n        siblingsToReorder.forEach( sib => sib.customsort+=1);\n        // add new Level to the various Store components\n        this.rootStore.uiStore.expandedCards.push(\"new\");\n        this.rootStore.uiStore.activeCard = \"new\";\n        this.levels.push(newLevel);\n    };\n\n    @action\n    createNewLevelFromParent = (parentId) => {\n        // Copy data for the new level and then clear some of it out\n        let parent = toJS(this.levels.find( l => l.id == parentId));\n        let newLevel = {\n            id:\"new\",\n            customsort: 1,\n            name: \"\",\n            assumptions: \"\",\n            parent: parentId,\n            level_depth: parent.level_depth + 1,\n            program: this.program_id\n        };\n\n        // bump the customsort field for siblings that come after the inserted Level\n        let siblingsToReorder = this.levels.filter( l => l.parent == parentId);\n\n        siblingsToReorder.forEach( sib => sib.customsort+=1);\n        // add new Level to the various Store components\n        this.rootStore.uiStore.expandedCards.push(\"new\");\n        this.rootStore.uiStore.activeCard = \"new\";\n        this.levels.push(newLevel);\n\n    };\n\n\n    @action\n    createFirstLevel = () => {\n        // Using \"root\" for parent id so the Django view can distinguish between top tier level and 2nd tier level\n        let newLevel = {\n            id: \"new\",\n            program: this.program_id,\n            name: \"\",\n            assumptions: \"\",\n            customsort: 1,\n            level_depth: 1,\n            parent: \"root\"\n        };\n        this.levels.push(newLevel);\n        this.rootStore.uiStore.expandedCards.push(\"new\")\n    }\n\n    saveLevelTiersToDB = () => {\n        const tier_data = {program_id: this.program_id, tiers: this.chosenTierSet};\n        api.post(`/save_leveltiers/`, tier_data)\n            .then(response => {\n                console.log(\"Level Tiers Saved!\")\n            })\n            .catch(error => console.log('error', error))\n    }\n\n    deleteLevelFromDB = (levelId) => {\n        const level_data = {level: levelId};\n        api.delete(`/level/${levelId}`)\n            .then(response => {\n                this.levels.replace(response.data)\n                if (this.levels.length == 0){\n                    this.createFirstLevel()\n                }\n            })\n            .catch(error => console.log('error', error))\n    }\n\n\n    // TODO: better error handling for API\n    saveLevelToDB = (submitType, levelId, formData) => {\n        let targetLevel = this.levels.find(level => level.id == levelId);\n        let levelToSave = Object.assign(toJS(targetLevel), formData);\n        if (levelId == \"new\") {\n            if (levelToSave.parent == \"root\") {\n                this.saveLevelTiersToDB()\n            }\n            delete levelToSave.id;\n\n            api.post(`/insert_new_level/`, levelToSave)\n                .then(response => {\n                    runInAction(() => {\n                        this.levels.replace(response.data['all_data'])\n                    });\n                    const newId = response.data[\"new_level\"][\"id\"];\n                    if (submitType == \"saveAndAddSibling\"){\n                        this.createNewLevelFromSibling(newId);\n                    }\n                    else if (submitType == \"saveAndAddChild\"){\n                        this.createNewLevelFromParent(newId);\n                    }\n                })\n                .catch(error => console.log('error', error))\n\n        } else {\n            api.put(`/level/${levelId}/`, levelToSave)\n                .then(response => {\n                    runInAction( () => {\n                        Object.assign(targetLevel, response.data);\n                    });\n                    this.rootStore.uiStore.removeExpandedCard(levelId);\n                    if (submitType == \"saveAndAddSibling\"){\n                        this.createNewLevelFromSibling(levelId);\n                    }\n                    else if (submitType == \"saveAndAddChild\"){\n                        this.createNewLevelFromParent(levelId);\n                    }\n\n                })\n                .catch( error => {\n                    console.log(\"There was an error:\", error);\n                })\n        }\n\n    };\n\n    derive_preset_name(levelTiers, tierPresets) {\n        if (!levelTiers){\n            return None;\n        }\n        const levelTiersArray = levelTiers.sort(t => t.tier_depth).map(t => t.name);\n        const levelTierStr = JSON.stringify(levelTiersArray);\n        for (let presetName in tierPresets){\n            if (levelTiers.length != tierPresets[presetName].length){\n                continue\n            }\n            const presetValues = JSON.stringify(tierPresets[presetName]);\n            if (levelTierStr == presetValues) {\n                return presetName;\n            }\n        }\n        return \"Custom\";\n    }\n\n\n    buildOntology = (levelId, ontologyArray = []) => {\n        let level = toJS(this.levels.find( l => l.id == levelId));\n        /*  If there is no parent (saved top tier level) or the parent is \"root\" (unsaved top tier level)\n            then we should return with adding to the ontology because there is no ontology entry for the top tier\n         */\n        if (level.parent && level.parent != \"root\") {\n            ontologyArray.unshift(level.customsort);\n            return this.buildOntology(level.parent, ontologyArray);\n        }\n        else {\n            return ontologyArray.join(\".\");\n        }\n    }\n\n    getLevelIndicators = (levelId) => {\n        return this.indicators.filter( i => i.level == levelId);\n    }\n\n}\n\n\nexport class UIStore {\n    @observable expandedCards = [];\n    @observable hasVisibleChildren = [];\n\n    constructor (rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @computed get tierLockStatus () {\n        let notNewLevels = this.rootStore.levelStore.levels.filter( l => l.id != \"new\");\n        if  (notNewLevels.length > 0) {\n            return \"locked\"\n        }\n        else if (this.rootStore.levelStore.levels.length == 1){\n            return \"primed\"\n        }\n        return null;\n    }\n\n    @action\n    addExpandedCard = (levelId) => {\n        if (!this.expandedCards.includes(levelId)) {\n            this.expandedCards.push(levelId);\n        }\n    }\n\n    @action\n    removeExpandedCard = (levelId) => {\n        this.expandedCards = this.expandedCards.filter( level_id => level_id != levelId );\n    };\n\n    @action\n    updateVisibleChildren = (levelId) => {\n        if (this.hasVisibleChildren.indexOf(levelId) >= 0) {\n            this.hasVisibleChildren = this.hasVisibleChildren.filter( level_id => level_id != levelId );\n        }\n        else {\n            this.hasVisibleChildren.push(levelId);\n        }\n    }\n}\n","\n// Returns a trimmed level ontology for display purposes\nexport function trimOntology(ontologyStr) {\n    let ontologyArray = ontologyStr.split(\".\");\n    return ontologyArray.slice(1).filter(i => i > 0).join(\".\")\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"mobx-react\"\nimport eventBus from '../../eventbus';\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\n\nimport {LevelListPanel} from './components/level_list';\nimport {LevelTierPicker} from './components/leveltier_picker';\nimport {RootStore} from './models';\n\n/*\n * Model/Store setup\n */\nconst {program_id, levels, levelTiers, tierPresets} = jsContext;\nconst rootStore = new RootStore(program_id, levels, levelTiers, tierPresets);\n\n/*\n * React components on page\n */\n\nReactDOM.render(\n    <Provider rootStore={rootStore}>\n        <React.Fragment>\n            <LevelTierPicker />\n            <LevelListPanel />\n        </React.Fragment>\n    </Provider>,\n    document.querySelector('#level-builder-react-component'));\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\nimport {LevelCardCollapsed, LevelCardExpanded} from \"./level_cards\";\n\nlibrary.add(faCaretDown, faCaretRight);\n\n@inject('rootStore')\n@observer\nclass LevelList extends React.Component {\n\n    render() {\n        let renderList = [];\n        if (this.props.renderList == 'initial') {\n            renderList = this.props.rootStore.levelStore.sortedLevels\n                .filter(level => ['root', null].indexOf(level.parent) != -1)\n        }\n\n        else{\n            renderList = this.props.renderList.sort((a, b) => a.customsort - b.customsort);\n        }\n\n        return renderList.map((elem) => {\n            let card = '';\n            if (this.props.rootStore.uiStore.expandedCards.indexOf(elem.id) !== -1) {\n                card =\n                    <LevelCardExpanded\n                        level={elem}\n                        levelProps={this.props.rootStore.levelStore.levelProperties[elem.id]}/>\n            }\n            else {\n                card =\n                    <LevelCardCollapsed\n                        level={elem}\n                        levelProps={this.props.rootStore.levelStore.levelProperties[elem.id]}/>\n            }\n\n            let children = this.props.rootStore.levelStore.sortedLevels.filter(level => level.parent == elem.id);\n            let childLevels = null;\n            if (children.length > 0){\n                childLevels =  <LevelList\n                    rootStore={this.props.rootStore}\n                    renderList={children}/>\n            }\n\n            return (\n                <div key={elem.id} className=\"leveltier--new\">\n                    {card}\n                    {childLevels}\n                </div>\n            )\n    })}\n}\n\n@inject('rootStore')\n@observer\nexport class LevelListPanel  extends React.Component {\n\n    render() {\n        if (this.props.rootStore.levelStore.levels.length == 0) {\n            return (\n                <div className=\"level-list-panel\">\n                    <div className=\"level-list-panel__dingbat\">\n                        <i className=\"fas fa-sitemap\"></i>\n                    </div>\n                    <div className=\"level-list-panel__text text-large\">\n                        <strong className=\"text-danger\">Choose your results framework template carefully!</strong> Once you begin building your framework, it will not be possible to change templates without first deleting all saved levels.\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div id=\"level-list\" style={{flexGrow: \"2\"}}><LevelList renderList='initial'/></div>\n            )\n        }\n    }\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;;;;AArBA;AACA;AAuBA;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;;;;AALA;AACA;AASA;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAOA;;;;AApCA;AAuCA;AAEA;AACA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAAA;AAQA;AAZA;AACA;AADA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AALA;AAOA;AACA;AACA;AATA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AASA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AArDA;AACA;AADA;AAAA;AA2DA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAGA;AACA;AA3BA;AA6BA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AAlCA;AACA;AACA;AACA;AAFA;AAHA;AAOA;AAEA;;;;;;AAVA;AAAA;AAAA;AAuCA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AA9EA;AACA;AADA;AAAA;AAmFA;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA7BA;AACA;AA+BA;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;;;;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3MA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AASA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAkIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAzIA;AA2IA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AArJA;AAyJA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;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","sourceRoot":""}