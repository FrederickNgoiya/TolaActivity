{"version":3,"file":"results_framework-ca8ed0cd3d6ca600de7c.js","sources":["webpack:///./js/pages/results_framework/components/leveltier_picker.js","webpack:///./js/pages/results_framework/components/level_cards.js","webpack:///./js/pages/results_framework/models.js","webpack:///./js/level_utils.js","webpack:///./js/pages/results_framework/index.js","webpack:///./js/eventbus.js","webpack:///./js/pages/results_framework/components/level_list.js"],"sourcesContent":["import React from 'react';\nimport { observer, inject } from \"mobx-react\";\nimport { toJS } from \"mobx\";\n\nimport Select from 'react-select';\n\n@inject('rootStore')\n@observer\nclass Picker extends React.Component {\n    handleChange = selectedPreset => {\n        this.props.rootStore.changeTierSet(selectedPreset.value);\n    };\n\n    render() {\n        const options = Object.keys(this.props.rootStore.tierPresets).map(val=>{\n            return {value:val, label:val};\n        });\n        const selectedOption = {value:this.props.rootStore.chosenTierSet, label: this.props.rootStore.chosenTierSetName};\n\n        return (\n            <div className=\"leveltier-picker__selectbox\">\n                Results framework template\n                <Select\n                    options={options}\n                    value={selectedOption}\n                    onChange={this.handleChange}\n                />\n            </div>\n        )\n    }\n}\n\nclass LevelTier extends React.Component {\n\n    render() {\n        return (\n            <div className=\"leveltier\"> {this.props.tierName} </div>\n    )}\n}\n\n@inject('rootStore')\n@observer\nclass LevelTierList extends React.Component{\n    render() {\n        return (\n            <div id=\"leveltier-list\" className=\"leveltier-list\">\n                {\n                    this.props.rootStore.tierList.length > 0 ?\n                        this.props.rootStore.tierList.map((tier, index) => {\n                            return <LevelTier key={index} tierName={tier}/>\n                        })\n                        : null\n                }\n\n\n            </div>\n        )\n    }\n}\n\nexport const LevelTierPicker = observer(function (props) {\n\n    return (\n        <div id=\"leveltier-picker\" className=\"leveltier-picker\">\n            <Picker />\n            <LevelTierList />\n        </div>\n    )\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\n\n\nlibrary.add(faCaretDown, faCaretRight);\n\nexport class LevelTitle extends React.Component {\n\n    render() {\n        return (\n            <span className={'level-title ' + this.props.classes}>\n                {this.props.tierName}\n                {/*if we don't check whether there is an ontology, there ill be an extra\n                space before the colon */}\n                {this.props.ontologyLabel ? \" \" + this.props.ontologyLabel : null}:\n            </span>\n        )\n\n    }\n}\n\n@inject('rootStore')\n@observer\nexport class LevelCardCollapsed extends React.Component {\n    constructor(props){\n        super(props);\n        this.deleteLevel = this.deleteLevel.bind(this);\n        this.editLevel = this.editLevel.bind(this);\n    }\n\n    deleteLevel() {\n        const currentElement =  document.getElementById(this.props.level.id);\n        console.log(\"You clicked delete level\")\n    }\n\n    editLevel() {\n        const currentElement =  document.getElementById(this.props.level.id);\n        console.log(\"You clicked to edit level\")\n    }\n\n    render(){\n        return (\n            <div className=\"level-card--collapsed\" id={this.props.level.id}>\n                <div className=\"level-card--collapsed__name\">\n                    <strong>\n                        <LevelTitle\n                            tierName={this.props.levelProps.tierName}\n                            ontologyLabel={this.props.levelProps.ontologyLabel}\n                            classes=\"level-title--collapsed\"\n                        />\n                    </strong>\n                    <span>&nbsp;{this.props.level.name}</span>\n                </div>\n                <div className=\"level-card--collapsed__actions\">\n                    <div className=\"actions__top\" style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                        { this.props.levelProps.canDelete &&\n                            <button\n                                className=\"btn btn-sm btn-link btn-danger\"\n                                onClick={this.deleteLevel}\n                            >\n                                <i className=\"fas fa-trash-alt\"></i>&nbsp;{gettext(\"Delete\")}\n                            </button>\n                        }\n                        <button className=\"btn btn-sm btn-link btn-text\" onClick={this.editLevel}>\n                        <i className=\"fas fa-edit\"/>&nbsp;{gettext(\"Edit\")}</button>\n                    </div>\n                    <div className=\"actions__bottom\" style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                        <button className=\"btn btn-sm btn-link\">Indicators</button>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class LevelCardExpanded extends React.Component {\n    constructor(props){\n        super(props);\n        this.onFormChange = this.onFormChange.bind(this);\n        // this.saveLevel = this.saveLevel.bind(this);\n        // this.saveLevel = this.saveLevel.bind(this);\n    }\n\n    saveLevel() {\n        const currentElement =  document.getElementById(this.props.level.id);\n        console.log(\"You clicked delete level\")\n    }\n\n    saveAndCreateChild() {\n        const currentElement =  document.getElementById(this.props.level.id);\n        console.log(\"You clicked to save and and a child level\")\n    }\n\n    saveAndCreateSibling() {\n        const currentElement =  document.getElementById(this.props.level.id);\n        console.log(\"You clicked to save and and a sibling level\")\n    }\n\n    onFormChange(event){\n        this.props.level[event.target.name] = event.target.value;\n    }\n\n    render(){\n\n        return (\n            <div className=\"level-card--expanded\" id={this.props.level.id}>\n                <div>\n                    <LevelTitle\n                        tierName={this.props.levelProps.tierName}\n                        ontologyLabel={this.props.levelProps.ontologyLabel}\n                        classes=\"level-title--expanded\"\n                    />\n\n                </div>\n                <form className=\"level-card--expanded__form\">\n                    <input\n                        type=\"text\"\n                        id=\"level-name\"\n                        name=\"name\"\n                        value={this.props.level.name || \"\"}\n                        onChange={this.onFormChange}    />\n                    <label htmlFor=\"assumptions\">Assumptions</label>\n                    <input\n                        type=\"text\"\n                        id=\"level-assumptions\"\n                        name=\"assumptions\"\n                        value={this.props.level.assumptions || \"\"}\n                        onChange={this.onFormChange}/>\n                    <ButtonBar />\n                </form>\n            </div>\n\n        )\n    }\n}\n\n\nclass ButtonBar extends React.Component {\n    render() {\n        return (\n            <div className=\"button-bar\">\n                <LevelButton classes=\"\" text=\"Save and close\" />\n                <LevelButton classes=\"\" text=\"Save and another\" />\n                <LevelButton classes=\"\" text=\"Save and link\" />\n            </div>\n        )\n\n    }\n}\n\nclass LevelButton extends React.Component {\n\n    render() {\n        return (\n            <button className={this.props.classes + ' level-button'}>\n                {this.props.text}\n            </button>\n        )\n\n    }\n}\n","import { observable, computed, action, toJS } from \"mobx\";\n\nimport { trimOntology } from '../../level_utils'\n\nexport class RFPageStore {\n    @observable levels = [];\n    @observable chosenTierSet = [];\n    @observable chosenTierSetName = \"\";\n    tierPresets = {};\n\n    constructor(levels, levelTiers, tierPresets) {\n        // Set and sort levels\n        this.levels = levels.sort( function (a, b) {\n            if (a.ontology < b.ontology) {\n                return -1;\n            }\n            if (b.ontology < a.ontology) {\n                return 1;\n            }\n            return 0\n        });\n\n        // Set the stored tierset and its name, if they exist\n        if (levelTiers.length > 0) {\n            this.chosenTierSet = levelTiers;\n            this.chosenTierSetName = this.derive_preset_name(levelTiers, tierPresets);\n\n        }\n        // else {\n        //     this.selectedTierSetName = none;\n        //     this.chosenLevelTierSet = tierPresets[this.defaultPreset];\n        // }\n        this.tierPresets = tierPresets;\n\n        this.addChildLevel = this.addChildLevel.bind(this);\n    }\n\n\n\n    @computed get tierList () {\n        if (!this.chosenTierSet && !this.chosenTierSetName){\n            return [];\n        }\n        else if (this.chosenTierSetName in this.tierPresets){\n            return this.tierPresets[this.chosenTierSetName];\n        }\n        else {\n            return this.chosenTierSet;\n        }\n    }\n\n    @computed get levelProperties () {\n        let levelProperties = {};\n        for (let level of this.levels) {\n            let properties = {};\n            properties['ontologyLabel'] = trimOntology(level.ontology);\n            properties['tierName'] = this.tierList[level.get_level_depth-1];\n            const childCount =  this.levels.filter(l => l.parent == level.id).length;\n            properties['canDelete'] = childCount==0;\n            levelProperties[level.id] = properties\n        }\n        console.log(\"levelTierNameMap\", toJS(levelProperties))\n        return levelProperties\n    }\n\n    @action\n    changeTierSet(newTierSetName) {\n        this.chosenTierSetName = newTierSetName;\n    }\n\n    @action\n    addChildLevel(level_id){\n        console.log('yay', level_id)\n    }\n\n    derive_preset_name(levelTiers, tierPresets) {\n        if (!levelTiers){\n            return None;\n        }\n        const levelTiersArray = levelTiers.sort(t => t.tier_depth).map(t => t.name);\n        const levelTierStr = JSON.stringify(levelTiersArray);\n        for (let presetName in tierPresets){\n            if (levelTiers.length != tierPresets[presetName].length){\n                continue\n            }\n            const presetValues = JSON.stringify(tierPresets[presetName]);\n            if (levelTierStr == presetValues) {\n                return presetName;\n            }\n        }\n        return \"Custom\"\n    }\n}\n","/*\n  Some nice helper functions to help with date parsing and localization\n\n  In the future it may make sense to use moment.js, luxon, or date-fns,\n  but for now, just get by with the native browser APIs and save some bytes.\n\n  Confusingly, native Date() objects are actually date/time objects.\n\n  Surprisingly, the Django i18n/l10n JS tools do not provide access to the language code\n  of the current language in use.\n */\n\n// Returns a trimmed level ontology for display purposes\nexport function trimOntology(ontologyStr) {\n    let ontologyArray = ontologyStr.split(\".\");\n    return ontologyArray.slice(1).filter(i => i > 0).join(\".\")\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"mobx-react\"\nimport eventBus from '../../eventbus';\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\n\nimport {LevelListing} from './components/level_list';\nimport {LevelTierPicker} from './components/leveltier_picker';\nimport {RFPageStore, RFPageUIStore} from './models';\n\n/*\n * Model/Store setup\n */\nconst {levels, levelTiers, tierPresets} = jsContext;\nconst rootStore = new RFPageStore(levels, levelTiers, tierPresets);\n\n\n/*\n * React components on page\n */\n\nReactDOM.render(\n    <Provider rootStore={rootStore}>\n        <React.Fragment>\n            <LevelTierPicker />\n            <LevelListing />\n        </React.Fragment>\n    </Provider>,\n    document.querySelector('#level-builder-react-component'));\n\n// ReactDOM.render(<LevelList rootStore={rootStore}\n//                                 uiStore={uiStore} />,\n//     document.querySelector('#level-list-react-component'));\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\nimport {LevelCardCollapsed, LevelCardExpanded} from \"./level_cards\";\n\nlibrary.add(faCaretDown, faCaretRight);\n\n@inject('rootStore')\n@observer\nclass LevelList extends React.Component {\n\n    render() {\n        let renderList = [];\n        if (this.props.renderList == 'initial') {\n            renderList = this.props.rootStore.levels.filter(level => level.parent == null).sort(elem => elem.customsort)\n        }\n        else{\n            renderList = this.props.renderList.sort(elem => elem.customsort);\n        }\n\n\n\n        let returnVals = renderList.map((elem) => {\n            let children = this.props.rootStore.levels.filter(level => level.parent == elem.id);\n            return (\n                <div key={elem.id} className=\"leveltier--new\">\n                    <LevelCardExpanded\n                        level={elem}\n                        levelProps={this.props.rootStore.levelProperties[elem.id]} />\n                    {children.length > 0 &&\n                        <LevelList\n                            rootStore={this.props.rootStore}\n                            renderList={children} />\n                    }\n                </div>\n            )\n        });\n\n        return returnVals\n    }\n}\n\nexport const LevelListing = observer(function (props) {\n    return (\n        <div id=\"level-list\" style={{flexGrow:\"2\"}}><LevelList renderList='initial' /></div>\n    )\n});\n"],"mappings":"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","sourceRoot":""}