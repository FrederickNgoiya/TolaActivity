{"version":3,"file":"results_framework-e632fc23b0a7efc7934d.js","sources":["webpack:///./js/pages/results_framework/components/leveltier_picker.js","webpack:///./js/pages/results_framework/components/level_cards.js","webpack:///./js/pages/results_framework/models.js","webpack:///./js/level_utils.js","webpack:///./js/pages/results_framework/index.js","webpack:///./js/api.js","webpack:///./js/eventbus.js","webpack:///./js/pages/results_framework/components/level_list.js"],"sourcesContent":["import React from 'react';\nimport { observer, inject } from \"mobx-react\";\nimport { toJS } from \"mobx\";\n\nimport Select from 'react-select';\n\n@inject('rootStore')\n@observer\nclass Picker extends React.Component {\n    handleChange = selectedTemplate => {\n        this.props.rootStore.levelStore.changeTierSet(selectedTemplate.value);\n    };\n\n    componentDidUpdate() {\n        // Enable popovers after update (they break otherwise)\n        $('*[data-toggle=\"popover\"]').popover({\n            html: true\n        });\n    }\n\n    render() {\n        let helpIcon = null;\n        if (this.props.rootStore.uiStore.tierLockStatus == \"locked\"){\n\n            helpIcon = <a href=\"#\"\n                tabIndex=\"0\"\n                data-toggle=\"popover\"\n                data-trigger=\"focus\"\n                data-html=\"true\"\n                data-content={gettext('<span class=\"text-danger\"><strong>The results framework template cannot be changed after levels are saved.</strong></span> To change templates, all saved levels first must be deleted.  A level can be deleted when it has no sub-levels and no linked indicators.')}>\n                <i className=\"far fa-question-circle\"></i></a>\n        }\n        else if (this.props.rootStore.uiStore.tierLockStatus == \"primed\"){\n            helpIcon = <a href=\"#\"\n                tabIndex=\"0\"\n                data-toggle=\"popover\"\n                data-trigger=\"focus\"\n                data-html=\"true\"\n                data-content={gettext('<span class=\"text-danger\"><strong>Choose your results framework template carefully!</strong></span> Once you begin building your framework, it will not be possible to change templates without first deleting all saved levels.')}>\n                <i className=\"far fa-question-circle\"></i></a>\n        }\n\n\n        const tierTemplates = this.props.rootStore.levelStore.tierTemplates;\n\n        const options = Object.keys(tierTemplates).map(key => {\n            return {value:key, label:tierTemplates[key]['name']};\n        });\n\n        const selectedOption = {value:this.props.rootStore.levelStore.chosenTierSetKey, label: this.props.rootStore.levelStore.chosenTierSetName};\n\n        let classes = \"leveltier-picker__selectbox \";\n        classes += this.props.rootStore.uiStore.tierLockStatus == \"locked\" ? \"leveltier-picker__selectbox--disabled\" : \"\";\n\n        return (\n              <div className={classes}>\n                  <div class=\"form-group\">\n                    <label>{gettext('Results framework template')}</label>&nbsp;<small>{helpIcon}</small>\n                    <Select\n                        options={options}\n                        value={selectedOption}\n                        isDisabled={this.props.rootStore.uiStore.tierLockStatus == \"locked\" ? true : false}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nclass LevelTier extends React.Component {\n\n    render() {\n        return (\n            <div className={'leveltier leveltier--level-' + this.props.tierLevel}>{this.props.tierName} </div>\n    )}\n}\n\n@inject('rootStore')\n@observer\nclass LevelTierList extends React.Component{\n\n    render() {\n        let apply_button = null\n        if (this.props.rootStore.levelStore.levels.length == 0) {\n            apply_button =\n                <button\n                    className=\"leveltier-button btn btn-primary btn-block\"\n                    onClick={this.props.rootStore.levelStore.createFirstLevel}>\n                    {/* #Translators: this refers to an imperative verb on a button (\"Apply filters\")*/}\n                    {gettext(\"Apply\")}\n                </button>\n        }\n\n        return (\n            <React.Fragment>\n                <div id=\"leveltier-list\" className=\"leveltier-list\">\n                    {\n                        this.props.rootStore.levelStore.chosenTierSet.length > 0 ?\n                            this.props.rootStore.levelStore.chosenTierSet.map((tier, index) => {\n                                return <LevelTier key={index} tierLevel={index} tierName={tier}/>\n                            })\n                            : null\n                    }\n\n\n                </div>\n                {\n                    apply_button ?\n                        <div className=\"leveltier-list__actions\">\n                            {apply_button}\n                        </div>\n                    : null\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nexport const LevelTierPicker = inject(\"rootStore\")(observer(function (props) {\n\n    return (\n        <div id=\"leveltier-picker\" className=\"leveltier-picker\">\n            <Picker />\n            <LevelTierList />\n        </div>\n        /*<div id=\"alerts2\" style={{minHeight:\"50px\", minWidth:\"50px\", backgroundColor:\"red\"}}></div>*/\n\n    )\n}));\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS, extendObservable } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\n\n\nlibrary.add(faCaretDown, faCaretRight);\n\nexport class LevelTitle extends React.Component {\n\n    render() {\n        return (\n            <h3 className={'level-title ' + this.props.classes}>\n                {this.props.tierName}\n                {/*if we don't check whether there is an ontology, there ill be an extra\n                space before the colon */}\n                {this.props.ontologyLabel ? \" \" + this.props.ontologyLabel : null}\n            </h3>\n        )\n\n    }\n}\n\n@inject('rootStore')\n@observer\nexport class LevelCardCollapsed extends React.Component {\n\n    componentDidUpdate() {\n        // Enable popovers after update (they break otherwise)\n        $('*[data-toggle=\"popover\"]').popover({\n            html: true\n        });\n    }\n\n    deleteLevel = () => {\n        const levelTitle = this.props.levelProps.tierName + \" \" + this.props.levelProps.ontologyLabel;\n        create_no_rationale_changeset_notice({\n            /* # Translators:  This is a confirmation prompt that is triggered by clicking on a delete button. The code is a reference to the specific item being deleted.  Only one item can be deleted at a time. */\n            message_text: `Are you sure you want to delete ${levelTitle}?`,\n            on_submit: () => this.props.rootStore.levelStore.deleteLevelFromDB(this.props.level.id)});\n\n    };\n\n    editLevel = () => {\n        this.props.rootStore.uiStore.addExpandedCard(this.props.level.id)\n    };\n\n    buildIPTTUrl = (indicator_ids) => {\n        let url = `/indicators/iptt_report/${this.props.rootStore.levelStore.program_id}/timeperiods/?frequency=3&start=0&end=999`;\n        indicator_ids.forEach( i => url += \"&indicators=\"+i);\n        return url\n    };\n\n    render(){\n        // the level card shouldn't be displayed if it's parent level is not expandoed (except\n        // if the level is the top level one).\n        if (this.props.rootStore.uiStore.hasVisibleChildren.indexOf(this.props.level.parent) < 0 && this.props.level.parent != null){\n            return null;\n        }\n\n        // Prepare the indicator links for the indicator popover\n\n        let allIndicatorLinks = [];\n\n        // Get indicator ids linked to this level and create a hyperlink for a filtered IPTT.\n        let sameLevelIndicatorIds = this.props.levelProps.indicators.map( i => i.id);\n        if (sameLevelIndicatorIds.length > 0) {\n            const linkText = `All indicators linked to ${this.props.levelProps.tierName} ${this.props.levelProps.ontologyLabel}`\n            allIndicatorLinks.push(`<a href=${this.buildIPTTUrl(sameLevelIndicatorIds)}>${linkText}</a>`);\n        }\n\n        // Get indicator ids linked to the children of this level, add the indicator ids identified\n        // above, and create a hyperlink for a filtered IPTT.\n        let descendantIndicatorIds = this.props.levelProps.descendantIndicatorIds;\n        descendantIndicatorIds = descendantIndicatorIds.concat(sameLevelIndicatorIds);\n        if (descendantIndicatorIds.length > 0) {\n            const linkText = `All indicators linked to ${this.props.levelProps.tierName} ${this.props.levelProps.ontologyLabel} and sub-levels`\n            allIndicatorLinks.push(`<a href=${this.buildIPTTUrl(descendantIndicatorIds)}>${linkText}</a>`);\n        }\n\n        // Create IPTT hyperlinks for each individual indicator linked to this level.\n        let individualLinks = this.props.levelProps.indicators.map( indicator => {\n            return `<li class=\"nav-item\"><a href=${this.buildIPTTUrl([indicator.id])}>${indicator.name}</a></li>`;\n        });\n        allIndicatorLinks = allIndicatorLinks.concat(individualLinks);\n\n\n        allIndicatorLinks = `<ul class=\"nav flex-column\">${allIndicatorLinks.join(\"<br>\")}</ul>`;\n        // TODO: popover breaks if you click edit and cancel\n        const iCount = this.props.levelProps.indicators.length;\n        /* # Translators: This is a count of indicators associated with another object */\n        const indicatorCountText = interpolate(ngettext(\"%s indicator\", \"%s indicators\", iCount), [iCount]);\n\n        // The expando caret is only applied to levels that:\n        // 1. Aren't at the end of the leveltier hierarchy\n        // 2. Actually have children\n        let expando = null;\n        if (this.props.levelProps.tierName != toJS(this.props.rootStore.levelStore.chosenTierSet.slice(-1)[0]) &&\n            this.props.rootStore.levelStore.levels.filter( l => l.parent == this.props.level.id).length > 0){\n            expando = <FontAwesomeIcon className=\"text-action\" icon={this.props.rootStore.uiStore.hasVisibleChildren.indexOf(this.props.level.id) >= 0 ? 'caret-down' : 'caret-right'} />\n        }\n\n        return (\n            <div className=\"level-card level-card--collapsed\" id={this.props.level.id}>\n                <div\n                    className={expando ? \"level-card__toggle\": \"\"}\n                    onClick={(e) => this.props.rootStore.uiStore.updateVisibleChildren(this.props.level.id)}>\n                    {expando}\n                    <span className=\"level-card--collapsed__name\">\n                        <LevelTitle\n                            tierName={this.props.levelProps.tierName}\n                            ontologyLabel={this.props.levelProps.ontologyLabel}\n                            classes=\"level-title--collapsed\"\n                        />\n                        &nbsp;{this.props.level.name}\n                    </span>\n                </div>\n                <div className=\"level-card--collapsed__actions\">\n                    <div className=\"actions__top btn-row\">\n                        { this.props.levelProps.canDelete &&\n                            <button\n                                className=\"btn btn-sm btn-link btn-danger\"\n                                onClick={this.deleteLevel}>\n                                <i className=\"fas fa-trash-alt\"></i>{gettext(\"Delete\")}\n                            </button>\n                        }\n                        {this.props.levelProps.canEdit &&\n                            <button className=\"btn btn-sm btn-link btn-text\" onClick={this.editLevel}>\n                                <i className=\"fas fa-edit\"/>{gettext(\"Edit\")}\n                            </button>\n                        }\n                    </div>\n                    <div className=\"actions__bottom\" style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                        <button\n                            className=\"btn btn-sm btn-link no-bold\"\n                            data-toggle=\"popover\"\n                            data-trigger=\"focus\"\n                            data-placement=\"bottom\"\n                            data-html=\"true\"\n                            title=\"Track indicator performance\"\n                            data-content={allIndicatorLinks}>\n                            {indicatorCountText}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class LevelCardExpanded extends React.Component {\n    constructor(props){\n        super(props);\n        this.submitType = \"saveOnly\";\n        extendObservable(this, {\n            name: props.level.name,\n            assumptions: props.level.assumptions,\n        })\n    }\n\n    /*\n    Using this allows us to use the same submit function for all three buttons.  Shame the function has to\n    be passed all the way down to the button to work.\n     */\n    updateSubmitType = (newType) => {\n        this.submitType = newType;\n    };\n\n    saveLevel = (event) => {\n        event.preventDefault();\n        this.props.rootStore.levelStore.saveLevelToDB(\n            this.submitType,\n            this.props.level.id,\n            {name: this.name, assumptions: this.assumptions}\n        )\n\n    };\n\n    cancelEdit = () => {\n        this.props.rootStore.levelStore.cancelEdit(this.props.level.id)\n    };\n\n    onFormChange = (event) => {\n        event.preventDefault();\n        this[event.target.name] = event.target.value;\n    };\n\n    render(){\n        return (\n            <div className=\"level-card level-card--expanded\" id={this.props.level.id}>\n                <div>\n                    <LevelTitle\n                        tierName={this.props.levelProps.tierName}\n                        ontologyLabel={this.props.levelProps.ontologyLabel}\n                        classes=\"level-title--expanded\"\n                    />\n\n                </div>\n                <form className=\"level-card--expanded__form\" onSubmit={this.saveLevel}>\n                    <div className=\"form-group\">\n                        <textarea\n                            className=\"form-control\"\n                            id=\"level-name\"\n                            name=\"name\"\n                            value={this.name || \"\"}\n                            autoComplete=\"off\"\n                            onChange={this.onFormChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                            <label htmlFor=\"assumptions\">Assumptions</label>\n                        <textarea\n                            className=\"form-control\"\n                            id=\"level-assumptions\"\n                            disabled={this.name? \"\" : \"disabled\"}\n                            name=\"assumptions\"\n                            autoComplete=\"off\"\n                            value={this.assumptions || \"\"}\n                            onChange={this.onFormChange}/>\n                    </div>\n                    <ButtonBar\n                        level={this.props.level}\n                        levelProps={this.props.levelProps}\n                        isActive={this.props.rootStore.uiStore.expandedCards[0] == this.props.level.id}\n                        submitFunc={this.updateSubmitType}\n                        cancelFunc={this.cancelEdit}\n                        nameVal={this.name}\n                        tierCount={this.props.rootStore.levelStore.chosenTierSet.length}\n                    />\n                </form>\n            </div>\n\n        )\n    }\n}\n\n\n@inject('rootStore')\nclass ButtonBar extends React.Component {\n    render() {\n        let disabledText = this.props.isActive && this.props.nameVal ? \"\" : \"disabled\";\n\n        // Build the button text with the right sibling level name, then build the button.\n        let addAnotherButton = null;\n        if (this.props.level.parent != null && this.props.level.parent != \"root\") {\n            {/* # Translators: On a button, with a tiered set of objects, save current object and add another one in the same tier, e.g. \"Save and add another Outcome\" when the user is editing an Outcome */}\n            const buttonText = interpolate(gettext(\"Save and add another %s\"), [this.props.levelProps.tierName])\n            addAnotherButton = <LevelButton disabledText={disabledText} classes=\"btn-primary\" icon='plus-circle' text={buttonText} submitType=\"saveAndAddSibling\"  submitFunc={this.props.submitFunc} />\n        }\n\n        // Build the button text with the right child level name, then build the button.\n        let addAndLinkButton = null;\n        const tierCount = this.props.rootStore.levelStore.chosenTierSet.length;\n        if (this.props.level.level_depth < tierCount) {\n            {/* # Translators: On a button, with a tiered set of objects, save current object and add another one in the next lower tier, e.g. \"Save and add another Activity\" when the user is editing a Goal */}\n            const buttonText = interpolate(gettext(\"Save and link %s\"), [this.props.levelProps.childTierName])\n            addAndLinkButton = <LevelButton disabledText={disabledText} classes=\"btn btn-primary\" icon='stream' text={buttonText} submitType=\"saveAndAddChild\" submitFunc={this.props.submitFunc} />\n        }\n        return (\n            <div className=\"button-bar btn-row\">\n                <LevelButton disabledText={disabledText} classes=\"btn-primary\" text={gettext(\"Save and close\")} icon='save' submitType=\"saveOnly\" submitFunc={this.props.submitFunc} />\n                {addAnotherButton}\n                {addAndLinkButton}\n                <LevelButton classes=\"btn btn-reset\" text={gettext(\"Cancel\")} submitType=\"cancel\" submitFunc={this.props.cancelFunc} />\n            </div>\n        )\n\n    }\n}\n\nclass LevelButton extends React.Component {\n\n    render() {\n        const buttonType = this.props.submitType == \"cancel\" ? \"button\" : \"submit\";\n        return (\n            <button\n                disabled={this.props.disabledText}\n                type={buttonType}\n                className={this.props.classes + ' level-button btn btn-sm'}\n                onClick={() =>this.props.submitFunc(this.props.submitType)}>\n                {this.props.text}\n                {/*this.props.icon ?  <FontAwesomeIcon icon={this.props.icon} /> : ''*/}\n            </button>\n        )\n\n    }\n}\n","import { observable, computed, action, toJS, runInAction } from \"mobx\";\nimport { trimOntology } from '../../level_utils'\nimport { api } from \"../../api.js\"\n\nexport class RootStore {\n    constructor (program_id, levels, indicators, levelTiers, tierTemplates, accessLevel) {\n        this.levelStore =  new LevelStore(program_id, levels, indicators, levelTiers, tierTemplates, accessLevel, this);\n        this.uiStore = new UIStore(this);\n    }\n}\n\nexport class LevelStore {\n    @observable levels = [];\n    @observable indicators = [];\n    @observable chosenTierSetKey = \"\";\n    @observable chosenTierSet = [];\n    tierTemplates;\n    defaultTemplateKey = \"\";\n    customTierSetKey = \"\";\n    program_id = \"\";\n    accessLevel = false;\n\n    constructor(program_id, levels, indicators, levelTiers, tierTemplates, accessLevel, rootStore) {\n        this.rootStore = rootStore;\n        this.levels = levels;\n        this.indicators = indicators;\n\n        this.tierTemplates = tierTemplates;\n        this.defaultTemplateKey = \"mc_standard\";\n        this.customTierSetKey = \"custom\";\n        this.program_id = program_id;\n        this.accessLevel = accessLevel;\n\n        // Set the stored tier set key and the values, if they exist.  Use the default if they don't.\n        if (levelTiers.length > 0) {\n            // deriveTemplateKey relies on chosenTierSet to be populated, so need to set it first.\n            this.chosenTierSet = levelTiers.map( t => t.name);\n            this.chosenTierSetKey = this.deriveTemplateKey(levelTiers);\n        }\n        else {\n            this.chosenTierSetKey = this.defaultTemplateKey;\n            this.chosenTierSet = this.tierTemplates[this.chosenTierSetKey]['tiers'];\n        }\n    }\n\n    @computed get sortedLevels () {\n        return this.levels.slice().sort((a, b) => {a.level_depth - b.level_depth || a.customsort - b.customsort})\n    }\n\n    @computed get levelProperties () {\n        let levelProperties = {};\n\n        for (let level of this.levels) {\n            let properties = {};\n            const childrenIds = this.getChildLevels(level.id).map( l => l.id);\n            const indicatorCount = this.indicators.filter( i => i.level == level.id);\n\n            properties['indicators'] = this.getLevelIndicators(level.id);\n            properties['descendantIndicatorIds'] = this.getDescendantIndicatorIds(childrenIds);\n            properties['ontologyLabel'] = this.buildOntology(level.id);\n            properties['tierName'] = this.chosenTierSet[level.level_depth-1];\n            properties['childTierName'] = null;\n            if (this.chosenTierSet.length > level.level_depth) {\n                properties['childTierName'] = this.chosenTierSet[level.level_depth];\n            }\n\n            properties['canDelete'] = childrenIds.length==0 && indicatorCount==0 && this.accessLevel=='high';\n            properties['canEdit'] = this.accessLevel == 'high';\n            levelProperties[level.id] = properties;\n        }\n\n        return levelProperties\n    }\n\n    @computed get chosenTierSetName () {\n        if (this.chosenTierSetKey == this.customTierSetKey){\n            return \"Custom\"\n        }\n        else {\n            return this.tierTemplates[this.chosenTierSetKey]['name']\n        }\n    };\n\n    @action\n    changeTierSet(newTierSetKey) {\n        this.chosenTierSetKey = newTierSetKey;\n        this.chosenTierSet = this.tierTemplates[newTierSetKey]['tiers']\n    }\n\n    @action\n    cancelEdit = levelId => {\n        if (levelId == \"new\") {\n            const targetLevel = this.levels.find(l => l.id == levelId);\n\n            // First update any customsort values that were modified when this card was created\n            let siblingsToReorder = this.levels.filter(l => {\n                return l.customsort > targetLevel.customsort && l.parent == targetLevel.parent;\n            });\n            siblingsToReorder.forEach(sib => sib.customsort -= 1);\n\n            // Now remove the new card\n            this.levels.replace(this.levels.filter((element) => element.id != \"new\"));\n        }\n        this.rootStore.uiStore.removeExpandedCard(levelId)\n\n    };\n\n    @action\n    createNewLevelFromSibling = (siblingId) => {\n        // Copy sibling data for the new level and then clear some of it out\n        let sibling = toJS(this.levels.find( l => l.id == siblingId));\n        let newLevel = Object.assign({}, sibling);\n        newLevel.customsort += 1;\n        newLevel.id = \"new\";\n        newLevel.name = \"\";\n        newLevel.assumptions = \"\";\n\n        // bump the customsort field for siblings that come after the inserted Level\n        let siblingsToReorder = this.levels.filter( l => {\n            return sibling && l.customsort > sibling.customsort && l.parent == sibling.parent;\n        });\n        siblingsToReorder.forEach( sib => sib.customsort+=1);\n        // add new Level to the various Store components\n        this.rootStore.uiStore.expandedCards.push(\"new\");\n        this.rootStore.uiStore.activeCard = \"new\";\n        this.levels.push(newLevel);\n        // TODO: change focus to new level, since it could be very far from the one that triggered the create\n    };\n\n    @action\n    createNewLevelFromParent = (parentId) => {\n        // Copy data for the new level and then clear some of it out\n        let parent = toJS(this.levels.find( l => l.id == parentId));\n        let newLevel = {\n            id:\"new\",\n            customsort: 1,\n            name: \"\",\n            assumptions: \"\",\n            parent: parentId,\n            level_depth: parent.level_depth + 1,\n            program: this.program_id\n        };\n\n        // bump the customsort field for siblings that come after the inserted Level\n        let siblingsToReorder = this.levels.filter( l => l.parent == parentId);\n\n        siblingsToReorder.forEach( sib => sib.customsort+=1);\n        // add new Level to the various Store components\n        this.rootStore.uiStore.expandedCards.push(\"new\");\n        this.rootStore.uiStore.activeCard = \"new\";\n        this.levels.push(newLevel);\n        this.rootStore.uiStore.hasVisibleChildren.push(newLevel.parent)\n    };\n\n\n    @action\n    createFirstLevel = () => {\n        // Using \"root\" for parent id so the Django view can distinguish between top tier level and 2nd tier level\n        let newLevel = {\n            id: \"new\",\n            program: this.program_id,\n            name: \"\",\n            assumptions: \"\",\n            customsort: 1,\n            level_depth: 1,\n            parent: \"root\"\n        };\n        this.levels.push(newLevel);\n        this.rootStore.uiStore.expandedCards.push(\"new\")\n    }\n\n    saveLevelTiersToDB = () => {\n        const tier_data = {program_id: this.program_id, tiers: this.chosenTierSet};\n        api.post(`/save_leveltiers/`, tier_data)\n            .then(response => {\n            })\n            .catch(error => console.log('error', error))\n    };\n\n    deleteLevelFromDB = (levelId) => {\n        const level_label = `${this.levelProperties[levelId]['tierName']} ${this.levelProperties[levelId]['ontologyLabel']}`\n        api.delete(`/level/${levelId}`)\n            .then(response => {\n                this.levels.replace(response.data);\n                this.rootStore.uiStore.removeExpandedCard(levelId);\n                if (this.levels.length == 0){\n                    this.createFirstLevel()\n                }\n                const context = document.getElementById('alerts2')\n                console.log('contextis', context);\n                // Translators: Notification to user that the deletion command that they issued was successful\n                success_notice({message_text: gettext(`${level_label} was successfully deleted.`)})\n            })\n            .catch(error => console.log('error', error))\n    };\n\n\n    // TODO: better error handling for API\n    saveLevelToDB = (submitType, levelId, formData) => {\n        let targetLevel = this.levels.find(level => level.id == levelId);\n        let levelToSave = Object.assign(toJS(targetLevel), formData);\n        if (levelId == \"new\") {\n            if (levelToSave.parent == \"root\") {\n                this.saveLevelTiersToDB()\n            }\n            delete levelToSave.id;\n\n            api.post(`/insert_new_level/`, levelToSave)\n                .then(response => {\n                    runInAction(() => {\n                        this.levels.replace(response.data['all_data'])\n                    });\n                    const newId = response.data[\"new_level\"][\"id\"];\n                    this.rootStore.uiStore.removeExpandedCard(levelId);\n                    if (submitType == \"saveAndAddSibling\"){\n                        this.createNewLevelFromSibling(newId);\n                    }\n                    else if (submitType == \"saveAndAddChild\"){\n                        this.createNewLevelFromParent(newId);\n                    }\n                })\n                .catch(error => console.log('error', error))\n\n        } else {\n            api.put(`/level/${levelId}/`, levelToSave)\n                .then(response => {\n                    runInAction( () => {\n                        Object.assign(targetLevel, response.data);\n                    });\n                    this.rootStore.uiStore.removeExpandedCard(levelId);\n                    if (submitType == \"saveAndAddSibling\"){\n                        this.createNewLevelFromSibling(levelId);\n                    }\n                    else if (submitType == \"saveAndAddChild\"){\n                        this.createNewLevelFromParent(levelId);\n                    }\n\n                })\n                .catch( error => {\n                    console.log(\"There was an error:\", error);\n                })\n        }\n\n    };\n\n    deriveTemplateKey = () => {\n        // Check each tier set in the templates to see if the tier order and content are exactly the same\n        // If they are, return the template key\n        const levelTierStr = JSON.stringify(toJS(this.chosenTierSet));\n        for (let templateKey in this.tierTemplates){\n            // not an eligable template if the key is inherited or if the lengths of the tier sets don't match.\n            if (!this.tierTemplates.hasOwnProperty(templateKey) ||\n                this.chosenTierSet.length != this.tierTemplates[templateKey]['tiers'].length) {\n                continue;\n            }\n            const templateValuesStr = JSON.stringify(this.tierTemplates[templateKey]['tiers']);\n            if (levelTierStr == templateValuesStr) {\n                return templateKey;\n            }\n        }\n\n        // If this has been reached, the db has stored tiers but they're not a match to a template\n        return \"custom\";\n    }\n\n\n    buildOntology = (levelId, ontologyArray = []) => {\n        let level = toJS(this.levels.find( l => l.id == levelId));\n        /*  If there is no parent (saved top tier level) or the parent is \"root\" (unsaved top tier level)\n            then we should return with adding to the ontology because there is no ontology entry for the top tier\n         */\n        if (level.parent && level.parent != \"root\") {\n            ontologyArray.unshift(level.customsort);\n            return this.buildOntology(level.parent, ontologyArray);\n        }\n        else {\n            return ontologyArray.join(\".\");\n        }\n    };\n\n    getChildLevels = levelId => this.levels.filter( l => l.parent == levelId);\n\n    getLevelIndicators = levelId => this.indicators.filter( i => i.level == levelId)\n\n    getDescendantIndicatorIds = (childLevelIds) => {\n        // console.log('childidsss', childIds)\n        const childLevels = this.levels.filter( l => childLevelIds.includes(l.id));\n        // console.log('before loop', toJS(childLevels))\n        let newIndicatorIds = []\n        childLevels.forEach( childLevel => {\n            newIndicatorIds = newIndicatorIds.concat(this.indicators.filter( i => i.level == childLevel.id).map( i => i.id))\n            let grandChildIds = this.levels.filter( l => l.parent == childLevel.id).map( l => l.id);\n            newIndicatorIds = newIndicatorIds.concat(this.getDescendantIndicatorIds(grandChildIds, newIndicatorIds));\n        });\n        // console.log('after loop', priorIds)\n        return newIndicatorIds\n    }\n\n}\n\n\nexport class UIStore {\n    @observable expandedCards = [];\n    @observable hasVisibleChildren = [];\n\n    constructor (rootStore) {\n        this.rootStore = rootStore;\n        this.hasVisibleChildren = this.rootStore.levelStore.levels.map(l => l.id)\n    }\n\n    @computed get tierLockStatus () {\n        // The leveltier picker should be disabled if there is at least one saved level in the DB.\n        let notNewLevels = this.rootStore.levelStore.levels.filter( l => l.id != \"new\");\n        if  (notNewLevels.length > 0) {\n            return \"locked\"\n        }\n        // The apply button should not be visible if there is only one level visible (i.e. saved to the db or not)\n        else if (this.rootStore.levelStore.levels.length == 1){\n            return \"primed\"\n        }\n\n        return null;\n    }\n\n    @action\n    addExpandedCard = (levelId) => {\n        if (!this.expandedCards.includes(levelId)) {\n            this.expandedCards.push(levelId);\n        }\n    }\n\n    @action\n    removeExpandedCard = (levelId) => {\n        this.expandedCards = this.expandedCards.filter( level_id => level_id != levelId );\n    };\n\n    @action\n    updateVisibleChildren = (levelId, forceHide=false, forceShow=false) => {\n        // forceHide is to ensure that descendant levels are also made hidden, even if they are not actually visible.\n        if (this.hasVisibleChildren.indexOf(levelId) >= 0 || forceHide) {\n            this.hasVisibleChildren = this.hasVisibleChildren.filter( level_id => level_id != levelId );\n            const childLevels = this.rootStore.levelStore.levels.filter( l => l.parent == levelId);\n            childLevels.forEach( l => this.updateVisibleChildren(l.id, true))\n        }\n        else {\n            this.hasVisibleChildren.push(levelId);\n        }\n    }\n}\n","\n// Returns a trimmed level ontology for display purposes\nexport function trimOntology(ontologyStr) {\n    let ontologyArray = ontologyStr.split(\".\");\n    return ontologyArray.slice(1).filter(i => i > 0).join(\".\")\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"mobx-react\"\nimport eventBus from '../../eventbus';\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\n\nimport {LevelListPanel} from './components/level_list';\nimport {LevelTierPicker} from './components/leveltier_picker';\nimport {RootStore} from './models';\n\n/*\n * Model/Store setup\n */\nconst {program_id, levels, indicators, levelTiers, tierTemplates, accessLevel} = jsContext;\nconst rootStore = new RootStore(program_id, levels, indicators, levelTiers, tierTemplates, accessLevel);\n\n/*\n * React components on page\n */\n\nReactDOM.render(\n    <Provider rootStore={rootStore}>\n        <React.Fragment>\n            <LevelTierPicker />\n            <LevelListPanel />\n        </React.Fragment>\n    </Provider>,\n    document.querySelector('#level-builder-react-component'));\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS } from 'mobx';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport Select from 'react-select';\nimport {LevelCardCollapsed, LevelCardExpanded} from \"./level_cards\";\n\nlibrary.add(faCaretDown, faCaretRight);\n\n@inject('rootStore')\n@observer\nclass LevelList extends React.Component {\n\n    render() {\n        let renderList = [];\n        if (this.props.renderList == 'initial') {\n            renderList = this.props.rootStore.levelStore.sortedLevels\n                .filter(level => ['root', null].indexOf(level.parent) != -1)\n        }\n\n        else{\n            renderList = this.props.renderList.sort((a, b) => a.customsort - b.customsort);\n        }\n\n        return renderList.map((elem) => {\n            let card = '';\n            if (this.props.rootStore.uiStore.expandedCards.indexOf(elem.id) !== -1) {\n                card =\n                    <LevelCardExpanded\n                        level={elem}\n                        levelProps={this.props.rootStore.levelStore.levelProperties[elem.id]}/>\n            }\n            else {\n                card =\n                    <LevelCardCollapsed\n                        level={elem}\n                        levelProps={this.props.rootStore.levelStore.levelProperties[elem.id]}/>\n            }\n\n            let children = this.props.rootStore.levelStore.sortedLevels.filter(level => level.parent == elem.id);\n            let childLevels = null;\n            if (children.length > 0){\n                childLevels =  <LevelList\n                    rootStore={this.props.rootStore}\n                    renderList={children}/>\n            }\n\n            return (\n                <div key={elem.id} className=\"leveltier--new\">\n                    {card}\n                    {childLevels}\n                </div>\n            )\n    })}\n}\n\n@inject('rootStore')\n@observer\nexport class LevelListPanel  extends React.Component {\n\n    render() {\n        if (this.props.rootStore.levelStore.levels.length == 0) {\n            return (\n                <div className=\"level-list-panel\">\n                    <div className=\"level-list-panel__dingbat\">\n                        <i className=\"fas fa-sitemap\"></i>\n                    </div>\n                    <div className=\"level-list-panel__text text-large\">\n                        <strong className=\"text-danger\">Choose your results framework template carefully!</strong> Once you begin building your framework, it will not be possible to change templates without first deleting all saved levels.\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div id=\"level-list\" style={{flexGrow: \"2\"}}><LevelList renderList='initial'/></div>\n            )\n        }\n    }\n}\n\n"],"mappings":"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AAAA;AAAA;AAIA;;;;AA7BA;AACA;AA+BA;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAUA;;;;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrRA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAWA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAsJA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AA5JA;AA8JA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AA7KA;AAiLA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AA9NA;AAgOA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlPA;AAoPA;AACA;AAAA;AAAA;AACA;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAjQA;AAkQA;AAAA;AAAA;AAAA;AACA;AAnQA;AAoQA;AAAA;AAAA;AAAA;AACA;AArQA;AAuQA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAlRA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAC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","sourceRoot":""}