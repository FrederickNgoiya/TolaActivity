{"version":3,"file":"results_framework-f014f503ebd4718de874.js","sources":["webpack:///./js/pages/results_framework/components/leveltier_picker.js","webpack:///./js/pages/results_framework/models.js","webpack:///./js/pages/results_framework/index.js","webpack:///./js/eventbus.js","webpack:///./js/pages/results_framework/components/level_list.js"],"sourcesContent":["import React from 'react';\nimport { observer, inject } from \"mobx-react\"\n\nimport Select from 'react-select';\n\n@inject('uiStore')\n@observer\nclass Picker extends React.Component {\n    handleChange = selectedPreset => {\n        this.props.uiStore.changePreset(selectedPreset.value);\n    };\n\n    render() {\n        const options = Object.keys(this.props.uiStore.tierPresets).map(val=>{\n            return {value:val, label:val};\n        });\n        const selectedOption = {value:this.props.uiStore.selectedPreset, label: this.props.uiStore.selectedPreset};\n\n        return <Select\n            options={options}\n            value={selectedOption}\n            onChange={this.handleChange}\n        />\n    }\n}\n\nclass LevelTier extends React.Component {\n\n    render() {\n        return (\n            <div> {this.props.tierName} </div>\n    )}\n}\n\n@inject('uiStore')\n@observer\nclass LevelTierList extends React.Component{\n    render() {\n        return (\n            <div id=\"leveltier-list\">\n                {this.props.uiStore.tierList.map((tier, index) => {\n                    return <LevelTier key={index} tierName={tier}/>\n                    }\n                )}\n            </div>\n        )\n    }\n}\n\nexport const LevelTierPicker = observer(function (props) {\n\n    return (\n        <div id=\"leveltier-picker\" style={{marginRight:\"3em\"}}>\n            <Picker />\n            <LevelTierList />\n        </div>\n    )\n});\n","import { observable, computed, action } from \"mobx\";\n\nexport class RFPageStore {\n    @observable levels = [];\n    @observable levelTiers = [];\n    tierPresets = {};\n\n    constructor(levels, levelTiers, tierPresets) {\n        this.levels = levels.sort( function (a, b) {\n            if (a.ontology < b.ontology) {\n                return -1;\n            }\n            if (b.ontology < a.ontology) {\n                return 1;\n            }\n            return 0\n        });\n        this.levelTiers = levelTiers;\n        this.tierPresets = tierPresets;\n    }\n}\n\nexport class RFPageUIStore {\n    @observable selectedPreset;\n    @observable levelTiers;\n    tierPresets;\n    defaultPreset = 'Mercy Corps standard';\n\n    constructor(levelTiers, tierPresets){\n        if (levelTiers.length) {\n            this.selectedPreset = this.derive_preset_name(levelTiers, tierPresets);\n            this.levelTiers = levelTiers;\n        }\n        else {\n            this.selectedPreset = this.defaultPreset;\n            this.levelTiers = tierPresets[this.defaultPreset];\n        }\n        this.tierPresets = tierPresets;\n\n        this.changePreset = this.changePreset.bind(this);\n\n    }\n\n    @computed get tierList () {\n        if (!this.selectedPreset && !this.levelTiers){\n            return null;\n        }\n        else if (this.selectedPreset in this.tierPresets){\n            return this.tierPresets[this.selectedPreset];\n        }\n        else {\n            return this.levelTiers;\n        }\n    }\n\n    @action\n    changePreset(newPreset) {\n        this.selectedPreset = newPreset;\n    }\n\n    derive_preset_name(levelTiers, tierPresets) {\n        if (!levelTiers){\n            return None;\n        }\n        for (let preset_name in tierPresets){\n            return preset_name;\n        }\n    }\n\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"mobx-react\"\nimport eventBus from '../../eventbus';\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\n\nimport {LevelListing} from './components/level_list';\nimport {LevelTierPicker} from './components/leveltier_picker';\nimport {RFPageStore, RFPageUIStore} from './models';\n\n/*\n * Model/Store setup\n */\nconst {levels, levelTiers, tierPresets} = jsContext;\nconst rootStore = new RFPageStore(levels, levelTiers, tierPresets);\nconst uiStore = new RFPageUIStore(levelTiers, tierPresets);\n\n\n/*\n * React components on page\n */\n\nReactDOM.render(\n    <Provider uiStore={uiStore} rootStore={rootStore}>\n        <div style={{display:\"flex\"}}>\n            <LevelTierPicker />\n            <LevelListing />\n        </div>\n    </Provider>,\n    document.querySelector('#level-builder-react-component'));\n\n// ReactDOM.render(<LevelList rootStore={rootStore}\n//                                 uiStore={uiStore} />,\n//     document.querySelector('#level-list-react-component'));\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, inject } from \"mobx-react\"\nimport eventBus from '../../../eventbus';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons'\nimport {IndicatorFilterType} from \"../models\";\nimport Select from 'react-select';\n\n\nlibrary.add(faCaretDown, faCaretRight);\n\nclass LevelCard extends React.Component {\n    render(){\n        return (\n            <div>{this.props.level.name}</div>\n        )\n    }\n}\n\n\n\n@inject('rootStore')\n@observer\nclass LevelList extends React.Component {\n    render() {\n        return (\n            this.props.rootStore.levels.map( (level, index) => {\n                return <LevelCard key={index} level={level} />\n            })\n\n        )\n    }\n}\n\n\nexport const LevelListing = observer(function (props) {\n    return (\n        <div id=\"level-list\" style={{flexGrow:\"2\"}}><LevelList /></div>\n    )\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;;;;AAhBA;AACA;AAkBA;;;;;;;;;;;;;AAEA;AACA;AAEA;;;;AALA;AACA;AASA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAIA;;;;AAVA;AAaA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AAEA;AAKA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAMA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AApBA;AAAA;AAAA;AAmCA;AACA;AApCA;AAAA;AAAA;AAuCA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA7CA;AAAA;AAAA;AAsBA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AA/BA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAQA;AACA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AAGA;;;;AALA;AACA;AAWA;;;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;;;;AARA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;A","sourceRoot":""}