{"version":3,"file":"tola_management_country-1d7509325c60fb79f034.js","sources":["webpack:///./js/pages/tola_management_pages/country/views.js","webpack:///./js/pages/tola_management_pages/country/components/edit_country_profile.js","webpack:///./js/pages/tola_management_pages/country/models.js","webpack:///./js/pages/tola_management_pages/country/components/edit_objectives.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/pages/tola_management_pages/country/index.js","webpack:///./js/components/pagination.js","webpack:///./js/components/management-table.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/country/api.js","webpack:///./js/pages/tola_management_pages/country/components/edit_disaggregations.js","webpack:///./js/pages/tola_management_pages/country/components/country_editor.js","webpack:///./js/components/folding-sidebar.js"],"sourcesContent":["import React from 'react'\nimport { observer } from \"mobx-react\"\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport ManagementTable from 'components/management-table'\nimport Pagination from 'components/pagination'\nimport CountryEditor from './components/country_editor'\nimport EditCountryProfile from './components/edit_country_profile'\nimport EditDisaggregations from './components/edit_disaggregations'\nimport EditObjectives from './components/edit_objectives'\nimport LoadingSpinner from 'components/loading-spinner'\nimport FoldingSidebar from 'components/folding-sidebar'\n\nconst CountryFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group\">\n        <label htmlFor=\"countries_filter\">{gettext(\"Countries\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.countries}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('countries', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"countries_filter\" />\n    </div>\n})\n\nconst OrganizationFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group\">\n        <label htmlFor=\"organizations_filter\">{gettext(\"Organizations\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.organizations}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('organizations', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"organizations_filter\" />\n    </div>\n})\n\nconst ProgramFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group\">\n        <label htmlFor=\"programs-filter\">{gettext(\"Programs\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.programs}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('programs', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"programs-filter\" />\n    </div>\n})\n\n\nexport const IndexView = observer(\n    ({store}) => {\n        const countryFilterOptions = store.allCountries.map(country => {return {value: country.id, label: country.country}})\n        const organizationFilterOptions = Object.entries(store.organizations).map(([id, org]) => ({value: org.id, label: org.name}))\n        const programFilterOptions = Object.entries(store.allPrograms).map(([id, program]) => ({value: program.id, label: program.name}))\n\n        return <div id=\"country-management-index-view\" className=\"row\">\n            <FoldingSidebar>\n                <div className=\"filter-section\">\n                    <OrganizationFilter store={store} filterOptions={organizationFilterOptions} />\n                    <ProgramFilter store={store} filterOptions={programFilterOptions} />\n                    <CountryFilter store={store} filterOptions={countryFilterOptions} />\n                    <div className=\"filter-buttons\">\n                        <button className=\"btn btn-primary\" onClick={() => store.applyFilters()}>{gettext(\"Apply\")}</button>\n                        <button className=\"btn btn-inverse\" onClick={() => store.clearFilters()}>{gettext(\"Reset\")}</button>\n                    </div>\n                </div>\n            </FoldingSidebar>\n            <div className=\"col admin-list\">\n                <div className=\"admin-list__controls\">\n                    <div className=\"controls__bulk-actions\"></div>\n                    {store.is_superuser &&\n                    <div className=\"controls__buttons\">\n                        <a href=\"#\" tabIndex=\"0\" className=\"btn btn-link btn-add\" onClick={() => store.addCountry()}>\n                            <i className=\"fas fa-plus-circle\"/>{gettext(\"Add Country\")}\n                        </a>\n                    </div>\n                    }\n                </div>\n                <LoadingSpinner isLoading={store.fetching_main_listing || store.applying_bulk_updates }>\n                    <div className=\"admin-list__table\">\n                        <ManagementTable\n                            newData={store.new_country}\n                            data={store.countries}\n                            keyField=\"id\"\n                            HeaderRow={({Col, Row}) =>\n                                <Row>\n                                    <Col size=\".2\"></Col>\n                                    <Col size=\"2\" className=\"td--stretch\">{gettext(\"Country\")}</Col>\n                                    <Col>{gettext(\"Organizations\")}</Col>\n                                    <Col>{gettext(\"Programs\")}</Col>\n                                    <Col>{gettext(\"Users\")}</Col>\n                                </Row>\n                            }\n                            Row={({Col, Row, data}) =>\n                            <Row\n                                expanded={data.id == store.editing_target}\n                                Expando={({Wrapper}) =>\n                                    <Wrapper>\n                                        <CountryEditor\n                                            new={data.id == 'new'}\n                                            ProfileSection={observer(() =>\n                                                <EditCountryProfile\n                                                    new={data.id == 'new'}\n                                                    country_data={data}\n                                                    organizationOptions={organizationFilterOptions}\n                                                    onUpdate={(id, data) => store.updateCountry(id, data)}\n                                                    onCreate={(new_country_data) => store.saveNewCountry(new_country_data)}\n                                                    errors={store.editing_errors}\n                                                />)}\n                                            StrategicObjectiveSection={observer(() =>\n                                                <LoadingSpinner isLoading={store.fetching_editing_data}>\n                                                    <EditObjectives\n                                                        country_id={data.id}\n                                                        objectives={store.editing_objectives_data}\n                                                        addObjective={() => store.addObjective()}\n                                                        onUpdate={(id, data) => store.updateObjective(id, data)}\n                                                        onCreate={(data) => store.createObjective(data)}\n                                                        onDelete={(id) => store.deleteObjective(id)}\n                                                        errors={store.editing_objectives_errors}\n                                                        clearErrors={() => store.clearObjectiveEditingErrors()}\n                                                    />\n                                                </LoadingSpinner>\n                                            )}\n                                            DisaggregationSection={observer(() =>\n                                                <LoadingSpinner isLoading={store.fetching_editing_data}>\n                                                    <EditDisaggregations\n                                                        country_id={data.id}\n                                                        disaggregations={store.editing_disaggregations_data}\n                                                        addDisaggregation={() => store.addDisaggregation()}\n                                                        onDelete={(id) => store.deleteDisaggregation(id)}\n                                                        onUpdate={(id, data) => store.updateDisaggregation(id, data)}\n                                                        onCreate={(data) => store.createDisaggregation(data)}\n                                                        errors={store.editing_disaggregations_errors}\n                                                        clearErrors={() => store.clearDisaggregationEditingErrors()}\n                                                    />\n                                                </LoadingSpinner>\n                                            )}\n                                            fetchObjectives={(countryId) => store.fetchObjectives(countryId)}\n                                        />\n                                    </Wrapper>\n                                }>\n                                    <Col size=\"0.2\">\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">\n                                        <div className=\"icon__clickable\" onClick={() => store.toggleEditingTarget(data.id)} >\n                                            <i className=\"fas fa-globe\"/>&nbsp;\n                                            {data.country || \"---\"}\n                                        </div>\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                        { data.organizations.length ?\n                                            <a href={`/tola_management/organization/?countries[]=${data.id}`}>\n                                                <i className=\"fas fa-building\"/>&nbsp;\n                                                {data.organizations.length} {gettext(\"Organizations\")}\n                                            </a>\n                                        : '---'}\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                        { data.programCount ?\n                                            <a href={`/tola_management/program/?countries[]=${data.id}`}>\n                                                <i className=\"fas fa-cubes\"/>&nbsp;\n                                                {data.programCount} {gettext(\"Programs\")}\n                                            </a>\n                                        : \"---\"}\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                        { data.user_count ?\n                                            <a href={`/tola_management/user/?countries[]=${data.id}`}>\n                                                <i className=\"fas fa-users\"/>&nbsp;\n                                                {data.user_count} {gettext(\"Users\")}\n                                            </a>\n                                        : '---'  }\n                                    </Col>\n                                </Row>\n                            }\n                        />\n                    </div>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div id=\"users-count\">{store.country_count ? `${store.country_count} ${gettext(\"countries\")}`:`---`}</div>\n                    <div id =\"pagination-controls\">\n                        {store.total_pages &&\n                         <Pagination\n                            pageCount={store.total_pages}\n                            initialPage={store.current_page}\n                            onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\nimport Select from 'react-select'\nimport { observer } from \"mobx-react\"\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport classNames from 'classnames'\n\n\nconst ErrorFeedback = observer(({errorMessages}) => {\n    if (!errorMessages) {\n        return null\n    }\n    return (\n    <div className=\"invalid-feedback\">\n        {errorMessages.map((message, index) =>\n            <span key={index}>{message}</span>\n        )}\n    </div>\n    )\n})\n@observer\nexport default class EditCountryProfile extends React.Component {\n    constructor(props) {\n        super(props)\n        const {country_data} = props\n\n        this.state = {\n            original_data: Object.assign({}, country_data),\n            managed_data: Object.assign({}, country_data)\n        }\n    }\n\n\n    save(e) {\n        e.preventDefault()\n        const country_id = this.props.country_data.id\n        const country_data = this.state.managed_data\n        this.props.onUpdate(country_id, country_data)\n    }\n\n    saveNew(e) {\n        e.preventDefault()\n        const country_data = this.state.managed_data\n        this.props.onCreate(country_data)\n    }\n\n    updateFormField(fieldKey, val) {\n        this.setState({\n            managed_data: Object.assign(this.state.managed_data, {[fieldKey]: val})\n        })\n    }\n\n    resetForm() {\n        this.setState({\n            managed_data: Object.assign({}, this.state.original_data)\n        })\n    }\n\n    formErrors(fieldKey) {\n        return this.props.errors[fieldKey]\n    }\n\n    render() {\n        const formdata = this.state.managed_data\n        const selectedOrganization = this.props.organizationOptions.find(x=>x.value==formdata.organization)\n        return (\n            <div className=\"tab-pane--react\">\n                <form className=\"form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"country-name-input\">{gettext(\"Country name\")}<span className=\"required\">*</span></label>\n                        <input\n                            type=\"text\"\n                            value={formdata.country}\n                            onChange={(e) => this.updateFormField('country', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('country') })}\n                            id=\"country-name-input\"\n                            required />\n                        <ErrorFeedback errorMessages={this.formErrors('country')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"country-description-input\">{gettext(\"Description\")}</label>\n                        <textarea\n                            value={formdata.description}\n                            onChange={(e) => this.updateFormField('description', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('description') })}\n                            id=\"country-description-input\"\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('description')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"country-code-input\">{gettext(\"Country Code\")}</label>\n                        <input\n                            value={formdata.code}\n                            onChange={(e) => this.updateFormField('code', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('code') })}\n                            id=\"country-code-input\"\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('code')} />\n                    </div>\n                    {this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" onClick={(e) => this.saveNew(e)}>{gettext(\"Save Changes\")}</button>\n                        {/* <button className=\"btn btn-primary\" onClick={(e) => this.saveNewAndAddAnother(e)}>Save And Add Another</button> */}\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                    {!this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" onClick={(e) => this.save(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                </form>\n            </div>\n        )\n    }\n}\n","import { observable, computed, action, runInAction } from \"mobx\";\n\n\nconst new_objective_data = {\n    id: 'new',\n    name: '',\n    description: '',\n    status: '',\n}\n\n\nexport class CountryStore {\n\n    //filter options\n    @observable organizations = {}\n    @observable users = []\n    @observable sectors = []\n\n    @observable filters = {\n        countries: [],\n        organizations: [],\n        sectors: [],\n        programStatus: null,\n        programs: [],\n    }\n\n    @observable is_superuser = false\n    @observable allCountries = []\n    @observable countries = []\n    @observable country_count = 0\n    @observable new_country = null\n    @observable fetching_main_listing = false\n    @observable current_page = 0\n    @observable total_pages = null\n    @observable bulk_targets = new Map()\n    @observable bulk_targets_all = false\n\n    @observable editing_target = null\n    @observable editing_errors = {}\n    @observable fetching_editing_data = true\n    @observable editing_objectives_data = []\n    @observable editing_objectives_errors = {}\n    @observable editing_disaggregations_data = []\n    @observable editing_disaggregations_errors = {}\n    @observable saving = false\n\n    @observable bulk_targets = new Map()\n    @observable applying_bulk_updates = false\n    @observable bulk_targets_all = false\n\n    constructor(\n        api,\n        initialData,\n    ) {\n        this\n        this.api = api\n        Object.assign(this, initialData)\n        this.fetchCountries()\n    }\n\n    marshalFilters(filters) {\n        return Object.entries(filters).reduce((xs, [filterKey, filterValue]) => {\n            if (Array.isArray(filterValue)) {\n                xs[filterKey] = filterValue.map(x => x.value)\n            } else if (filterValue) {\n                xs[filterKey] = filterValue.value\n            }\n            return xs\n        }, {})\n    }\n\n    @action\n    fetchCountries() {\n        this.fetching_main_listing = true\n        this.api.fetchCountries(this.current_page + 1, this.marshalFilters(this.filters)).then(results => {\n            runInAction(() => {\n                this.fetching_main_listing = false\n                this.countries = results.results\n                this.country_count = results.total_results\n                this.total_pages = results.total_pages\n                this.next_page =results.next_page\n                this.previous_page = results.previous_page\n            })\n        })\n\n    }\n\n    @action\n    applyFilters() {\n        this.current_page = 0\n        this.fetchCountries()\n    }\n\n    @action\n    changePage(page) {\n        if (page.selected == this.current_page) {\n            return\n        }\n        this.current_page = page.selected\n        this.bulk_targets = new Map()\n        this.bulk_targets_all = false;\n        this.fetchCountries()\n    }\n\n    @action\n    changeFilter(filterKey, value) {\n        this.filters = Object.assign(this.filters, {[filterKey]: value})\n    }\n\n    @action\n    clearFilters() {\n        let clearFilters = {\n            countries: [],\n            organizations: [],\n            sectors: [],\n            programStatus: null,\n            programs: [],\n        }\n        this.filters = Object.assign(this.filters, clearFilters);\n    }\n\n    @action\n    toggleEditingTarget(id) {\n        if(this.editing_target == 'new') {\n            this.countries.shift()\n            this.editing_errors = {}\n        }\n\n        if(this.editing_target == id) {\n            this.editing_target = false\n            this.editing_errors = {}\n        } else {\n            this.editing_target = id\n            this.fetching_editing_data = true\n            Promise.all([\n                this.api.fetchCountryObjectives(id),\n                this.api.fetchCountryDisaggregations(id),\n            ]).then(([objectives_resp, disaggregations_resp]) => {\n                runInAction(() => {\n                    this.fetching_editing_data = false\n                    this.editing_objectives_data = objectives_resp.data\n                    this.editing_disaggregations_data = disaggregations_resp.data\n                })\n            })\n        }\n    }\n\n    updateLocalList(updated) {\n        this.countries = this.countries.reduce((acc, current) => {\n            if (current.id == updated.id) {\n                acc.push(updated)\n            } else {\n                acc.push(current)\n            }\n            return acc\n        }, [])\n    }\n\n    onSaveSuccessHandler() {\n        PNotify.success({text: gettext(\"Successfully Saved\"), delay: 5000})\n    }\n\n    onSaveErrorHandler(message) {\n        PNotify.error({text: message || gettext(\"Saving Failed\"), delay: 5000})\n    }\n\n    onDeleteSuccessHandler() {\n        PNotify.success({text: gettext(\"Successfully Deleted\"), delay: 5000})\n    }\n\n    @action\n    addCountry() {\n        if(this.editing_target == 'new') {\n            this.countries.shift()\n        }\n\n        let new_country_data = {\n            id: \"new\",\n            country: \"\",\n            description: \"\",\n            code: \"\",\n            organizations: [],\n        }\n        this.countries.unshift(new_country_data)\n        this.editing_target = 'new'\n    }\n\n    @action\n    saveNewCountry(country_data) {\n        country_data.id = null\n        this.saving = true\n        this.api.createCountry(country_data).then(response => {\n            runInAction(()=> {\n                this.saving = false\n                this.editing_target = false\n                this.countries.shift()\n                this.countries.unshift(response.data)\n            })\n        }).catch(errors => {\n            runInAction(()=> {\n                this.saving = false\n                this.editing_errors = errors.response.data\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action updateCountry(id, country_data) {\n        this.saving = true\n        this.api.updateCountry(id, country_data).then(response => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_target = false\n                this.updateLocalList(response.data)\n                this.onSaveSuccessHandler()\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = errors.response.data\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action addObjective() {\n        if (this.editing_objectives_data.find(objective => objective.id=='new')) {\n            return\n        }\n        this.editing_objectives_data = [...this.editing_objectives_data, new_objective_data]\n    }\n\n    @action updateObjective(id, data) {\n        this.editing_objectives_errors = {}\n        this.api.updateObjective(id, data).then(response => {\n            runInAction(() => {\n                this.onSaveSuccessHandler()\n                let updatedObjective = response.data\n                this.editing_objectives_data = this.editing_objectives_data.map(objective => {\n                    if (objective.id == updatedObjective.id) {\n                        return updatedObjective\n                    }\n                    return objective\n                })\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_objectives_errors = errors.response.data\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action createObjective(data) {\n        this.editing_objectives_errors = {}\n        this.api.createObjective(data).then(response => {\n            runInAction(() => {\n                this.onSaveSuccessHandler()\n                let newObjective = response.data\n                this.editing_objectives_data = [...this.editing_objectives_data.filter(objective => objective.id!='new'), newObjective]\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_objectives_errors = errors.response.data\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action deleteObjective(id) {\n        if (id=='new') {\n            this.editing_objectives_data = this.editing_objectives_data.filter(objective => objective.id!='new')\n            return\n        }\n        this.api.deleteObjective(id).then(response => {\n            runInAction(() => {\n                this.editing_objectives_data = this.editing_objectives_data.filter(objective => objective.id!=id)\n                this.onDeleteSuccessHandler()\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action clearObjectiveEditingErrors() {\n        this.editing_objectives_errors = {}\n    }\n\n    @action clearDisaggregationEditingErrors() {\n        this.editing_disaggregations_errors = {}\n    }\n\n    @action addDisaggregation() {\n        const new_disaggregation_data = {\n            id: 'new',\n            disaggregation_type: \"\",\n            labels: [],\n        }\n        if (this.editing_disaggregations_data.find(disaggregation => disaggregation.id=='new')) {\n            return\n        }\n        this.editing_disaggregations_data = [...this.editing_disaggregations_data, new_disaggregation_data]\n    }\n\n    @action deleteDisaggregation(id) {\n        if (id=='new') {\n            this.editing_disaggregations_data = this.editing_disaggregations_data.filter(disagg=>disagg.id!='new')\n            return\n        }\n        /*\n        this.api.deleteDisaggregation(id).then(response => {\n            runInAction(() => {\n                this.editing_disaggregations_data = this.editing_disaggregations_data.filter(disagg => disagg.id!=id)\n                this.onDeleteSuccessHandler()\n            })\n        }\n        */\n    }\n\n    @action updateDisaggregation(id, data) {\n        this.editing_disaggregations_errors = {}\n        this.api.updateDisaggregation(id, data).then(response => {\n            runInAction(() => {\n                this.onSaveSuccessHandler()\n                let updatedDisaggregation = response.data\n                this.editing_disaggregations_data = this.editing_disaggregations_data.map(disaggregation => {\n                    if (disaggregation.id == updatedDisaggregation.id) {\n                        return updatedDisaggregation\n                    }\n                    return disaggregation\n                })\n            })\n        }).catch((errors) => {\n            this.saving = false\n            this.editing_disaggregations_errors = errors.response.data\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action createDisaggregation(data) {\n        this.editing_disaggregations_errors = {}\n        this.api.createDisaggregation(data).then(response => {\n            runInAction(() => {\n                this.onSaveSuccessHandler()\n                const newDisaggregation = response.data\n                this.editing_disaggregations_data = [...this.editing_disaggregations_data.filter(disaggregation => disaggregation.id!='new'), newDisaggregation]\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_disaggregations_errors = errors.response.data\n                this.onSaveErrorHandler()\n            })\n        })\n    }\n\n}\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport classNames from 'classnames'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst statusOptions = [\n    {value: 'proposed', label: gettext('Proposed')},\n    {value: 'active', label: gettext('Active')},\n    {value: 'acheived', label: gettext('Achieved')},\n]\n\nconst ErrorFeedback = observer(({errorMessages}) => {\n    if (!errorMessages) {\n        return null\n    }\n    return (\n    <div className=\"invalid-feedback\">\n        {errorMessages.map((message, index) =>\n            <span key={index}>{message}</span>\n        )}\n    </div>\n    )\n})\n\n@observer\nclass StrategicObjectiveForm extends React.Component {\n    constructor(props) {\n        super(props)\n        const {objective} = props\n\n        this.state = {\n            managed_data: {...objective},\n        }\n    }\n\n    updateFormField(fieldKey, value) {\n        const {managed_data} = this.state\n        const modified = Object.assign(managed_data, {[fieldKey]: value})\n        this.setState({managed_data: modified})\n    }\n\n    formErrors(fieldKey) {\n        return this.props.errors[fieldKey]\n    }\n\n    resetForm() {\n        this.props.clearErrors()\n        const {objective} = this.props\n        this.setState({managed_data: {...objective}})\n    }\n\n    render() {\n        const {objective, expanded, expandAction, deleteAction, saveObjective, createObjective} = this.props\n        const {managed_data} = this.state\n        const objective_status = managed_data.status\n        const selectedStatus = objective_status ? statusOptions.find(x=>x.value==objective_status) : {}\n        return (\n        <div className=\"edit-strategic-objective__row\">\n            <div className=\"row-expand__toggle\">\n                <span onClick={expandAction}>\n                    <FontAwesomeIcon icon={expanded ? 'caret-down' : 'caret-right'} />\n                </span>\n            </div>\n            <div className=\"row__content\">\n            <a onClick={expandAction} tabIndex=\"0\">\n                {(objective.id == 'new')? \"New Strategic Objective\" : objective.name}\n            </a>\n            { expanded && (\n                <form className=\"form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"objective-name-input\">\n                            {gettext(\"Code\")}*\n                        </label>\n                        <input\n                            id=\"objective-name-input\"\n                            className={classNames('form-control', {'is-invalid':this.formErrors('name')})}\n                            value={managed_data.name}\n                            onChange={(e) => this.updateFormField('name', e.target.value)}\n                            type=\"text\"\n                            required\n                        />\n                        <ErrorFeedback errorMessages={this.formErrors('name')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"objective-description-input\">\n                            {gettext(\"Objective\")}*\n                        </label>\n                        <textarea\n                            id=\"objective-description-input\"\n                            className={classNames('form-control', {'is-invalid': this.formErrors('description')})}\n                            value={managed_data.description}\n                            onChange={(e) => this.updateFormField('description', e.target.value)}\n                            type=\"text\"\n                        />\n                        <ErrorFeedback errorMessages={this.formErrors('description')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"objective-status-input\">{gettext(\"Status\")}</label>\n                        <Select\n                            value={selectedStatus}\n                            options={statusOptions}\n                            onChange={(e) => this.updateFormField('status', e.value) }\n                            className={classNames('react-select', {'is-invalid': this.formErrors('status')})}\n                            id=\"objective-status-input\"\n                        />\n                        <ErrorFeedback errorMessages={this.formErrors('status')} />\n                    </div>\n                    <div className=\"objective-form-buttons\">\n                        {objective.id=='new' && (\n                            <div className=\"form-group btn-row\">\n                                <button className=\"btn btn-primary\" type=\"button\" onClick={() => createObjective(managed_data)}>{gettext(\"Save Changes\")}</button>\n                            </div>\n                        )}\n                        {objective.id!='new' && (\n                            <div className=\"form-group btn-row\">\n                                <button className=\"btn btn-primary\" type=\"button\" onClick={() => saveObjective(managed_data)}>{gettext(\"Save Changes\")}</button>\n                                <button className=\"btn btn-reset\" type=\"button\" onClick={()=> this.resetForm()}>{gettext(\"Reset\")}</button>\n                            </div>\n                        )}\n                        <div className=\"right-buttons\">\n                            <a tabIndex=\"0\" onClick={deleteAction} className=\"btn btn-link btn-danger\">\n                                <i className=\"fas fa-trash\"/>{gettext(\"Delete\")}\n                            </a>\n                        </div>\n                    </div>\n                </form>\n            )}\n            </div>\n        </div>\n        )\n    }\n}\n\n@observer\nexport default class EditObjectives extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            expanded_id: null,\n        }\n    }\n\n    toggleExpand(id) {\n        this.props.clearErrors()\n        const {expanded_id} = this.state\n        if (id == expanded_id) {\n            this.setState({expanded_id: null})\n        } else {\n            this.setState({expanded_id: id})\n        }\n    }\n\n    addObjective() {\n        this.props.clearErrors()\n        this.props.addObjective()\n        this.setState({expanded_id: 'new'})\n    }\n\n    deleteObjectiveAction(objectiveId) {\n        if (objectiveId=='new') {\n            this.props.onDelete(objectiveId)\n            return\n        }\n        if(confirm(gettext(\"Delete Strategic Objective?\"))) {\n            this.props.onDelete(objectiveId)\n        }\n    }\n\n    updateObjective(objectiveId, data)\n    {\n        this.props.onUpdate(objectiveId, data)\n    }\n\n    createObjective(data)\n    {\n        let objectiveData = Object.assign(data, {country: this.props.country_id})\n        this.props.onCreate(objectiveData)\n    }\n\n    render() {\n        const {expanded_id, new_objective} = this.state\n        const {objectives} = this.props\n        return (\n            <div className=\"tab-pane--react\">\n                <h3>{gettext(\"Strategic Objectives\")}</h3>\n                {objectives.map((objective) =>\n                    <StrategicObjectiveForm\n                        key={objective.id}\n                        objective={objective}\n                        expanded={objective.id==expanded_id}\n                        expandAction={() => this.toggleExpand(objective.id)}\n                        deleteAction={() => this.deleteObjectiveAction(objective.id)}\n                        saveObjective={(data) => this.updateObjective(objective.id, data)}\n                        createObjective={(data) => this.createObjective(data)}\n                        errors={this.props.errors}\n                        clearErrors={this.props.clearErrors}\n                    />\n                )}\n                <div>\n                    <a tabIndex=\"0\" onClick={() => this.addObjective()} className=\"btn btn-link btn-add\">\n                        <i className=\"fas fa-plus-circle\"/>{gettext(\"Add strategic objective\")}\n                    </a>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CountryStore} from './models';\nimport {IndexView} from './views';\nimport api from './api';\n\n/*\n * Model/Store setup\n */\n\nconst initialData = {\n    allCountries: jsContext.countries,\n    organizations: jsContext.organizations,\n    allPrograms: jsContext.programs,\n    is_superuser: jsContext.is_superuser,\n}\n\nconst store = new CountryStore(\n    api,\n    initialData,\n);\n\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector('#app_root')\n);\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n\n    return <ReactPaginate\n            previousLabel={<i className=\"fa fa-angle-left\"></i>}\n            nextLabel={<i className=\"fa fa-angle-right\"></i>}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            subContainerClassName={\"pages pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"6\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport {observer} from 'mobx-react'\n\nconst Option = props => {\n    return (components.Option &&\n        <components.Option {...props}>\n            <input\n            className=\"checkboxed-multi-select-checkbox\"\n            type=\"checkbox\"\n            checked={props.isSelected}\n            onChange={(e) => {\n                //we can let the outer component manage state\n            }}\n            />\n            &nbsp;\n            {props.data.label}\n        </components.Option>\n    )\n}\n\nconst CheckboxedMultiSelect = observer(props => (\n      <Select\n        isMulti={true}\n        closeMenuOnSelect={false}\n        hideSelectedOptions={false}\n        components={{\n            MenuList,\n            Option\n        }}\n        {...props} />\n))\n\nexport default CheckboxedMultiSelect\n","import {api} from '../../../api';\n\n\nexport const fetchCountries = (page, filters) => {\n    return api.get('/tola_management/country/', {params: {page: page, ...filters}}).then(response => {\n        let data = response.data\n        let results = data.results\n        let total_results = data.count\n        let total_pages = data.page_count\n        let next_page = data.next\n        let prev_page = data.previous\n\n        return {\n            results,\n            total_results,\n            total_pages,\n            next_page,\n            prev_page,\n        }\n    })\n}\n\nexport const createCountry = (data) => api.post('/tola_management/country/', data)\n\nexport const updateCountry = (id, data) => api.put(`/tola_management/country/${id}/`, data)\n\nexport const fetchCountryObjectives = (countryId) => {\n    return api.get('/tola_management/countryobjective/', {params: {country: countryId}})\n}\n\nexport const fetchCountryDisaggregations = (countryId) => {\n    return api.get('/tola_management/countrydisaggregation/', {params: {country: countryId}})\n}\n\nexport const createObjective = (data) => api.post('/tola_management/countryobjective/', data)\nexport const updateObjective = (id, data) => api.put(`/tola_management/countryobjective/${id}/`, data)\nexport const deleteObjective = (id) => api.delete(`/tola_management/countryobjective/${id}`)\n\nexport const createDisaggregation = (data) => api.post('/tola_management/countrydisaggregation/', data)\nexport const updateDisaggregation = (id, data) => api.put(`/tola_management/countrydisaggregation/${id}/`, data)\n//export const deleteDisaggregation = (id) => api.delete(`/tola_management/countrydisaggregation/${id}`)\n\n\nexport default {\n    fetchCountries,\n    fetchCountryObjectives,\n    fetchCountryDisaggregations,\n    createCountry,\n    updateCountry,\n    createObjective,\n    updateObjective,\n    deleteObjective,\n    createDisaggregation,\n    updateDisaggregation,\n    //deleteDisaggregation,\n}\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport classNames from 'classnames'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst ErrorFeedback = observer(({errorMessages}) => {\n    if (!errorMessages) {\n        return null\n    }\n    return (\n        <div className=\"invalid-feedback\">\n            {errorMessages.map((message, index) =>\n                <span key={index}>{message}</span>\n            )}\n        </div>\n    )\n})\n\n\n@observer\nclass DisaggregationType extends React.Component {\n    constructor(props) {\n        super(props)\n\n        const {disaggregation} = this.props\n        const labels = disaggregation.labels.map(x => ({...x}))\n        this.state = {\n            managed_data: {...disaggregation, labels: [...labels]},\n        }\n    }\n\n    resetForm() {\n        this.props.clearErrors()\n        const {disaggregation} = this.props\n        const labels = disaggregation.labels.map(x => ({...x}))\n        this.setState({\n            managed_data: {...disaggregation, labels: [...labels]},\n        })\n    }\n\n    formErrors(fieldKey) {\n        return this.props.errors[fieldKey]\n    }\n\n    updateDisaggregationTypeField(value) {\n        this.setState({\n            managed_data: {\n                ...this.state.managed_data,\n                disaggregation_type: value,\n            },\n        })\n    }\n\n    updateLabel(labelIndex, value) {\n        const {managed_data} = this.state\n        const updatedLabels = this.state.managed_data.labels.map((label, idx) => {\n            if (idx==labelIndex) {\n                return Object.assign(label, {label: value})\n            }\n            return label\n        })\n        this.setState({\n            managed_data: {...managed_data, labels: [...updatedLabels]}\n        })\n    }\n\n    appendLabel() {\n        const newLabel = {\n            id: 'new',\n            label: '',\n        }\n        const {managed_data} = this.state\n        this.setState({\n            managed_data: {...managed_data, labels: [...managed_data.labels, newLabel]}\n        })\n    }\n\n    deleteLabel(labelIndex) {\n        const {managed_data} = this.state\n        const updatedLabels = managed_data.labels.filter((label,idx) => idx!=labelIndex || label.in_use)\n        this.setState({\n            managed_data: {...managed_data, labels: [...updatedLabels]}\n        })\n    }\n\n    save() {\n        const {managed_data} = this.state\n        this.props.saveDisaggregation(managed_data)\n    }\n\n    /* could be used to add deletion, but this is not currently spec'd\n    canDelete(disaggregation) {\n        const labels_inuse = disaggregation.labels.some(label=>label.in_use)\n        if ((disaggregation.id == 'new') || !labels_inuse ) {\n            return true\n        }\n        return false\n    }\n    */\n\n    render() {\n        const {disaggregation, expanded, expandAction, deleteAction, errors} = this.props\n        const {managed_data} = this.state\n        return (\n            <div className=\"edit-disaggregation__row\">\n                <div className=\"row-expand__toggle\">\n                    <span onClick={expandAction}>\n                        <FontAwesomeIcon icon={expanded ? 'caret-down' : 'caret-right'} />\n                    </span>\n                </div>\n                <div className=\"row__content\">\n                    <a onClick={expandAction} tabIndex='0'>\n                        {(disaggregation.id == 'new') ? \"New Disaggregation type\" : disaggregation.disaggregation_type}\n                    </a>\n                    {expanded && (\n                        <form>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"disaggregation-type-input\">\n                                    {gettext('Disaggregation Type')}*\n                                </label>\n                                <input\n                                    id=\"disaggregation-type-input\"\n                                    className={classNames('form-control', {'is-invalid':this.formErrors('disaggregation_type')})}\n                                    value={managed_data.disaggregation_type}\n                                    onChange={(e) => this.updateDisaggregationTypeField(e.target.value)}\n                                    type=\"text\"\n                                    required\n                                />\n                                <ErrorFeedback errorMessages={this.formErrors('disaggregation_type')} />\n                            </div>\n                            <label>\n                                Labels\n                            </label>\n                            {managed_data.labels.map((label, labelIndex) =>\n                                <div key={labelIndex} className=\"form-group disaggregation-label-group\">\n                                    <input\n                                        value={label.label}\n                                        onChange={(e) => this.updateLabel(labelIndex, e.target.value)}\n                                        className={classNames(\"form-control\", {\"is-invalid\": (errors.labels ? Object.keys(errors.labels[labelIndex]).length : false)})}\n                                    />\n                                    <a\n                                        tabIndex=\"0\"\n                                        onClick={() => this.deleteLabel(labelIndex)}\n                                        className={classNames(\"btn btn-link btn-danger\", {'disabled': label.in_use})}\n                                        disabled={label.in_use}\n                                    >\n                                        <i className=\"fas fa-trash\"/>{gettext('Remove')}\n                                    </a>\n                                </div>\n                            )}\n                            <div>\n                                <a tabIndex=\"0\" onClick={() => this.appendLabel()} className=\"btn btn-link btn-add\">\n                                    <i className=\"fas fa-plus-circle\"/>{gettext('Add another option')}\n                                </a>\n                            </div>\n                            <div className=\"disaggregation-form-buttons\">\n                                <div className=\"form-row btn-row\">\n                                    {disaggregation.id=='new' ? (\n                                        <button className=\"btn btn-primary\" onClick={(e) => this.save()} type=\"button\">{gettext('Save Changes')}</button>\n                                    ) : (\n                                        <button className=\"btn btn-primary\" onClick={(e) => this.save()} type=\"button\">{gettext('Save Changes')}</button>\n                                    )}\n                                    <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext('Reset')}</button>\n                                </div>\n                                <div className=\"right-buttons\">\n                                    {disaggregation.id=='new' && (\n                                        <a tabIndex=\"0\" onClick={deleteAction} className=\"btn btn-link btn-danger\">\n                                            <i className=\"fas fa-trash\"/>{gettext('Delete')}\n                                        </a>\n                                    )}\n                                </div>\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\n\n@observer\nexport default class EditDisaggregations extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            expanded_id: null,\n        }\n    }\n\n    toggleExpand(id) {\n        this.props.clearErrors()\n        const {expanded_id} = this.state\n        if (id == expanded_id) {\n            this.setState({expanded_id: null})\n        } else {\n            this.setState({expanded_id: id})\n        }\n    }\n\n    addDisaggregation() {\n        this.props.addDisaggregation()\n        this.setState({expanded_id: 'new'})\n    }\n\n    saveDisaggregation(data) {\n        const withCountry = Object.assign(data, {country: this.props.country_id})\n        if (data.id == 'new') {\n            return this.props.onCreate(withCountry)\n        }\n        return this.props.onUpdate(data.id, withCountry)\n    }\n\n    render() {\n        const {disaggregations} = this.props\n        const {expanded_id} = this.state\n        return (\n            <div className=\"tab-pane--react\">\n                <h3>Country Disaggregations</h3>\n                {disaggregations.map(disaggregation =>\n                    <DisaggregationType\n                        key={disaggregation.id}\n                        disaggregation={disaggregation}\n                        expanded={disaggregation.id==expanded_id}\n                        expandAction={() => this.toggleExpand(disaggregation.id)}\n                        updateLabel={(labelIndex, value) => this.updateLabel(disaggregation.id, labelIndex, value)}\n                        deleteAction={() => this.props.onDelete(disaggregation.id)}\n                        saveDisaggregation={(data) => this.saveDisaggregation(data)}\n                        errors={this.props.errors}\n                        clearErrors={this.props.clearErrors}\n                    />\n                )}\n                <div>\n                    {!disaggregations.find(d=> d.id=='new') && (\n                        <a tabIndex=\"0\" className=\"btn btn-link btn-add\" onClick={() => this.addDisaggregation()}>\n                            <i className=\"fas fa-plus-circle\"/>{gettext(\"Add country disaggregation\")}\n                        </a>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport classNames from 'classnames'\n\n@observer\nexport default class CountryEditor extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            active_page: 'profile'\n        }\n    }\n\n    updateActivePage(new_page) {\n        if(!this.props.new) {\n            this.setState({active_page: new_page})\n        }\n    }\n\n    render() {\n        const {ProfileSection, StrategicObjectiveSection, DisaggregationSection} = this.props\n\n        const active_page = this.state.active_page\n\n        return (\n            <div className=\"tab-set--vertical\">\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={classNames('nav-link', {'active': active_page=='profile'})}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('profile')}}>\n                            {gettext(\"Profile\")}\n                            </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={classNames('nav-link', {\n                                'active': active_page=='objectives',\n                                'disabled': this.props.new,\n                            })}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('objectives')}}>\n                            {gettext(\"Strategic Objectives\")}\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={classNames('nav-link', {\n                                'active': active_page=='disaggregations',\n                                'disabled': this.props.new,\n                            })}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('disaggregations')}}>\n                            {gettext(\"Country Disaggregations\")}\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\">\n                    {this.state.active_page == 'profile' && (\n                        <ProfileSection />\n                    )}\n\n                    {this.state.active_page == 'objectives' && (\n                        <StrategicObjectiveSection />\n                    )}\n\n                    {this.state.active_page == 'disaggregations' && (\n                        <DisaggregationSection />\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            folded: false,\n        }\n    }\n\n    toggleFolded() {\n        this.setState({\n            folded: !this.state.folded\n        })\n    }\n\n    render() {\n        const {className, ...props} = this.props\n        const icon = (this.state.folded)?\"fa-chevron-right\":\"fa-chevron-left\"\n        return <div className={\"folding-sidebar \"+(className || '')} {...props}>\n            {!this.state.folded &&\n            <React.Fragment>{this.props.children}</React.Fragment>\n            }\n\n            <div className=\"folding-sidebar__trigger\" onClick={() => this.toggleFolded()}>\n                <i key={icon}><span className={\"fa \"+icon}></span></i>\n            </div>\n        </div>\n    }\n}\n\nexport default Expander\n"],"mappings":"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DA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAAA;AAAA;AAkDA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1DA;AAAA;AAAA;AA6DA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA1EA;AAAA;AAAA;AA8EA;AACA;AACA;AAhFA;AAAA;AAAA;AAoFA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA3FA;AAAA;AAAA;AA+FA;AACA;AAhGA;AAAA;AAAA;AAoGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AA5GA;AAAA;AAAA;AA+GA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtIA;AAAA;AAAA;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjJA;AAAA;AAAA;AAoJA;AAAA;AAAA;AAAA;AACA;AArJA;AAAA;AAAA;AAwJA;AAAA;AAAA;AAAA;AACA;AAzJA;AAAA;AAAA;AA4JA;AAAA;AAAA;AAAA;AACA;AA7JA;AAAA;AAAA;AAiKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AA9KA;AAAA;AAAA;AAiLA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAlMA;AAAA;AAAA;AAoMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AApNA;AAAA;AAAA;AAuNA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA3NA;AAAA;AAAA;AA6NA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAjPA;AAAA;AAAA;AAmPA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAlQA;AAAA;AAAA;AAoQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnRA;AAAA;AAAA;AAsRA;AACA;AAvRA;AAAA;AAAA;AA0RA;AACA;AA3RA;AAAA;AAAA;AA8RA;AACA;AACA;AACA;AAHA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAvSA;AAAA;AAAA;AA0SA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;AAQA;AAtTA;AAAA;AAAA;AAwzGA;AACA;AA4GA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAEA;AACA;;;AAEA;AAEA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AATA;AADA;AAcA;AAAA;AAAA;AAAA;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","sourceRoot":""}