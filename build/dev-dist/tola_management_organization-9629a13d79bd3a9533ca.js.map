{"version":3,"file":"tola_management_organization-9629a13d79bd3a9533ca.js","sources":["webpack:///./js/pages/tola_management_pages/organization/models.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/pages/tola_management_pages/organization/views.js","webpack:///./js/components/expander.js","webpack:///./js/components/pagination.js","webpack:///./js/pages/tola_management_pages/organization/components/organization_editor.js","webpack:///./js/pages/tola_management_pages/organization/components/edit_organization_history.js","webpack:///./js/components/management-table.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/organization/index.js","webpack:///./js/components/folding-sidebar.js","webpack:///./js/pages/tola_management_pages/organization/components/edit_organization_profile.js","webpack:///./js/pages/tola_management_pages/organization/api.js"],"sourcesContent":["import { observable, computed, action, runInAction } from \"mobx\";\nimport api from './api';\n\nconst default_organization = {\n    id: null ,\n    is_active: false,\n    mode_of_contact: \"\",\n    name: \"\",\n    organization_url: null,\n    primary_address: \"\",\n    primary_contact_email: \"\",\n    primary_contact_name: \"\",\n    primary_contact_phone: \"\",\n    sectors: [],\n}\n\nexport class OrganizationStore {\n    @observable organizations = {}\n    @observable organizations_listing = []\n    @observable organizations_count = 0\n    @observable total_pagees = 0\n    @observable fetching = false\n    @observable fetching_editing_target = false\n    @observable current_page = 0\n    @observable saving = false\n\n    @observable bulk_targets = new Map()\n    @observable bulk_targets_all = false\n\n    available_programs = {}\n    available_organizations = {}\n    available_sectors = {}\n    available_countries = {}\n    program_selections = []\n    organization_selections = []\n    sector_selections = []\n    country_selections = []\n\n    @observable editing_target = null\n    @observable editing_target_data = {...default_organization}\n    @observable editing_target_history = []\n    @observable editing_errors = {}\n\n    @observable filters = {\n        countries: [],\n        organizations: [],\n        programs: [],\n        sectors: [],\n        organization_status: '',\n    }\n\n    organization_status_options = [\n        {value: 1, label: gettext('Active')},\n        {value: 0, label: gettext('Inactive')}\n    ]\n\n    constructor(programs, organizations, sectors, countries, country_filter, program_filter) {\n        this.available_programs = programs\n        this.available_organizations = organizations\n        this.available_sectors = sectors\n        this.available_countries = countries\n        this.organization_selections = Object.entries(organizations).map(([id, org]) => ({value: org.id, label: org.name}))\n        this.program_selections = Object.entries(programs).map(([id, program]) => ({value: program.id, label: program.name}))\n        this.sector_selections = Object.entries(sectors).map(([id, sector]) => ({value: sector.id, label: sector.name}))\n        this.country_selections = Object.entries(countries).map(([id, country]) => ({value: country.id, label: country.name}))\n        this.filters.countries = country_filter.map(id => this.available_countries[id]).map(country => ({label: country.name, value: country.id}))\n        this.filters.programs = program_filter.filter(id => programs[id]).map(id => ({label: programs[id].name, value: id}))\n        this.fetchOrganizations()\n    }\n\n    marshalFilters(filters) {\n        return Object.entries(filters).reduce((xs, x) => {\n            if(Array.isArray(x[1])) {\n                xs[x[0]] = x[1].map(x => x.value)\n            } else {\n                xs[x[0]] = x[1].value\n            }\n            return xs\n        }, {})\n    }\n\n    updateLocalOrganization(id, applied_data, aggregates) {\n        this.organizations[id] = {\n            id: id,\n            name: applied_data.name,\n            program_count: aggregates.program_count,\n            user_count: aggregates.user_count,\n            is_active: applied_data.is_active\n        }\n    }\n\n    onSaveErrorHandler() {\n        PNotify.error({text: gettext('Saving Failed'), delay: 5000});\n    }\n\n    onSaveSuccessHandler() {\n        PNotify.success({text: gettext('Successfully Saved'), delay: 5000})\n    }\n\n    @action\n    fetchOrganizations() {\n        this.fetching = true\n\n        api.fetchOrganizationsWithFilter(this.current_page + 1, this.marshalFilters(this.filters)).then(results => {\n            runInAction(() => {\n                this.fetching = false\n                this.organizations = results.organizations.reduce((xs, x) => {\n                    xs[x.id] = x\n                    return xs\n                }, {})\n                this.organizations_listing = results.organizations.map(o => o.id)\n                this.organizations_count = results.total_organizations\n                this.total_pages = results.total_pages\n                this.bulk_targets = new Map(Object.entries(this.organizations).map(([_, organization]) => [organization.id, false]))\n            })\n        })\n    }\n\n    @action\n    applyFilters() {\n        this.current_page = 0\n        this.fetchOrganizations()\n    }\n\n    @action\n    createOrganization() {\n        const new_organization = {\n            id: \"new\",\n            name: \"\",\n            program_count: 0,\n            user_count: 0,\n            is_active: false\n        }\n        if(this.editing_target !== \"new\") {\n            this.organizations_listing.unshift(\"new\")\n        }\n\n        this.editing_errors = {}\n        this.organizations[\"new\"] = new_organization\n        this.editing_target = new_organization.id\n        this.editing_target_data = {...default_organization}\n    }\n\n    @action\n    updateOrganizationProfile(id, new_data) {\n        this.saving = true\n        api.updateOrganization(id, new_data).then(updated_data => api.fetchOrganizationAggregates(id).then(aggregates => {\n            runInAction(() => {\n                this.saving = false\n                this.updateLocalOrganization(id, updated_data, aggregates)\n                this.editing_target = null\n                this.editing_target_data = {...default_organization}\n            })\n            this.onSaveSuccessHandler()\n        })).catch((error) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = error.response.data\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    saveNewOrganization(new_data) {\n        this.saving = true\n        new_data.is_active = true;\n        api.createOrganization(new_data).then(result => {\n            runInAction(() => {\n                this.saving = false\n                this.updateLocalOrganization(result.id, result, {program_count: 0, user_count: 0})\n                this.organizations_listing.shift()\n                delete this.organizations[\"new\"]\n                this.organizations_listing.unshift(result.id)\n                this.editing_target = null\n                this.editing_target_data = {...default_organization}\n                this.bulk_targets = new Map(Object.entries(this.organizations).map(([_, organization]) => [organization.id, false]))\n            })\n            this.onSaveSuccessHandler()\n        }).catch(error => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = error.response.data\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    saveNewOrganizationAndAddAnother(new_data) {\n        this.saving = true\n        new_data.is_active = true;\n        api.createOrganization(new_data).then(result => {\n            runInAction(() => {\n                this.saving = false\n                this.updateLocalOrganization(result.id, result, {program_count: 0, user_count: 0})\n                this.organizations_listing.shift()\n                delete this.organizations[\"new\"]\n                this.organizations_listing.unshift(result.id)\n                this.editing_target = null\n                this.editing_target_data = {...default_organization}\n                this.bulk_targets = new Map(Object.entries(this.organizations).map(([_, organization]) => [organization.id, false]))\n            })\n            this.onSaveSuccessHandler()\n        }).catch(error => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = error.response.data\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    changeSectorFilter(sectors) {\n        this.filters.sectors = sectors\n    }\n\n    @action\n    changeCountryFilter(countries) {\n        this.filters.countries = countries\n    }\n\n    @action\n    changeProgramFilter(programs) {\n        this.filters.programs = programs\n    }\n\n    @action\n    changeOrganizationFilter(organizations) {\n        this.filters.organizations = organizations\n    }\n\n    @action\n    changeOrganizationStatusFilter(status) {\n        this.filters.organization_status = status\n    }\n\n    @action\n    changePage(page) {\n        if(this.current_page != page.selected) {\n            this.current_page = page.selected\n            this.fetchOrganizations()\n        }\n    }\n\n    @action\n    toggleBulkTargetsAll() {\n        this.bulk_targets_all = !this.bulk_targets_all;\n        if(this.bulk_targets_all) {\n            this.bulk_targets.forEach((val, key, map) => {\n                map.set(key, true)\n            })\n        } else {\n            this.bulk_targets.forEach((val, key, map) => {\n                map.set(key, false)\n            })\n        }\n    }\n\n    @action\n    toggleEditingTarget(organization_id) {\n        this.editing_target_data = {...default_organization}\n        this.editing_errors = {}\n\n        if(this.editing_target == \"new\") {\n            this.organizations_listing.shift()\n        }\n\n        if(this.editing_target == organization_id) {\n            this.editing_target = false\n        } else {\n            this.editing_target = organization_id\n            this.fetching_editing_target = true\n            if(!(this.editing_target == 'new')) {\n                Promise.all([api.fetchOrganization(organization_id), api.fetchOrganizationHistory(organization_id)]).then(([organization, history]) => {\n                    runInAction(() => {\n                        this.fetching_editing_target = false\n                        this.editing_target_data = organization\n                        this.editing_target_history = history\n                    })\n                })\n            }\n        }\n    }\n\n    @action\n    toggleBulkTarget(target_id) {\n        this.bulk_targets.set(target_id, !this.bulk_targets.get(target_id))\n    }\n\n    @action\n    clearFilters() {\n        this.filters = {\n            countries: [],\n            organizations: [],\n            programs: [],\n            sectors: [],\n            organization_status: '',\n        }\n    }\n}\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react';\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport ManagementTable from 'components/management-table'\nimport Pagination from 'components/pagination'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\n\nimport OrganizationEditor from './components/organization_editor'\nimport EditOrganizationProfile from './components/edit_organization_profile'\nimport EditOrganizationHistory from './components/edit_organization_history'\n\nimport LoadingSpinner from 'components/loading-spinner'\nimport FoldingSidebar from 'components/folding-sidebar'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst CountryFilter = observer(({store, selections}) => {\n    return <div className=\"form-group\">\n        <label htmlFor=\"countries_permitted_filter\">{gettext(\"Countries\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.countries}\n            options={selections}\n            onChange={(e) => store.changeCountryFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"countries_permitted_filter\" />\n    </div>\n})\n\nconst ProgramFilter = observer(({store, selections}) => {\n    return <div className=\"form-group\">\n        <label htmlFor=\"programs_filter\">{gettext(\"Programs\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.programs}\n            options={selections}\n            onChange={(e) => store.changeProgramFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"programs_filter\" />\n    </div>\n})\n\nconst OrganizationFilter = observer(({store, selections}) => {\n    return <div className=\"form-group\">\n        <label htmlFor=\"organizations_filter\">{gettext(\"Organizations\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.organizations}\n            options={selections}\n            onChange={(e) => store.changeOrganizationFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"organization_filter\" />\n    </div>\n})\n\nconst SectorFilter = observer(({store, selections}) => {\n    return <div className=\"form-group\">\n        <label htmlFor=\"sector_filter\">{gettext(\"Sectors\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.sectors}\n            options={selections}\n            onChange={(e) => store.changeSectorFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"sector_filter\" />\n    </div>\n})\n\nexport const IndexView = observer(\n    ({store}) => {\n        return <div id=\"organization-management-index-view\" className=\"row\">\n            <FoldingSidebar>\n                <div className=\"filter-section\">\n                    <SectorFilter store={store} selections={store.sector_selections} />\n                    <ProgramFilter store={store} selections={store.program_selections} />\n                    <OrganizationFilter store={store} selections={store.organization_selections} />\n                    <CountryFilter store={store} selections={store.country_selections} />\n                    <div className=\"form-group\">\n                        <label htmlFor=\"status_filter\">{gettext(\"Status\")}</label>\n                        <Select\n                        value={store.filters.organization_status}\n                        options={store.organization_status_options}\n                        onChange={(e) => store.changeOrganizationStatusFilter(e)}\n                        placeholder={gettext(\"None Selected\")}\n                        id=\"status_filter\" />\n                    </div>\n                    <div className=\"filter-buttons\">\n                        <button className=\"btn btn-primary\" onClick={() => store.applyFilters()}>{gettext(\"Apply\")}</button>\n                        <button className=\"btn btn-inverse\" onClick={() => store.clearFilters()}>{gettext(\"Reset\")}</button>\n                    </div>\n                </div>\n            </FoldingSidebar>\n            <div className=\"col list-section\">\n                <div className=\"list-controls\">\n                    <div>\n                        <a href=\"#\" tabIndex=\"0\" className=\"btn btn-link btn-add\" onClick={() => store.createOrganization()}>\n                            <FontAwesomeIcon icon={'plus-circle'} /> {gettext(\"Add Organization\")}\n                        </a>\n                    </div>\n                </div>\n                <LoadingSpinner isLoading={store.fetching}>\n                    <div className=\"list-table\">\n                        <ManagementTable\n                            data={store.organizations_listing.map(id => store.organizations[id])}\n                            keyField=\"id\"\n                            HeaderRow={({Col, Row}) =>\n                                <Row>\n                                    <Col size=\"0.15\">\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">{gettext(\"Organization\")}</Col>\n                                    <Col>{gettext(\"Programs\")}</Col>\n                                    <Col size=\"1\">{gettext(\"Users\")}</Col>\n                                    <Col size=\"0.25\">{gettext(\"Status\")}</Col>\n                                </Row>\n                            }\n                            Row={({Col, Row, data}) =>\n                                <Row\n                                    expanded={data.id == store.editing_target}\n                                             Expando={({Wrapper}) =>\n                                                 <Wrapper>\n                                                     <OrganizationEditor\n                                                         new={data.id == 'new'}\n                                                             ProfileSection={observer(() =>\n                                                                 <LoadingSpinner isLoading={store.fetching_editing_target || store.saving}>\n                                                                     <EditOrganizationProfile\n                                                                        new={data.id == 'new'}\n                                                                        sectorSelections={store.sector_selections}\n                                                                        organizationData={store.editing_target_data}\n                                                                        errors={store.editing_errors}\n                                                                        key={store.editing_target_data.id}\n                                                                        onSave={(new_organization_data) => store.updateOrganizationProfile(data.id, new_organization_data)}\n                                                                        onSaveNew={(new_organization_data) => store.saveNewOrganization(new_organization_data)}\n                                                                        onSaveNewAndAddAnother={(new_organization_data) => store.saveNewOrganizationAndAddAnother(new_organization_data)} />\n                                                                 </LoadingSpinner>\n                                                             )}\n                                                             HistorySection={observer(() =>\n                                                                 <LoadingSpinner isLoading={store.fetching_editing_target || store.saving}>\n                                                                    <EditOrganizationHistory\n                                                                        organizationData={store.editing_target_data}\n                                                                        organizationHistoryData={store.editing_target_history}\n                                                                                         onSave={(new_organization_data) => store.updateOrganizationProfile(data.id, new_organization_data)}/>\n                                                                 </LoadingSpinner>\n                                                             )}\n                                                     />\n                                                 </Wrapper>\n                                             }>\n                                    <Col size=\"0.15\">\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">\n                                        <div className=\"icon__clickable\" onClick={() => store.toggleEditingTarget(data.id)} >\n                                            <FontAwesomeIcon icon={'building'} />&nbsp;\n                                            {data.name || \"---\"}\n                                        </div>\n                                    </Col>\n                                    <Col size=\"1\" className=\"text-nowrap\">\n                                        <a href={`/tola_management/program/?organizations[]=${data.id}`}>\n                                            <FontAwesomeIcon icon={'cubes'} />&nbsp;\n                                            {data.program_count} {gettext(\"programs\")}\n                                        </a>\n                                    </Col>\n                                    <Col size=\"1\" className=\"text-nowrap\">\n                                        <a href={`/tola_management/user/?organizations[]=${data.id}`}>\n                                            <FontAwesomeIcon icon={'users'} />&nbsp;\n                                            {data.user_count} {gettext(\"users\")}\n                                        </a>\n                                    </Col>\n                                    <Col size=\"0.25\">{data.is_active?'Active':'Inactive'}</Col>\n                                </Row>\n                            }\n                        />\n                    </div>\n                </LoadingSpinner>\n                <div className=\"list-metadata\">\n                    <div id=\"users-count\">{store.organizations_count?`${store.organizations_count} ${gettext(\"organizations\")}`:`--`}</div>\n                    <div id =\"pagination-controls\">\n                        {store.total_pages &&\n                         <Pagination\n                            pageCount={store.total_pages}\n                            initialPage={store.current_page}\n                            onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: false,\n            overflowing: false,\n        }\n        this.ref = React.createRef()\n    }\n\n    componentDidMount() {\n        if(this.ref.current.scrollHeight > this.ref.current.clientHeight) {\n            this.setState({overflowing: true})\n        }\n    }\n\n    toggleExpanded(e) {\n        e.preventDefault()\n        this.setState({\n            expanded: !this.state.expanded\n        })\n    }\n\n    render() {\n        return <div>\n            <div ref={this.ref} className=\"expander\" style={{height: !this.state.expanded && (this.props.height || 50)}}>\n                {this.props.children}\n            </div>\n            {this.state.overflowing &&\n            <div>\n                <a href=\"\" onClick={(e) => this.toggleExpanded(e)}>{(this.state.expanded)?'Show Less':'Show More'}</a>\n            </div>\n            }\n        </div>\n    }\n}\n\nexport default Expander\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n\n    return <ReactPaginate\n            previousLabel={<i className=\"fa fa-angle-left\"></i>}\n            nextLabel={<i className=\"fa fa-angle-right\"></i>}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            subContainerClassName={\"pages pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import React from 'react'\nimport { observer } from \"mobx-react\"\n\n@observer\nexport default class OrganizationEditor extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            active_page: 'profile'\n        }\n    }\n\n    updateActivePage(new_page) {\n        if(!this.props.new) {\n            this.setState({active_page: new_page})\n        }\n    }\n\n    render() {\n        const {ProfileSection, HistorySection} = this.props\n\n        const profile_active_class = (this.state.active_page == 'profile')?'active':''\n        const history_active_class = (this.state.active_page == 'status_and_history')?'active':''\n        const new_class = (this.props.new)?'disabled':''\n\n        return (\n            <div className=\"user-editor tab-set--vertical\">\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={`nav-link ${profile_active_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('profile')}}>\n                            {gettext(\"Profile\")}\n                        </a>\n                        <a href=\"#\" className={`nav-link ${history_active_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('status_and_history')}}>\n                            {gettext(\"Status and History\")}\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\">\n                    {this.state.active_page == 'profile' &&\n                    <ProfileSection />\n                    }\n\n                    {this.state.active_page == 'status_and_history' &&\n                    <HistorySection />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport {AutoSizer, Table, Column, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Expander from 'components/expander'\n\nconst status_options = [\n    {value: true, label: gettext('Active')},\n    {value: false, label: gettext('Inactive')}\n]\n\nconst ChangesetEntry = ({name, type, data}) => {\n    return <p><strong>{name}</strong>: {(data != undefined && data != null)?data.toString():'N/A'}</p>\n}\n\nexport default class EditOrganizationHistory extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const data = {\n            ...props.organizationData,\n            is_active: status_options.find(op => op.value == props.organizationData.is_active)\n        }\n        this.state = {\n            initial_data: data,\n            data: {...data}\n        }\n    }\n\n    onChange(new_value) {\n        this.state.data.is_active = new_value\n\n        this.setState({\n            data: this.state.data\n        })\n    }\n\n    onReset() {\n        this.setState({\n            data: this.state.initial_data\n        })\n    }\n\n    save(e) {\n        e.preventDefault()\n        this.props.onSave({\n            ...this.state.data,\n            is_active: this.state.data.is_active.value,\n            sectors: this.state.data.sectors.map(sector => sector.id)\n        })\n    }\n\n    render() {\n        return <div className=\"tab-pane--react\">\n            <h2 className=\"no-bold\">{this.state.data.name ? this.state.data.name+\": \": \"\"}{gettext(\"Status and history\")}</h2>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Select options={status_options} value={this.state.data.is_active} onChange={(new_value) => this.onChange(new_value)} />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.save(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.onReset()}>{gettext(\"Reset\")}</button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <table className=\"history-table\">\n                        <thead>\n                            <tr>\n                                <th>{gettext(\"Date\")}</th>\n                                <th>{gettext(\"Admin User\")}</th>\n                                <th>{gettext(\"Change Type\")}</th>\n                                <th>{gettext(\"Previous Entry\")}</th>\n                                <th>{gettext(\"New Entry\")}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.props.organizationHistoryData.map(entry => <tr key={entry.id}>\n                                <td>{entry.date}</td>\n                                <td>{entry.admin_user}</td>\n                                <td>{entry.change_type}</td>\n                                <td className=\"expand-section\">\n                                    <Expander>\n                                        {entry.diff_list.map(changeset => {\n                                                return <ChangesetEntry key={changeset.name} name={changeset.name} type={entry.change_type} data={changeset.prev} />\n                                        })}\n                                    </Expander>\n                                </td>\n                                <td className=\"expand-section\">\n                                    <Expander>\n                                        {entry.diff_list.map(changeset => {\n                                                return <ChangesetEntry key={changeset.name} name={changeset.name} type={entry.change_type} data={changeset.new} />\n                                        })}\n                                    </Expander>\n                                </td>\n                            </tr>)}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    }\n}\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"6\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport {observer} from 'mobx-react'\n\nconst Option = props => {\n    return (components.Option &&\n        <components.Option {...props}>\n            <input\n            className=\"checkboxed-multi-select-checkbox\"\n            type=\"checkbox\"\n            checked={props.isSelected}\n            onChange={(e) => {\n                //we can let the outer component manage state\n            }}\n            />\n            &nbsp;\n            {props.data.label}\n        </components.Option>\n    )\n}\n\nconst CheckboxedMultiSelect = observer(props => (\n      <Select\n        isMulti={true}\n        closeMenuOnSelect={false}\n        hideSelectedOptions={false}\n        components={{\n            MenuList,\n            Option\n        }}\n        {...props} />\n))\n\nexport default CheckboxedMultiSelect\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {OrganizationStore} from './models';\nimport {IndexView} from './views';\n\n/*\n * Model/Store setup\n */\nconst store = new OrganizationStore(\n    jsContext.programs,\n    jsContext.organizations,\n    jsContext.sectors,\n    jsContext.countries,\n    jsContext.country_filter,\n    jsContext.program_filter,\n)\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector('#app_root')\n)\n","import React from 'react'\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            folded: false,\n        }\n    }\n\n    toggleFolded() {\n        this.setState({\n            folded: !this.state.folded\n        })\n    }\n\n    render() {\n        const {className, ...props} = this.props\n        const icon = (this.state.folded)?\"fa-chevron-right\":\"fa-chevron-left\"\n        return <div className={\"folding-sidebar \"+(className || '')} {...props}>\n            {!this.state.folded &&\n            <React.Fragment>{this.props.children}</React.Fragment>\n            }\n\n            <div className=\"folding-sidebar__trigger\" onClick={() => this.toggleFolded()}>\n                <i key={icon}><span className={\"fa \"+icon}></span></i>\n            </div>\n        </div>\n    }\n}\n\nexport default Expander\n","import React from 'react'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport { observer } from \"mobx-react\"\n\n@observer\nexport default class EditOrganizationProfile extends React.Component {\n    constructor(props) {\n        super(props)\n        const o = props.organizationData\n        const data = {\n            ...o,\n            sectors: o.sectors.map(sector => ({value: sector.id, label: sector.sector}))\n        }\n\n        this.state = {\n            initial_data: data,\n            managed_data: {...data}\n        }\n    }\n\n    save(e) {\n        e.preventDefault()\n        this.props.onSave({...this.state.managed_data, sectors: this.state.managed_data.sectors.map(sector => sector.value)})\n    }\n\n    saveNew(e) {\n        e.preventDefault()\n        this.props.onSaveNew({...this.state.managed_data, sectors: this.state.managed_data.sectors.map(sector => sector.value)})\n    }\n\n    saveNewAndAddAnother(e) {\n        e.preventDefault()\n        this.props.onSaveNewAndAddAnother({...this.state.managed_data, sectors: this.state.managed_data.sectors.map(sector => sector.value)})\n    }\n\n    resetForm() {\n        this.setState({\n            managed_data: this.state.initial_data\n        })\n    }\n\n    updateName(new_name) {\n        let new_data = this.state.managed_data\n        new_data.name = new_name\n        this.setState({\n            managed_data: new_data\n        })\n    }\n\n    updateSectors(new_sectors) {\n        let new_data = this.state.managed_data\n        new_data.sectors = new_sectors\n        this.setState({\n            managed_data: new_data\n        })\n    }\n\n    updatePrimaryAddress(new_address) {\n        let new_data = this.state.managed_data\n        new_data.primary_address = new_address\n        this.setState({\n            managed_data: new_data\n        })\n    }\n\n    updatePrimaryContactName(new_name) {\n        let new_data = this.state.managed_data\n        new_data.primary_contact_name = new_name\n        this.setState({\n            managed_data: new_data\n        })\n    }\n\n    updatePrimaryContactEmail(new_email) {\n        let new_data = this.state.managed_data\n        new_data.primary_contact_email = new_email\n        this.setState({\n            managed_data: new_data\n        })\n    }\n\n    updatePrimaryContactPhone(new_phone) {\n        let new_data = this.state.managed_data\n        new_data.primary_contact_phone = new_phone\n        this.setState({\n            managed_data: new_data\n        })\n    }\n\n    updateModeOfContact(new_mode_of_contact) {\n        let new_data = this.state.managed_data\n        new_data.mode_of_contact = new_mode_of_contact\n        this.setState({\n            managed_data: new_data\n        })\n    }\n\n    render() {\n        let od = this.state.managed_data\n        let errors = this.props.errors\n        let error_classes = {\n            name: (errors.name)?'is-invalid':'',\n            primary_address: (errors.primary_address)?'is-invalid':'',\n            primary_contact_name: (errors.primary_contact_name)?'is-invalid':'',\n            primary_contact_email: (errors.primary_contact_email)?'is-invalid':'',\n            primary_contact_phone: (errors.primary_contact_phone)?'is-invalid':'',\n        }\n        return (\n            <div className=\"tab-pane--react\">\n                <h2 className=\"no-bold\">{od.name ? od.name+\": \": \"\"}{gettext(\"Profile\")}</h2>\n                <form className=\"form needs-validation\" noValidate>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"organization-name-input\">{gettext(\"Organization name\")}<span className=\"required\">*</span></label>\n                        <input\n                            type=\"text\"\n                            value={od.name}\n                            onChange={(e) => this.updateName(e.target.value) }\n                            className={\"form-control \"+error_classes.name}\n                            id=\"organization-name-input\"\n                            required />\n                        {errors.name &&\n                        <div className=\"invalid-feedback\">\n                            {errors.name}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"sectors-input\">Sectors</label>\n                        <CheckboxedMultiSelect\n                            value={od.sectors}\n                            options={this.props.sectorSelections}\n                            onChange={(e) => this.updateSectors(e)}\n                            placeholder={gettext(\"None Selected\")}\n                            id=\"sectors-input\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"primary-address-input\">{gettext(\"Primary Address\")}<span className=\"required\">*</span></label>\n                        <textarea\n                            value={od.primary_address}\n                            onChange={(e) => this.updatePrimaryAddress(e.target.value)}\n                            className={\"form-control \"+error_classes.primary_address}\n                            id=\"primary-address-input\"\n                            required />\n                        {errors.primary_address &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_address}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"primary-contact-name-input\">{gettext(\"Primary Contact Name\")}<span className=\"required\">*</span></label>\n                        <input\n                            type=\"text\"\n                            value={od.primary_contact_name}\n                            onChange={(e) => this.updatePrimaryContactName(e.target.value) }\n                            className={\"form-control \"+error_classes.primary_contact_name}\n                            id=\"primary-contact-name-input\"\n                            required />\n                        {errors.primary_contact_name &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_contact_name}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"primary-contact-email-input\">{gettext(\"Primary Contact Email\")}<span className=\"required\">*</span></label>\n                        <input\n                            type=\"text\"\n                            value={od.primary_contact_email}\n                            onChange={(e) => this.updatePrimaryContactEmail(e.target.value) }\n                            className={\"form-control \"+error_classes.primary_contact_email}\n                            id=\"primary-contact-email-input\"\n                            required />\n                        {errors.primary_contact_email &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_contact_email}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"primary-contact-phone-input\">{gettext(\"Primary Contact Phone Number\")}<span className=\"required\">*</span></label>\n                        <input\n                            type=\"text\"\n                            value={od.primary_contact_phone}\n                            onChange={(e) => this.updatePrimaryContactPhone(e.target.value) }\n                            className={\"form-control \"+error_classes.primary_contact_phone}\n                            id=\"primary-contact-phone-input\"\n                            required />\n                        {errors.primary_contact_phone &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_contact_phone}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"mode-of-contact-input\">{gettext(\"Preferred Mode of Contact\")}</label>\n                        <input\n                            type=\"text\"\n                            value={od.mode_of_contact}\n                            onChange={(e) => this.updateModeOfContact(e.target.value) }\n                            className=\"form-control\"\n                            id=\"mode-of-contact-input\" />\n                    </div>\n                    {this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" onClick={(e) => this.saveNew(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-secondary\" onClick={(e) => this.saveNewAndAddAnother(e)}>{gettext(\"Save and Add Another\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                    {!this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" onClick={(e) => this.save(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                </form>\n            </div>\n        )\n    }\n}\n","import {api} from '../../../api';\n\nexport const fetchOrganizationsWithFilter = (page, filters) => api.get('/tola_management/organization/', {params: {page: page, ...filters}}).then(response => {\n    let data = response.data\n    let total_results_count = data.count\n    let current_results_count = data.results.length\n    let total_pages = data.page_count\n\n    return {\n        organizations: data.results,\n        total_pages: total_pages,\n        total_organizations: total_results_count,\n        next_page: data.next,\n        prev_page: data.previous\n    }\n})\n\nexport const fetchOrganization = (id) => api.get(`/tola_management/organization/${id}/`).then(response => response.data)\n\nexport const updateOrganization = (id, new_data) => api.put(`/tola_management/organization/${id}/`, {\n    ...new_data,\n    sectors: new_data.sectors.map(sector => ({id: sector}))\n}).then(response => response.data)\n\nexport const createOrganization = (new_data) => api.post(`/tola_management/organization/`, {\n    ...new_data,\n    sectors: new_data.sectors.map(sector => ({id: sector}))\n}).then(response => response.data)\n\nexport const fetchOrganizationAggregates = id => api.get(`/tola_management/organization/${id}/aggregate_data/`).then(response => response.data)\n\nexport const fetchOrganizationHistory = id => api.get(`/tola_management/organization/${id}/history/`).then(response => response.data)\n\nexport default {\n    fetchOrganizationsWithFilter,\n    fetchOrganization,\n    fetchOrganizationHistory,\n    fetchOrganizationAggregates,\n    updateOrganization,\n    createOrganization,\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAAA;AAAA;AAwrDA;AAAA;AAAA;AAuDA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA/DA;AAAA;AAAA;AAkEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAzEA;AAAA;AAAA;AA4EA;AAAA;AAAA;AAAA;AACA;AA7EA;AAAA;AAAA;AAgFA;AAAA;AAAA;AAAA;AACA;AAjFA;AAAA;AAAA;AAoFA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AApGA;AAAA;AAAA;AAwGA;AACA;AACA;AA1GA;AAAA;AAAA;AA8GA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7HA;AAAA;AAAA;AAgIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjJA;AAAA;AAAA;AAoJA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1KA;AAAA;AAAA;AA6KA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAnM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","sourceRoot":""}