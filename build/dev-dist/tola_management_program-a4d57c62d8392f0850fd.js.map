{"version":3,"file":"tola_management_program-a4d57c62d8392f0850fd.js","sources":["webpack:///./js/pages/tola_management_pages/program/index.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/pages/tola_management_pages/program/components/program_history.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/pages/tola_management_pages/program/api.js","webpack:///./js/components/expander.js","webpack:///./js/components/changelog.js","webpack:///./js/pages/tola_management_pages/program/components/edit_program_profile.js","webpack:///./js/components/pagination.js","webpack:///./js/components/management-table.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/program/views.js","webpack:///./js/pages/tola_management_pages/program/components/program_editor.js","webpack:///./js/components/folding-sidebar.js","webpack:///./js/pages/tola_management_pages/program/models.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ProgramStore} from './models';\nimport {IndexView} from './views';\nimport api from './api';\n\nconst app_root = '#app_root'\n\n\n/*\n * Model/Store setup\n */\n\nconst {\n    country_filter,\n    organization_filter,\n    users_filter,\n    allCountries,\n    countries,\n    organizations,\n    users,\n    programFilterPrograms,\n    sectors,\n} = jsContext\n\n/* formatting filters to be used by the ProgramStore */\nconst makeCountryOptions = (country_ids) => country_ids.map(id => countries[id]).map(country => ({label: country.name, value: country.id}))\nconst makeOrganizationOptions = (org_ids) => org_ids.map(id => organizations[id]).map(org => ({label: org.name, value: org.id}))\nconst makeUserOptions = (user_ids) => user_ids.map(id => users[id]).map(user => ({label: user.name, value: user.id}))\n\nconst filters = {\n    countries: makeCountryOptions(country_filter),\n    organizations: makeOrganizationOptions(organization_filter),\n    users: makeUserOptions(users_filter)\n}\n\nconst initialData = {\n    countries,\n    allCountries,\n    organizations,\n    programFilterPrograms,\n    sectors,\n    filters,\n    users\n}\nconst store = new ProgramStore(\n    api,\n    initialData,\n);\n\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector(app_root)\n);\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","import React from 'react'\nimport Select from 'react-select'\nimport {AutoSizer, Table, Column, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport { observer } from 'mobx-react';\nimport Expander from 'components/expander'\nimport ChangeLog from 'components/changelog'\n\nconst status_options = [\n    {value: 'Funded', label: gettext('Funded')},\n    {value: 'Completed', label: gettext('Completed')}\n]\n\n@observer\nexport class ProgramHistory extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const {program_data} = props\n        this.state = {\n            managed_status: Object.assign({}, program_data),\n            original_status: Object.assign({}, program_data)\n        }\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(JSON.stringify(this.state.managed_status) != JSON.stringify(this.state.original_status))\n    }\n\n    onStatusChange(selection) {\n        let value = selection.value\n        this.setState({\n            managed_status: Object.assign(this.state.managed_status, {'funding_status': value})\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    onSave() {\n        this.props.onSave(this.state.original_status.id, this.state.managed_status)\n    }\n\n    onReset() {\n        this.setState({\n            managed_status: this.state.original_status,\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    render() {\n        const {history, store} = this.props\n        const changelog_expanded_rows = store.changelog_expanded_rows;\n        const currentStatusSelection = status_options.find(x=> x.value == this.state.managed_status.funding_status);\n        return <div className=\"tab-pane--react admin-edit-pane\">\n            <h2 className=\"no-bold\">{this.props.program_data.name ? this.props.program_data.name+': ' : ''}{gettext(\"Status and History\")}</h2>\n            <div className=\"form-group\">\n                <label htmlFor=\"status-input\" className=\"label--required\" required>{gettext(\"Program Status\")}</label>\n                <Select\n                    isSearchable={false}\n                    options={status_options}\n                    value={currentStatusSelection}\n                    onChange={(new_value) => this.onStatusChange(new_value)}\n                />\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={() => this.onSave()}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.onReset()}>{gettext(\"Reset\")}</button>\n                    </div>\n                </div>\n            </div>\n\n            <ChangeLog data={history} expanded_rows={changelog_expanded_rows} toggle_expando_cb={(row_id) => store.toggleChangeLogRowExpando(row_id)} />\n\n        </div>\n    }\n}\n\nexport default ProgramHistory\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import {api} from '../../../api';\n\n\nexport const fetchPrograms = (page, filters) => {\n    return api.get('/tola_management/program/', {params: {page: page, ...filters}}).then(response => {\n        let data = response.data\n        let results = data.results\n        let total_results = data.count\n        let total_pages = data.page_count\n        let next_page = data.next\n        let prev_page = data.previous\n\n        return {\n            results,\n            total_results,\n            total_pages,\n            next_page,\n            prev_page,\n        }\n    })\n}\n\nexport const fetchProgramsForFilter = (filters) => {\n    return api.get('/tola_management/program/program_filter_options', {params: {...filters}})\n}\n\nexport const createProgram = (data) => api.post('/tola_management/program/', data)\n\nexport const updateProgram = (id, data) => api.put(`/tola_management/program/${id}/`, data)\n\nexport const updateProgramFundingStatusBulk = (ids, funding_status) => {\n    return api.post('/tola_management/program/bulk_update_status/', {ids, funding_status})\n}\n\nexport const fetchProgramHistory = (id) => api.get(`/tola_management/program/${id}/history/`)\n\n\nexport default {\n    fetchPrograms,\n    fetchProgramsForFilter,\n    fetchProgramHistory,\n    createProgram,\n    updateProgram,\n    updateProgramFundingStatusBulk,\n}\n","import React from 'react'\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: false,\n            overflowing: false,\n        }\n        this.ref = React.createRef()\n    }\n\n    componentDidMount() {\n        if(this.ref.current.scrollHeight > this.ref.current.clientHeight) {\n            this.setState({overflowing: true})\n        }\n    }\n\n    toggleExpanded(e) {\n        e.preventDefault()\n        this.setState({\n            expanded: !this.state.expanded\n        })\n    }\n\n    render() {\n        return <div className=\"changelog-entry\">\n            <div ref={this.ref} className=\"changelog-entry__expanding\" style={{height: !this.state.expanded && (this.props.height || 50)}}>\n                {this.props.children}\n            </div>\n            {this.state.overflowing &&\n            <div className=\"changelog-entry__expand-trigger\">\n                <a href=\"\" onClick={(e) => this.toggleExpanded(e)}>{(this.state.expanded)?'Show Less':'Show More'}</a>\n            </div>\n            }\n        </div>\n    }\n}\n\nexport default Expander\n","import React from 'react'\nimport { observer } from 'mobx-react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\n\nconst ChangeField = ({name, data}) => {\n    return <div className=\"change__field\">\n        <strong>{name}</strong>: {(data != undefined && data != null)?data.toString():'N/A'}\n    </div>\n}\n\nconst ChangeLogEntryHeader = ({data, is_expanded, toggle_expando_cb}) => {\n    return <tr className={is_expanded ? 'changelog__entry__header is-expanded' : 'changelog__entry__header'} onClick={() => toggle_expando_cb(data.id)}>{/* TODO: apply is-expanded dynamically */}\n        <td className=\"text-nowrap text-action\">\n            <FontAwesomeIcon icon={is_expanded ? 'caret-down' : 'caret-right'} />&nbsp;<strong>{data.date}</strong>\n        </td>\n        <td className=\"text-nowrap\">{data.admin_user}</td>\n        <td className=\"text-nowrap\">{data.pretty_change_type}</td>\n        <td></td>\n        <td></td>\n    </tr>\n}\n\nconst ChangeLogEntryRow = ({data}) => {\n    if (data.change_type == 'user_programs_updated') {\n        // Create multiple row for program/country changes:\n        return <React.Fragment>\n            {Object.entries(data.diff_list.countries).length > 0 &&\n                Object.entries(data.diff_list.countries).map(([id, country]) =>\n                    <tr key={id} className=\"changelog__entry__row\">\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>\n                            <div className=\"changelog__change--prev\">\n                                <ChangeField name=\"country\" data={country.prev.country} />\n                                <ChangeField name=\"role\" data={country.prev.role} />\n                            </div>\n                        </td>\n                        <td>\n                            <div className=\"changelog__change--new\">\n                                <ChangeField name=\"country\" data={country.new.country} />\n                                <ChangeField name=\"role\" data={country.new.role} />\n                            </div>\n                        </td>\n                    </tr>\n                )\n            }\n            {Object.entries(data.diff_list.programs).length > 0 &&\n                Object.entries(data.diff_list.programs).map(([id, program]) =>\n                    <tr key={id} className=\"changelog__entry__row\">\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>\n                            <div className=\"changelog__change--prev\">\n                                <ChangeField name=\"program\" data={program.prev.program} />\n                                <ChangeField name=\"country\" data={program.prev.country} />\n                                <ChangeField name=\"role\" data={program.prev.role} />\n                            </div>\n                        </td>\n                        <td>\n                            <div className=\"changelog__change--new\">\n                                <ChangeField name=\"program\" data={program.new.program} />\n                                <ChangeField name=\"country\" data={program.new.country} />\n                                <ChangeField name=\"role\" data={program.new.role} />\n                            </div>\n                        </td>\n                    </tr>\n                )\n            }\n        </React.Fragment>\n    } else {\n        return <tr className=\"changelog__entry__row\">\n            <td className=\"text-nowrap\"></td>\n            <td></td>\n            <td></td>\n            <td>\n                <div className=\"changelog__change--prev\">\n                    {data.diff_list.map((changeset, id)  =>\n                        <ChangeField key={id} name={changeset.pretty_name} data={changeset.prev} />\n                    )}\n                </div>\n            </td>\n            <td>\n                <div className=\"changelog__change--new\">\n                    {data.diff_list.map((changeset, id) =>\n                        <ChangeField key={id} name={changeset.pretty_name} data={changeset.new} />\n                    )}\n                </div>\n            </td>\n        </tr>\n    }\n}\n\nconst ChangeLogEntry = ({data, is_expanded, toggle_expando_cb}) => {\n    return <tbody className=\"changelog__entry\" key={data.id}>\n        <ChangeLogEntryHeader data={data} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        {is_expanded &&\n        <ChangeLogEntryRow data={data}/>\n        }\n    </tbody>\n}\n\nconst ChangeLog = observer(({data, expanded_rows, toggle_expando_cb}) => {\n    // If expanded_rows is not null/undefined then use it to control expansion/collapse of entries\n    // otherwise, default it to \"open\"\n    return <table className=\"table table-sm bg-white table-bordered text-small changelog\">\n        <thead>\n            <tr>\n                <th className=\"text-nowrap\">{gettext(\"Date\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Admin\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Change Type\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"Previous Entry\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"New Entry\")}</th>\n            </tr>\n        </thead>\n        {data.map((entry) => {\n            let is_expanded = true;\n            if (expanded_rows) {\n                is_expanded = expanded_rows.has(entry.id);\n            }\n            return <ChangeLogEntry key={entry.id} data={entry} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        })}\n    </table>\n});\n\nexport default ChangeLog\n","import React from 'react'\nimport Select from 'react-select'\nimport { observer } from \"mobx-react\"\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport classNames from 'classnames'\n\n\n const fundingStatusOptions = [\n    {value: 'Funded', label: gettext('Funded')},\n    {value: 'Completed', label: gettext('Completed')},\n]\n\nconst ErrorFeedback = observer(({errorMessages}) => {\n    if (!errorMessages) {\n        return null\n    }\n    return (\n    <div className=\"invalid-feedback\">\n        {errorMessages.map((message, index) =>\n            <span key={index}>{message}</span>\n        )}\n    </div>\n    )\n})\n@observer\nexport default class EditProgramProfile extends React.Component {\n    constructor(props) {\n        super(props)\n        const {program_data} = props\n\n        this.state = {\n            original_data: Object.assign({}, program_data),\n            managed_data: Object.assign({}, program_data)\n        }\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(JSON.stringify(this.state.managed_data) != JSON.stringify(this.state.original_data))\n    }\n\n    save() {\n        const program_id = this.props.program_data.id\n        const program_data = this.state.managed_data\n        this.props.onUpdate(program_id, program_data)\n    }\n\n    saveNew(e) {\n        e.preventDefault()\n        const program_data = this.state.managed_data\n        this.props.onCreate(program_data)\n    }\n\n    updateFormField(fieldKey, val) {\n        this.setState({\n            managed_data: Object.assign(this.state.managed_data, {[fieldKey]: val})\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    resetForm() {\n        this.setState({\n            managed_data: Object.assign({}, this.state.original_data)\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    formErrors(fieldKey) {\n        return this.props.errors[fieldKey]\n    }\n\n    render() {\n        const formdata = this.state.managed_data\n        const selectedFundingStatus = fundingStatusOptions.find(x=> x.value == formdata.funding_status)\n        const selectedCountries = formdata.country.map(x=>this.props.countryOptions.find(y=>y.value==x))\n        const selectedSectors = formdata.sector.map(x=>this.props.sectorOptions.find(y=>y.value==x))\n        return (\n            <div className=\"tab-pane--react\">\n                <h2 className=\"no-bold\">{this.props.program_data.name ? this.props.program_data.name+': ' : ''}{gettext(\"Profile\")}</h2>\n                <form className=\"form\">\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"program-name-input\">{gettext(\"Program name\")}</label>\n                        <input\n                            type=\"text\"\n                            value={formdata.name}\n                            onChange={(e) => this.updateFormField('name', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('name') })}\n                            id=\"program-name-input\"\n                            required />\n                        <ErrorFeedback errorMessages={this.formErrors('name')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"program-gait-input\">{gettext(\"GAIT ID\")}</label>\n                        <input\n                            type=\"tel\"\n                            value={formdata.gaitid}\n                            onChange={(e) => this.updateFormField('gaitid', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('gaitid') })}\n                            id=\"program-gait-input\"\n                            disabled={!this.props.new}\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('gaitid')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"program-fund-code-input\">{gettext(\"Fund Code\")}</label>\n                        <input\n                            type=\"tel\"\n                            value=\"\"\n                            onChange={(e) => this.updateFormField('fundCode', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('fundCode') })}\n                            id=\"program-fund-code-input\"\n                            disabled={true}\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('fundCode')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"program-description-input\">{gettext(\"Description\")}</label>\n                        <textarea\n                            value={formdata.description}\n                            onChange={(e) => this.updateFormField('description', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('description') })}\n                            id=\"program-description-input\"\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('description')} />\n                    </div>\n                    <div className=\"form-group react-multiselect-checkbox\">\n                        <label htmlFor=\"program-county-input\">{gettext(\"Countries\")}<span className=\"required\">*</span></label>\n                        <CheckboxedMultiSelect\n                            value={selectedCountries}\n                            options={this.props.countryOptions}\n                            onChange={(e) => this.updateFormField('country', e.map(x=>x.value)) }\n                            className={classNames('react-select', {'is-invalid': this.formErrors('country')})}\n                            id=\"program-country-input\"\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('country')} />\n                    </div>\n                    <div className=\"form-group react-multiselect-checkbox\">\n                        <label htmlFor=\"program-sectors-input\">{gettext(\"Sectors\")}</label>\n                        <CheckboxedMultiSelect\n                            value={selectedSectors}\n                            options={this.props.sectorOptions}\n                            onChange={(e) => this.updateFormField('sector', e.map(x=>x.value)) }\n                            className={classNames('react-select', {'is-invalid': this.formErrors('sector')})}\n                            id=\"program-sectors-input\"\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('sector')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"program-funding-status-input\">{gettext(\"Funding Status\")}</label>\n                        <Select\n                            value={selectedFundingStatus}\n                            options={fundingStatusOptions}\n                            onChange={(e) => this.updateFormField('funding_status', e.value) }\n                            isSearchable={false}\n                            className={classNames('react-select', {'is-invalid': this.formErrors('funding_status')})}\n                            id=\"program-funding-status-input\"\n                            />\n                            <ErrorFeedback errorMessages={this.formErrors('funding_status')} />\n                    </div>\n                    {this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.saveNew(e)}>{gettext(\"Save Changes\")}</button>\n                        {/* <button className=\"btn btn-primary\" onClick={(e) => this.saveNewAndAddAnother(e)}>Save And Add Another</button> */}\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                    {!this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.save(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                </form>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"6\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport {observer} from 'mobx-react'\n\n\nconst CountLabel = props => {\n    return (\n        <div className=\"count__label\">\n            {props.children}\n            {(props.clearable &&\n                <div onClick={ props.clearSelect }>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\" />\n                </div>\n              )}\n        </div>\n    );\n        \n}\n\n@observer\nclass CheckboxedMultiSelect extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    clearSelect = (e) => {\n        e.stopPropagation();\n        this.props.onChange([]);;\n    }\n    makeLabel = (_ref3) => {\n        var placeholderButtonLabel = _ref3.placeholderButtonLabel,\n            thisValue = _ref3.value;\n    \n        if (!thisValue) {\n          return <CountLabel clearable={false}>\n                    {placeholderButtonLabel}\n                </CountLabel>;\n        }\n    \n        if (Array.isArray(thisValue)) {\n          if (thisValue.length === 0) {\n            return <CountLabel clearable={false}>\n                        {placeholderButtonLabel}\n                    </CountLabel>\n          }\n    \n          if (thisValue.length === 1) {\n            return <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                        {thisValue[0].label}\n                    </CountLabel>;\n          }\n          return (\n           <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                {\"\".concat(thisValue.length,\" \", gettext(\"selected\"))}\n            </CountLabel>\n            );\n        }\n    \n        return <CountLabel clearable={false}>\n                    {thisValue.label}\n               </CountLabel>;\n      };\n      render() {\n        return <ReactMultiSelectCheckboxes\n                { ...this.props}\n                placeholder={ gettext(\"Search\")}\n                placeholderButtonLabel={ this.props.placeholder }\n                getDropdownButtonLabel={ this.makeLabel }\n                components={{MenuList}}\n                />;\n      }\n}\n\nexport default CheckboxedMultiSelect\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport ManagementTable from 'components/management-table'\nimport Pagination from 'components/pagination'\nimport ProgramEditor from './components/program_editor'\nimport EditProgramProfile from './components/edit_program_profile'\nimport ProgramHistory from './components/program_history'\nimport LoadingSpinner from 'components/loading-spinner'\nimport FoldingSidebar from 'components/folding-sidebar'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst UserFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"users_filter\">{gettext(\"Users\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.users}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('users', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"users_filter\" />\n    </div>\n})\n\nconst CountryFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"countries_filter\">{gettext(\"Countries\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.countries}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('countries', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"countries_filter\" />\n    </div>\n})\n\nconst OrganizationFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"organizations_filter\">{gettext(\"Organizations\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.organizations}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('organizations', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"organizations_filter\" />\n    </div>\n})\n\nconst SectorFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"sector-filter\">{gettext(\"Sectors\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.sectors}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('sectors', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"sector-filter\" />\n    </div>\n})\n\nconst ProgramStatusFilter = observer(({store}) => {\n    const statusFilterOptions = [\n        {value: 'Active', label: gettext('Active')},\n        {value: 'Closed', label: gettext('Closed')},\n    ]\n    return <div className=\"form-group\">\n        <label htmlFor=\"program-status-filter\">{gettext(\"Status\")}</label>\n        <Select\n            isMulti={false}\n            value={store.filters.programStatus}\n            options={statusFilterOptions}\n            onChange={(e) => store.changeFilter('programStatus', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"program-status-filter\" />\n    </div>\n})\n\nconst ProgramFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"programs-filter\">{gettext(\"Programs\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.programs}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('programs', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"programs-filter\" />\n    </div>\n})\n\n\nclass BulkActions extends React.Component {\n    constructor(props) {\n        super(props)\n        this.active_child = React.createRef()\n        this.state = {\n            current_action: null,\n            current_vals: []\n        }\n    }\n\n    onActionChanged(new_action) {\n        this.setState({\n            current_action: new_action.value\n        })\n    }\n\n    onChange(vals) {\n        this.setState({\n            current_vals: vals\n        })\n    }\n\n    onApply() {\n        const selected = this.props.secondaryOptions[this.state.current_action]\n        if(selected) {\n            selected.onApply(this.state.current_vals)\n        }\n    }\n\n    render() {\n        const selected = this.props.secondaryOptions[this.state.current_action]\n        const SecondaryComponent = selected && selected.component\n        return <div className=\"controls__bulk-actions\">\n            <div className=\"bulk__select\">\n                <Select\n                placeholder={gettext(\"Bulk Actions\")}\n                value={this.props.primaryOptions.find((o) => o.value == this.state.current_action)}\n                options={this.props.primaryOptions} onChange={(val) => this.onActionChanged(val)} />\n            </div>\n            {selected &&\n            <div className=\"bulk__select\">\n                <SecondaryComponent value={this.state.current_vals} onChange={(vals) => this.onChange(vals)}/>\n            </div>\n            }\n            {!selected &&\n            <div className=\"bulk__select\">\n                <Select placeholder=\"---\"/>\n            </div>\n            }\n            <button className=\"btn btn-secondary\" disabled={!this.state.current_action} onClick={() => this.onApply()}>{gettext(\"Apply\")}</button>\n        </div>\n    }\n}\n\nexport const IndexView = observer(\n    ({store}) => {\n\n        const allCountryOptions = Object.entries(store.allCountries).map(([id, country]) => ({value: country.id, label: country.name}))\n        const countryFilterOptions = Object.entries(store.countries).map(([id, country]) => ({value: country.id, label: country.name}))\n        const organizationFilterOptions = Object.entries(store.organizations).map(([id, org]) => ({value: org.id, label: org.name}))\n        const sectorFilterOptions = store.sectors.map(x => ({value: x.id, label: x.name}))\n        const programFilterOptions = Object.entries(store.programFilterPrograms).map(([id, program]) => ({value: program.id, label: program.name}))\n        const userFilterOptions = Object.entries(store.users).map(([id, user]) => ({value: user.id, label: user.name}))\n        const bulkProgramStatusOptions = [\n            {value: 'Funded', label: gettext('Funded')},\n            {value: 'Completed', label: gettext('Completed')},\n        ]\n\n        const bulk_actions = {\n            primary_options: [\n                {label: gettext('Set program status'), value: 'set_program_status'},\n            ],\n            secondary_options: {\n                set_program_status: {\n                    component: (props) => <Select options={bulkProgramStatusOptions} {...props} />,\n                    onApply: (option) => store.bulkUpdateProgramStatus(option.value)\n                },\n            }\n        };\n\n        const organizationColumn = (data) => {\n            if (data.organizations) {\n                return (\n                    <a href={`/tola_management/organization/?programs[]=${data.id}`}>\n                        <i className=\"fas fa-building\"/>&nbsp;\n                        { data.onlyOrganizationId ? store.organizations[data.onlyOrganizationId].name : `${data.organizations} organizations` }\n                    </a>\n                )\n            }\n            return \"---\"\n        };\n\n        return <div id=\"program-management-index-view\" className=\"row\">\n            <FoldingSidebar>\n                <div className=\"filter-section\">\n                    <CountryFilter store={store} filterOptions={countryFilterOptions} />\n                    <UserFilter store={store} filterOptions={userFilterOptions} />\n                    <OrganizationFilter store={store} filterOptions={organizationFilterOptions} />\n                    <SectorFilter store={store} filterOptions={sectorFilterOptions} />\n                    <ProgramStatusFilter store={store} />\n                    <ProgramFilter store={store} filterOptions={programFilterOptions} />\n                </div>\n                <div className=\"filter-section filter-buttons\">\n                    <button className=\"btn btn-primary\" onClick={() => store.applyFilters()}>{gettext(\"Apply\")}</button>\n                    <button className=\"btn btn-inverse\" onClick={() => store.clearFilters()}>{gettext(\"Reset\")}</button>\n                </div>\n            </FoldingSidebar>\n            <div className=\"col admin-list\">\n                <header className=\"page-title\">\n                    <h1>{gettext(\"Admin:\")} <small>{gettext(\"Programs\")}</small></h1>\n                </header>\n                <div className=\"admin-list__controls\">\n                    <BulkActions primaryOptions={bulk_actions.primary_options} secondaryOptions={bulk_actions.secondary_options}/>\n                    <div className=\"controls__buttons\">\n                        <a href=\"#\" className=\"btn btn-link btn-add\" tabIndex=\"0\" onClick={() => store.createProgram()}>\n                            <i className=\"fas fa-plus-circle\"/>{gettext(\"Add Program\")}\n                        </a>\n                    </div>\n                </div>\n                <LoadingSpinner isLoading={store.fetching_main_listing || store.applying_bulk_updates }>\n                    <div className=\"admin-list__table\">\n                        <ManagementTable\n                            newData={store.new_program}\n                            data={store.programs}\n                            keyField=\"id\"\n                            HeaderRow={({Col, Row}) =>\n                                <Row>\n                                    <Col size=\"0.5\">\n                                        <input type=\"checkbox\" checked={store.bulk_targets_all} onChange={() => store.toggleBulkTargetsAll()}/>\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">{gettext(\"Program\")}</Col>\n                                    <Col>{gettext(\"Organizations\")}</Col>\n                                    <Col>{gettext(\"Users\")}</Col>\n                                    <Col>{gettext(\"Status\")}</Col>\n                                </Row>\n                            }\n                            Row={({Col, Row, data}) =>\n                            <Row\n                                expanded={data.id == store.editing_target}\n                                Expando={observer(({Wrapper}) =>\n                                    <Wrapper>\n                                        <ProgramEditor\n                                            new={data.id == 'new'}\n                                            active_pane={store.active_editor_pane}\n                                            notifyPaneChange={(new_pane) => store.onProfilePaneChange(new_pane)}\n                                            ProfileSection={observer(() =>\n                                                <LoadingSpinner isLoading={store.saving}>\n                                                    <EditProgramProfile\n                                                        onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                        new={data.id == 'new'}\n                                                            program_data={data}\n                                                            onUpdate={(id, data) => store.updateProgram(id, data)}\n                                                            onCreate={(new_program_data) => store.saveNewProgram(new_program_data)}\n                                                            sectorOptions={sectorFilterOptions}\n                                                            countryOptions={allCountryOptions}\n                                                            errors={store.editing_errors} />\n                                                </LoadingSpinner>\n                                            )}\n                                            HistorySection={observer(() =>\n                                                <LoadingSpinner isLoading={store.saving}>\n                                                    <ProgramHistory\n                                                        store={store}\n                                                        onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                        program_data={data}\n                                                        fetching_history={store.fetching_editing_history}\n                                                        history={store.editing_history}\n                                                        saving={store.saving}\n                                                        onSave={(id, data) => store.updateProgram(id, data)} />\n                                                </LoadingSpinner>\n                                            )}\n                                        />\n                                    </Wrapper>\n                                )}>\n                                    <Col size=\"0.5\">\n                                            <input type=\"checkbox\" disabled={data.id=='new'} checked={store.bulk_targets.get(data.id) || false} onChange={() => store.toggleBulkTarget(data.id) }/>\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">\n                                        {data.id == 'new' &&\n                                            <div className=\"expando-toggle icon__disabled\">\n                                                <div className=\"expando-toggle__icon\">\n                                                    <FontAwesomeIcon icon={(store.editing_target == data.id) ? 'caret-down' : 'caret-right'} />\n                                                </div>\n                                                <div className=\"expando-toggle__label\">\n                                                    <i className=\"fas fa-cube\"/>&nbsp;\n                                                    {data.name || \"New Program\"}\n                                                </div>\n                                            </div>\n                                        }\n                                        {data.id != 'new' &&\n                                            <div className=\"expando-toggle icon__clickable\" onClick={() => store.toggleEditingTarget(data.id)} >\n                                                <div className=\"expando-toggle__icon\">\n                                                    <FontAwesomeIcon icon={(store.editing_target == data.id) ? 'caret-down' : 'caret-right'} />\n                                                </div>\n                                                <div className=\"expando-toggle__label\">\n                                                    <i className=\"fas fa-cube\"/>&nbsp;\n                                                    {data.name || \"New Program\"}\n                                                </div>\n                                            </div>\n                                        }\n                                    </Col>\n                                    <Col>\n                                        { organizationColumn(data)}\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                        {data.program_users ? <a href={`/tola_management/user/?programs[]=${data.id}`}><i className=\"fas fa-users\"/>&nbsp;{data.program_users} users</a> : '---'  }\n                                    </Col>\n                                    <Col>{data.funding_status ? data.funding_status : '---'}</Col>\n                                </Row>\n                            }\n                        />\n                    </div>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-small text-muted\">{store.program_count ? `${store.program_count} ${gettext(\"programs\")}`:`---`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                            pageCount={store.total_pages}\n                            initialPage={store.current_page}\n                            onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\nimport { observer } from \"mobx-react\"\n\n@observer\nexport default class ProgramEditor extends React.Component {\n\n    updateActivePage(new_page) {\n        if(!this.props.new) {\n            this.props.notifyPaneChange(new_page)\n        }\n    }\n\n    render() {\n        const {ProfileSection, HistorySection, active_pane} = this.props\n\n        const profile_active_class = (active_pane == 'profile')?'active':''\n        const history_active_class = (active_pane == 'status_and_history')?'active':''\n        const new_class = (this.props.new)?'disabled':''\n\n        return (\n            <div className=\"user-editor tab-set--vertical\">\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={`nav-link ${profile_active_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('profile');}}>\n                            {gettext(\"Profile\")}\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={`nav-link ${history_active_class} ${new_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('status_and_history')}}>\n                            {gettext(\"Status and History\")}\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\">\n                    {active_pane == 'profile' &&\n                    <ProfileSection />\n                    }\n\n                    {active_pane == 'status_and_history' &&\n                    <HistorySection />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\n/* Sidebar expando/collapso mimicking bootstrap behavior\n * CSS in components/_folding_sidebar.scss\n * Usage: <FoldingSidebar>\n *          children to be hidden when toggle is clicked\n *         </FoldingSidebar>\n */\n\nclass FoldingSidebar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            folding: false,\n            folded: false,\n            resize: false\n        };\n        this.contentsContainer = React.createRef();\n    }\n\n    componentDidMount() {\n        this.contentWidth = this.contentsContainer.current.offsetWidth;\n        window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if (!this.state.folded && !this.state.folding) {\n            this.setState(() => ({resize: true}),\n                          () => {\n                            this.contentWidth = this.contentsContainer.current.offsetWidth;\n                            this.setState({resize: false});\n                          });\n        }\n    }\n\n    toggleFolded() {\n        if (!this.state.folding) {\n            this.setState(\n                {folding: true,\n                 folded: !this.state.folded});\n        } else {\n            this.foldComplete();\n        }\n    }\n\n    foldComplete() {\n        this.setState(() => ({folding: false}), this.updateDimensions);\n    }\n\n    render() {\n        const {className, ...props} = this.props\n        const icon = this.state.folded\n                     ? this.state.folding\n                        ? \"fa-angle-double-left\" : \"fa-chevron-right\"\n                     : this.state.folding\n                        ? \"fa-angle-double-right\" : \"fa-chevron-left\";\n        const width = this.state.folded ? \"0px\" : this.state.resize ? \"auto\" : this.contentWidth + \"px\";\n        const overflow = (this.state.folded || this.state.folding) ? \"hidden\" : \"visible\";\n        return (\n        <div className={\"folding-sidebar \"+(className || '')} {...props}>\n            <div className={\"folding-sidebar__contents\"}\n                 onTransitionEnd={() => this.foldComplete()}\n                 ref={this.contentsContainer}\n                style={{width: width, overflow: overflow }}\n            >\n                <React.Fragment>{this.props.children}</React.Fragment>\n            </div>\n            <div className=\"folding-sidebar__trigger\" onClick={() => this.toggleFolded()}>\n                <i key={icon}><span className={\"fa \"+icon}></span></i>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default FoldingSidebar\n","import { observable, computed, action, runInAction } from \"mobx\";\n\n\nexport class ProgramStore {\n\n    //filter options\n    @observable countries = {}\n    @observable allCountries = {}\n    @observable organizations = {}\n    @observable users = {}\n    @observable sectors = []\n\n    @observable filters = {\n        countries: [],\n        organizations: [],\n        sectors: [],\n        programStatus: null,\n        programs: [],\n        users: []\n    }\n\n    @observable appliedFilters = {\n    }\n\n    @observable programFilterPrograms = []\n    @observable programs = []\n    @observable program_count = 0\n    @observable new_program = null\n    @observable fetching_main_listing = false\n    @observable current_page = 0\n    @observable total_pages = null\n    @observable bulk_targets = new Map()\n    @observable bulk_targets_all = false\n\n    @observable editing_target = null\n    @observable editing_errors = {}\n    @observable fetching_editing_history = true\n    @observable editing_history = []\n    @observable saving = false\n\n    @observable applying_bulk_updates = false\n\n    @observable active_editor_pane = 'profile'\n\n    // UI state - track what history rows are expanded\n    @observable changelog_expanded_rows = new Set();\n\n    active_pane_is_dirty = false\n\n    constructor(\n        api,\n        initialData,\n    ) {\n        this.api = api\n        Object.assign(this, initialData)\n        this.appliedFilters = {...this.filters}\n        this.fetchPrograms()\n    }\n\n    marshalFilters(filters) {\n        return Object.entries(filters).reduce((xs, [filterKey, filterValue]) => {\n            if (Array.isArray(filterValue)) {\n                xs[filterKey] = filterValue.map(x => x.value)\n            } else if (filterValue) {\n                xs[filterKey] = filterValue.value\n            }\n            return xs\n        }, {})\n    }\n\n    dirtyConfirm() {\n        return !this.active_pane_is_dirty || (this.active_pane_is_dirty && confirm(gettext(\"You have unsaved changes. Are you sure you want to discard them?\")))\n    }\n\n    @action\n    onProfilePaneChange(new_pane) {\n        if(this.dirtyConfirm()) {\n            this.active_editor_pane = new_pane\n            this.active_pane_is_dirty = false\n        }\n    }\n\n    setActiveFormIsDirty(is_dirty) {\n        this.active_pane_is_dirty = is_dirty\n    }\n\n    setActivePaneSaveAction(action) {\n        this.active_pane_save = action\n    }\n\n    @action\n    fetchPrograms() {\n        if(this.dirtyConfirm()) {\n            this.fetching_main_listing = true\n            this.api.fetchPrograms(this.current_page + 1, this.marshalFilters(this.appliedFilters)).then(results => {\n                runInAction(() => {\n                    this.fetching_main_listing = false\n                    this.programs = results.results\n                    this.program_count = results.total_results\n                    this.total_pages = results.total_pages\n                    this.next_page =results.next_page\n                    this.previous_page = results.previous_page\n                    this.active_editor_pane = 'profile'\n                    this.active_pane_is_dirty = false\n                })\n            })\n            this.api.fetchProgramsForFilter(this.marshalFilters(this.appliedFilters)).then(response => {\n                runInAction(() => {\n                    this.programFilterPrograms = response.data\n                })\n            })\n        }\n\n    }\n\n    @action\n    applyFilters() {\n        this.appliedFilters = {...this.filters}\n        this.current_page = 0\n        this.fetchPrograms()\n    }\n\n    @action\n    changePage(page) {\n        if (page.selected == this.current_page) {\n            return\n        }\n        this.current_page = page.selected\n        this.bulk_targets = new Map()\n        this.bulk_targets_all = false;\n        this.fetchPrograms()\n    }\n\n    @action\n    changeFilter(filterKey, value) {\n        this.filters = Object.assign(this.filters, {[filterKey]: value})\n    }\n\n    @action\n    clearFilters() {\n        let clearFilters = {\n            countries: [],\n            organizations: [],\n            sectors: [],\n            programStatus: null,\n            programs: [],\n            users: []\n        }\n        this.filters = Object.assign(this.filters, clearFilters);\n    }\n\n    @action\n    toggleEditingTarget(id) {\n        if(this.dirtyConfirm()) {\n            if(this.editing_target == 'new') {\n                this.programs.shift()\n                this.editing_errors = {}\n            }\n            this.active_editor_pane = 'profile'\n\n            if(this.editing_target == id) {\n                this.editing_target = false\n                this.editing_errors = {}\n            } else {\n                this.editing_target = id\n                this.fetching_editing_history = true\n                this.api.fetchProgramHistory(id).then(resp => {\n                    runInAction(() => {\n                        this.fetching_editing_history = false\n                        this.editing_history = resp.data\n                    })\n                })\n            }\n        }\n    }\n\n    updateLocalPrograms(updated) {\n        this.programs = this.programs.reduce((acc, current) => {\n            if (current.id == updated.id) {\n                acc.push(updated)\n            } else {\n                acc.push(current)\n            }\n            return acc\n        }, [])\n    }\n\n    onSaveSuccessHandler() {\n        PNotify.success({text: gettext(\"Successfully Saved\"), delay: 5000})\n    }\n\n    onSaveErrorHandler() {\n        PNotify.error({text: gettext(\"Saving Failed\"), delay: 5000})\n    }\n\n    @action\n    createProgram() {\n        if(this.dirtyConfirm()) {\n            if(this.editing_target == 'new') {\n                this.programs.shift()\n            }\n            this.active_editor_pane = 'profile'\n            this.active_pane_is_dirty = false\n\n            let new_program_data = {\n                id: \"new\",\n                name: \"\",\n                gaitid: \"\",\n                fundcode: \"\",\n                funding_status: \"\",\n                description: \"\",\n                country: [],\n                sector: [],\n            }\n            this.programs.unshift(new_program_data)\n            this.editing_target = 'new'\n        }\n    }\n\n    @action\n    saveNewProgram(program_data) {\n        program_data.id = null\n        this.saving = true\n        this.api.createProgram(program_data).then(response => {\n            runInAction(()=> {\n                this.saving = false\n                this.editing_target = response.data.id\n                this.editing_target_data = response.data\n                this.programs.shift()\n                this.programs.unshift(response.data)\n                this.active_pane_is_dirty = false\n            })\n        }).catch(error => {\n            runInAction(()=> {\n                let errors = error.response.data\n                this.saving = false\n                this.editing_errors = errors\n            })\n        })\n    }\n\n    @action updateProgram(id, program_data) {\n        this.saving = true\n        this.api.updateProgram(id, program_data)\n            .then(response => this.api.fetchProgramHistory(id)\n                .then(history =>\n                    runInAction(() => {\n                        this.saving = false;\n                        this.active_pane_is_dirty = false;\n                        this.editing_target_data = program_data;\n                        this.updateLocalPrograms(response.data);\n                        this.editing_history = history.data;\n                        this.onSaveSuccessHandler();\n                    })))\n            .catch((errors) => {\n                runInAction(() => {\n                    this.saving = false\n                    this.editing_errors = errors.response.data\n                    this.onSaveErrorHandler()\n                })\n            })\n    }\n\n    @action\n    toggleBulkTarget(target_id) {\n        this.bulk_targets.set(target_id, !this.bulk_targets.get(target_id))\n    }\n\n    @action\n    toggleBulkTargetsAll() {\n        this.bulk_targets_all = !this.bulk_targets_all\n        this.bulk_targets = new Map(this.programs.map(program => [program.id, this.bulk_targets_all]))\n    }\n\n    postBulkUpdateLocalPrograms(updatedPrograms) {\n        let updatedProgramsById = new Map(updatedPrograms.map(program => [program.id, program]))\n        this.programs = this.programs.reduce((acc, current) => {\n            let updated = updatedProgramsById.get(current.id)\n            if (updated) {\n                acc.push(Object.assign(current, updated))\n            } else {\n                acc.push(current)\n            }\n            return acc\n        }, [])\n    }\n\n    @action\n    bulkUpdateProgramStatus(new_status) {\n        let ids = Array.from(this.bulk_targets.entries()).filter(([id, targeted]) => targeted).map(([id, targeted]) => id)\n        if (ids.length && new_status) {\n            this.applying_bulk_updates = true\n            this.api.updateProgramFundingStatusBulk(ids, new_status).then(response => {\n                let updatedPrograms = response.data\n                runInAction(() => {\n                    this.postBulkUpdateLocalPrograms(updatedPrograms)\n                    this.applying_bulk_updates = false\n                    this.onSaveSuccessHandler()\n                })\n            }).catch(error => {\n                runInAction(() => {\n                    this.applying_bulk_updates = false\n                    this.onSaveErrorHandler()\n                })\n            })\n        }\n    }\n\n    @action\n    toggleChangeLogRowExpando(row_id) {\n        if (this.changelog_expanded_rows.has(row_id)) {\n            this.changelog_expanded_rows.delete(row_id);\n        } else {\n            this.changelog_expanded_rows.add(row_id);\n        }\n    }\n}\n"],"mappings":"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AA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAMA;AAAA;AAWA;;;;AA1CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;;;;;;;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA1BA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAYA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;;;;AAnEA;AACA;AAqEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AAGA;AAAA;AAAA;AAEA;AAuCA;AAKA;AAGA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAAA;AAAA;AAyDA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjEA;AAAA;AAAA;AAoEA;AACA;AArEA;AAAA;AAAA;AAyEA;AACA;AACA;AACA;AACA;AA7EA;AAAA;AAAA;AAgFA;AACA;AAjFA;AAAA;AAAA;AAoFA;AACA;AArFA;AAAA;AAAA;AAwFA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA9GA;AAAA;AAAA;AAkHA;AACA;AACA;AACA;AArHA;AAAA;AAAA;AAyHA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAhIA;AAAA;AAAA;AAoIA;AACA;AArIA;AAAA;AAAA;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAlJA;AAAA;AAAA;AAqJA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3KA;AAAA;AAAA;AA8KA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAtLA;AAAA;AAAA;AAyLA;AAAA;AAAA;AAAA;AACA;AA1LA;AAAA;AAAA;AA6LA;AAAA;AAAA;AAAA;AACA;AA9LA;AAAA;AAAA;AAkMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AAtNA;AAAA;AAAA;AAyNA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5OA;AAAA;AAAA;AA8OA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AARA;AADA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAlQA;AAAA;AAAA;AAsQA;AACA;AAvQA;AAAA;AAAA;AA0QA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AA7QA;AAAA;AAAA;AAgRA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1RA;AAAA;AAAA;AA6RA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA/SA;AAAA;AAAA;AAmTA;AACA;AACA;AACA;AACA;AACA;AAxsourceRoot":""}