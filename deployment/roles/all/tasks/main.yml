---
- name: Install packages
  apt:
    pkg: '{{global_packages}}'
    state: present
    update_cache: yes
  become: yes

- name: Ensure resolvconf is gone, because it's evil
  apt: pkg=resolvconf state=absent
  become: yes

- name: Install environment specific packages
  become: yes
  apt:
    pkg:
      - nginx
      - uwsgi
      - python
      - python-pip
      - python-virtualenv
      - python-mysqldb
      - mysql-server
      - libmysqld-dev
      - mysql-utilities
      - mysql-client
      - libsasl2-dev
      - python-dev
      - libldap2-dev
      - libssl-dev
      - libcairo2-dev
      - libpango1.0-dev
      - uwsgi-plugin-python
      - apt-transport-https
    state: present
  tags:
    - provision

- name: Create app user
  user:
    name: '{{app_user}}'
    system: no

- name: add mysql db
  become: yes
  mysql_db:
    name: "{{db.name}}"
    login_user: "root"
    state: present

- name: add mysql user
  become: yes
  mysql_user:
    login_user: "root"
    name: "{{db.user}}"
    password: "{{db.password}}"
    priv: "{{db.name}}.*:ALL"
    state: present

- name: create app logfile
  become: yes
  file:
    path: "{{logfile}}"
    owner: "{{app_user}}"
    group: "{{app_user}}"
    state: touch
    mode: 0644

- name: Install vhosts nginx
  become: yes
  template: src=nginx.conf dest="/etc/nginx/sites-enabled/{{app_name}}.conf" owner=root
  tags:
    - nginx
  notify:
    - Restart nginx

- name: create app folder
  become: yes
  file:
    path: "{{install_dir}}"
    owner: "{{app_user}}"
    group: "{{app_user}}"
    state: directory

- name: Sync code up to web servers
  remote_user: "{{app_user}}"
  synchronize: delete=yes src="{{source_dir}}" dest="{{install_dir}}/" owner=no group=no rsync_opts=--exclude-from={{inventory_dir}}/rsync-exclude
  when: is_vagrant is not defined or not is_vagrant
  tags:
    - deploy
  notify:
    - Restart uWSGI

- name: Install uWSGI endpoint
  become: yes
  template: src=uwsgi.ini dest="/etc/uwsgi/apps-enabled/{{app_name}}.ini" owner="{{app_user}}"
  tags:
    - uwsgi
  notify:
    - Restart uWSGI

- name: install python dependencies
  become: yes
  become_user: "{{ app_user }}"
  pip:
    requirements: "{{requirements_file}}"
    virtualenv: "{{virtualenv}}"
  tags:
    - virtualenv

- name: force latest google-api-python-client
  pip:
    name: google-api-python-client
    state: latest

- name: create config folder
  become: yes
  file:
    path: "{{app_dir}}/config"
    owner: "{{app_user}}"
    group: "{{app_user}}"
    state: directory

- name: Push local_settings.py
  become: yes
  become_user: "{{app_user}}"
  template: src=local_settings.yml dest="{{local_settings_file}}"
  tags:
    - deploy
  notify:
    - Restart uWSGI

- name: migrate db
  django_manage:
    command: migrate
    app_path: "{{app_dir}}"
    virtualenv: "{{virtualenv}}"
  tags:
    - deploy

- name: Install the gpg key for nodejs LTS
  become: yes
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    state: present

- name: Install the nodejs LTS repos
  become: yes
  apt_repository:
    repo: "deb https://deb.nodesource.com/node_10.x xenial main"
    state: present
    update_cache: yes

- name: Install the nodejs
  become: yes
  apt:
    name: nodejs
    state: present

- name: Install package.json packages
  remote_user: "{{app_user}}"
  npm:
    path: "{{app_dir}}"
  tags:
   - deploy

- name: Build frontend assets
  remote_user: "{{app_user}}"
  shell: "npm run-script build"
  args:
    chdir: "{{app_dir}}"
  tags:
   - deploy